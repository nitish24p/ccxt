(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*  A entry point for the browser bundle version. This gets compiled by:
        
        browserify --debug ./ccxt.browser.js > ./build/ccxt.browser.js
 */

window.ccxt = require ('./ccxt')
},{"./ccxt":2}],2:[function(require,module,exports){
"use strict";

/*

MIT License

Copyright (c) 2017 Igor Kroitor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

"use strict";

//-----------------------------------------------------------------------------

const Exchange  = require ('./lib/base/Exchange');
const functions = require ('./lib/base/functions');
const errors    = require ('./lib/base/errors');

//-----------------------------------------------------------------------------
// this is updated by vss.js when building

const version = '1.0.0'

Exchange.ccxtVersion = version

//-----------------------------------------------------------------------------

const exchanges = {
    '_1broker':                require ('./lib/_1broker.js'),
    '_1btcxe':                 require ('./lib/_1btcxe.js'),
    'acx':                     require ('./lib/acx.js'),
    'allcoin':                 require ('./lib/allcoin.js'),
    'anxpro':                  require ('./lib/anxpro.js'),
    'binance':                 require ('./lib/binance.js'),
    'bit2c':                   require ('./lib/bit2c.js'),
    'bitbay':                  require ('./lib/bitbay.js'),
    'bitcoincoid':             require ('./lib/bitcoincoid.js'),
    'bitfinex':                require ('./lib/bitfinex.js'),
    'bitfinex2':               require ('./lib/bitfinex2.js'),
    'bitflyer':                require ('./lib/bitflyer.js'),
    'bithumb':                 require ('./lib/bithumb.js'),
    'bitlish':                 require ('./lib/bitlish.js'),
    'bitmarket':               require ('./lib/bitmarket.js'),
    'bitmex':                  require ('./lib/bitmex.js'),
    'bitso':                   require ('./lib/bitso.js'),
    'bitstamp':                require ('./lib/bitstamp.js'),
    'bitstamp1':               require ('./lib/bitstamp1.js'),
    'bittrex':                 require ('./lib/bittrex.js'),
    'bl3p':                    require ('./lib/bl3p.js'),
    'bleutrade':               require ('./lib/bleutrade.js'),
    'btcbox':                  require ('./lib/btcbox.js'),
    'btcchina':                require ('./lib/btcchina.js'),
    'btcexchange':             require ('./lib/btcexchange.js'),
    'btcmarkets':              require ('./lib/btcmarkets.js'),
    'btctradeua':              require ('./lib/btctradeua.js'),
    'btcturk':                 require ('./lib/btcturk.js'),
    'btcx':                    require ('./lib/btcx.js'),
    'bter':                    require ('./lib/bter.js'),
    'bxinth':                  require ('./lib/bxinth.js'),
    'ccex':                    require ('./lib/ccex.js'),
    'cex':                     require ('./lib/cex.js'),
    'chbtc':                   require ('./lib/chbtc.js'),
    'chilebit':                require ('./lib/chilebit.js'),
    'coincheck':               require ('./lib/coincheck.js'),
    'coinfloor':               require ('./lib/coinfloor.js'),
    'coingi':                  require ('./lib/coingi.js'),
    'coinmarketcap':           require ('./lib/coinmarketcap.js'),
    'coinmate':                require ('./lib/coinmate.js'),
    'coinsecure':              require ('./lib/coinsecure.js'),
    'coinspot':                require ('./lib/coinspot.js'),
    'cryptopia':               require ('./lib/cryptopia.js'),
    'dsx':                     require ('./lib/dsx.js'),
    'exmo':                    require ('./lib/exmo.js'),
    'flowbtc':                 require ('./lib/flowbtc.js'),
    'foxbit':                  require ('./lib/foxbit.js'),
    'fybse':                   require ('./lib/fybse.js'),
    'fybsg':                   require ('./lib/fybsg.js'),
    'gatecoin':                require ('./lib/gatecoin.js'),
    'gateio':                  require ('./lib/gateio.js'),
    'gdax':                    require ('./lib/gdax.js'),
    'gemini':                  require ('./lib/gemini.js'),
    'getbtc':                  require ('./lib/getbtc.js'),
    'hitbtc':                  require ('./lib/hitbtc.js'),
    'hitbtc2':                 require ('./lib/hitbtc2.js'),
    'huobi':                   require ('./lib/huobi.js'),
    'huobicny':                require ('./lib/huobicny.js'),
    'huobipro':                require ('./lib/huobipro.js'),
    'independentreserve':      require ('./lib/independentreserve.js'),
    'itbit':                   require ('./lib/itbit.js'),
    'jubi':                    require ('./lib/jubi.js'),
    'kraken':                  require ('./lib/kraken.js'),
    'kucoin':                  require ('./lib/kucoin.js'),
    'kuna':                    require ('./lib/kuna.js'),
    'lakebtc':                 require ('./lib/lakebtc.js'),
    'liqui':                   require ('./lib/liqui.js'),
    'livecoin':                require ('./lib/livecoin.js'),
    'luno':                    require ('./lib/luno.js'),
    'mercado':                 require ('./lib/mercado.js'),
    'mixcoins':                require ('./lib/mixcoins.js'),
    'nova':                    require ('./lib/nova.js'),
    'okcoincny':               require ('./lib/okcoincny.js'),
    'okcoinusd':               require ('./lib/okcoinusd.js'),
    'okex':                    require ('./lib/okex.js'),
    'paymium':                 require ('./lib/paymium.js'),
    'poloniex':                require ('./lib/poloniex.js'),
    'qryptos':                 require ('./lib/qryptos.js'),
    'quadrigacx':              require ('./lib/quadrigacx.js'),
    'quoine':                  require ('./lib/quoine.js'),
    'southxchange':            require ('./lib/southxchange.js'),
    'surbitcoin':              require ('./lib/surbitcoin.js'),
    'therock':                 require ('./lib/therock.js'),
    'tidex':                   require ('./lib/tidex.js'),
    'urdubit':                 require ('./lib/urdubit.js'),
    'vaultoro':                require ('./lib/vaultoro.js'),
    'vbtc':                    require ('./lib/vbtc.js'),
    'virwox':                  require ('./lib/virwox.js'),
    'wex':                     require ('./lib/wex.js'),
    'xbtce':                   require ('./lib/xbtce.js'),
    'yobit':                   require ('./lib/yobit.js'),
    'yunbi':                   require ('./lib/yunbi.js'),
    'zaif':                    require ('./lib/zaif.js'),
    'zb':                      require ('./lib/zb.js'),    
}

//-----------------------------------------------------------------------------

module.exports = Object.assign ({ version, Exchange, exchanges: Object.keys (exchanges) }, exchanges, functions, errors)

//-----------------------------------------------------------------------------

},{"./lib/_1broker.js":3,"./lib/_1btcxe.js":4,"./lib/acx.js":5,"./lib/allcoin.js":6,"./lib/anxpro.js":7,"./lib/base/Exchange":8,"./lib/base/errors":10,"./lib/base/functions":11,"./lib/binance.js":13,"./lib/bit2c.js":14,"./lib/bitbay.js":15,"./lib/bitcoincoid.js":16,"./lib/bitfinex.js":17,"./lib/bitfinex2.js":18,"./lib/bitflyer.js":19,"./lib/bithumb.js":20,"./lib/bitlish.js":21,"./lib/bitmarket.js":22,"./lib/bitmex.js":23,"./lib/bitso.js":24,"./lib/bitstamp.js":25,"./lib/bitstamp1.js":26,"./lib/bittrex.js":27,"./lib/bl3p.js":28,"./lib/bleutrade.js":29,"./lib/btcbox.js":30,"./lib/btcchina.js":31,"./lib/btcexchange.js":32,"./lib/btcmarkets.js":33,"./lib/btctradeua.js":34,"./lib/btcturk.js":35,"./lib/btcx.js":36,"./lib/bter.js":37,"./lib/bxinth.js":38,"./lib/ccex.js":39,"./lib/cex.js":40,"./lib/chbtc.js":41,"./lib/chilebit.js":42,"./lib/coincheck.js":43,"./lib/coinfloor.js":44,"./lib/coingi.js":45,"./lib/coinmarketcap.js":46,"./lib/coinmate.js":47,"./lib/coinsecure.js":48,"./lib/coinspot.js":49,"./lib/cryptopia.js":50,"./lib/dsx.js":51,"./lib/exmo.js":52,"./lib/flowbtc.js":53,"./lib/foxbit.js":54,"./lib/fybse.js":55,"./lib/fybsg.js":56,"./lib/gatecoin.js":57,"./lib/gateio.js":58,"./lib/gdax.js":59,"./lib/gemini.js":60,"./lib/getbtc.js":61,"./lib/hitbtc.js":62,"./lib/hitbtc2.js":63,"./lib/huobi.js":64,"./lib/huobicny.js":65,"./lib/huobipro.js":66,"./lib/independentreserve.js":67,"./lib/itbit.js":68,"./lib/jubi.js":69,"./lib/kraken.js":70,"./lib/kucoin.js":71,"./lib/kuna.js":72,"./lib/lakebtc.js":73,"./lib/liqui.js":74,"./lib/livecoin.js":75,"./lib/luno.js":76,"./lib/mercado.js":77,"./lib/mixcoins.js":78,"./lib/nova.js":79,"./lib/okcoincny.js":80,"./lib/okcoinusd.js":81,"./lib/okex.js":82,"./lib/paymium.js":83,"./lib/poloniex.js":84,"./lib/qryptos.js":85,"./lib/quadrigacx.js":86,"./lib/quoine.js":87,"./lib/southxchange.js":88,"./lib/surbitcoin.js":89,"./lib/therock.js":90,"./lib/tidex.js":91,"./lib/urdubit.js":92,"./lib/vaultoro.js":93,"./lib/vbtc.js":94,"./lib/virwox.js":95,"./lib/wex.js":96,"./lib/xbtce.js":97,"./lib/yobit.js":98,"./lib/yunbi.js":99,"./lib/zaif.js":100,"./lib/zb.js":101}],3:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, AuthenticationError } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class _1broker extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': '_1broker',
            'name': '1Broker',
            'countries': 'US',
            'rateLimit': 1500,
            'version': 'v2',
            'hasPublicAPI': false,
            'hasCORS': true,
            'hasFetchTrades': false,
            'hasFetchOHLCV': true,
            'timeframes': {
                '1m': '60',
                '15m': '900',
                '1h': '3600',
                '1d': '86400'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766021-420bd9fc-5ecb-11e7-8ed6-56d0081efed2.jpg',
                'api': 'https://1broker.com/api',
                'www': 'https://1broker.com',
                'doc': 'https://1broker.com/?c=en/content/api-documentation'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': false
            },
            'api': {
                'private': {
                    'get': ['market/bars', 'market/categories', 'market/details', 'market/list', 'market/quotes', 'market/ticks', 'order/cancel', 'order/create', 'order/open', 'position/close', 'position/close_cancel', 'position/edit', 'position/history', 'position/open', 'position/shared/get', 'social/profile_statistics', 'social/profile_trades', 'user/bitcoin_deposit_address', 'user/details', 'user/overview', 'user/quota_status', 'user/transaction_log']
                }
            }
        });
    }

    fetchCategories() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privateGetMarketCategories();
            // they return an empty string among their categories, wtf?
            let categories = response['response'];
            let result = [];
            for (let i = 0; i < categories.length; i++) {
                if (categories[i]) result.push(categories[i]);
            }
            return result;
        })();
    }

    fetchMarkets() {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let this_ = _this2; // workaround for Babel bug (not passing `this` to _recursive() call)
            let categories = yield _this2.fetchCategories();
            let result = [];
            for (let c = 0; c < categories.length; c++) {
                let category = categories[c];
                let markets = yield this_.privateGetMarketList({
                    'category': category.toLowerCase()
                });
                for (let p = 0; p < markets['response'].length; p++) {
                    let market = markets['response'][p];
                    let id = market['symbol'];
                    let symbol = undefined;
                    let base = undefined;
                    let quote = undefined;
                    if (category == 'FOREX' || category == 'CRYPTO') {
                        symbol = market['name'];
                        let parts = symbol.split('/');
                        base = parts[0];
                        quote = parts[1];
                    } else {
                        base = id;
                        quote = 'USD';
                        symbol = base + '/' + quote;
                    }
                    base = this_.commonCurrencyCode(base);
                    quote = this_.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let balance = yield _this3.privateGetUserOverview();
            let response = balance['response'];
            let result = {
                'info': response
            };
            let currencies = Object.keys(_this3.currencies);
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                result[currency] = _this3.account();
            }
            let total = parseFloat(response['balance']);
            result['BTC']['free'] = total;
            result['BTC']['total'] = total;
            return _this3.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.privateGetMarketQuotes(_this4.extend({
                'symbols': _this4.marketId(symbol)
            }, params));
            let orderbook = response['response'][0];
            let timestamp = _this4.parse8601(orderbook['updated']);
            let bidPrice = parseFloat(orderbook['bid']);
            let askPrice = parseFloat(orderbook['ask']);
            let bid = [bidPrice, undefined];
            let ask = [askPrice, undefined];
            return {
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'bids': [bid],
                'asks': [ask]
            };
        })();
    }

    fetchTrades(symbol) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            throw new ExchangeError(_this5.id + ' fetchTrades () method not implemented yet');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let result = yield _this6.privateGetMarketBars(_this6.extend({
                'symbol': _this6.marketId(symbol),
                'resolution': 60,
                'limit': 1
            }, params));
            let orderbook = yield _this6.fetchOrderBook(symbol);
            let ticker = result['response'][0];
            let timestamp = _this6.parse8601(ticker['date']);
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this6.iso8601(timestamp),
                'high': parseFloat(ticker['h']),
                'low': parseFloat(ticker['l']),
                'bid': orderbook['bids'][0][0],
                'ask': orderbook['asks'][0][0],
                'vwap': undefined,
                'open': parseFloat(ticker['o']),
                'close': parseFloat(ticker['c']),
                'first': undefined,
                'last': undefined,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [this.parse8601(ohlcv['date']), parseFloat(ohlcv['o']), parseFloat(ohlcv['h']), parseFloat(ohlcv['l']), parseFloat(ohlcv['c']), undefined];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let request = {
                'symbol': market['id'],
                'resolution': _this7.timeframes[timeframe]
            };
            if (since) request['date_start'] = _this7.iso8601(since); // they also support date_end
            if (limit) request['limit'] = limit;
            let result = yield _this7.privateGetMarketBars(_this7.extend(request, params));
            return _this7.parseOHLCVs(result['response'], market, timeframe, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let order = {
                'symbol': _this8.marketId(symbol),
                'margin': amount,
                'direction': side == 'sell' ? 'short' : 'long',
                'leverage': 1,
                'type': side
            };
            if (type == 'limit') order['price'] = price;else order['type'] += '_market';
            let result = yield _this8.privateGetOrderCreate(_this8.extend(order, params));
            return {
                'info': result,
                'id': result['response']['order_id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            return yield _this9.privatePostOrderCancel({ 'order_id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        this.checkRequiredCredentials();
        let url = this.urls['api'] + '/' + this.version + '/' + path + '.php';
        let query = this.extend({ 'token': this.apiKey }, params);
        url += '?' + this.urlencode(query);
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this10.fetch2(path, api, method, params, headers, body);
            if ('warning' in response) if (response['warning']) throw new ExchangeError(_this10.id + ' ' + _this10.json(response));
            if ('error' in response) if (response['error']) throw new ExchangeError(_this10.id + ' ' + _this10.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],4:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class _1btcxe extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': '_1btcxe',
            'name': '1BTCXE',
            'countries': 'PA', // Panama
            'comment': 'Crypto Capital API',
            'hasCORS': true,
            'hasFetchOHLCV': true,
            'hasWithdraw': true,
            'timeframes': {
                '1d': '1year'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766049-2b294408-5ecc-11e7-85cc-adaff013dc1a.jpg',
                'api': 'https://1btcxe.com/api',
                'www': 'https://1btcxe.com',
                'doc': 'https://1btcxe.com/api-docs.php'
            },
            'api': {
                'public': {
                    'get': ['stats', 'historical-prices', 'order-book', 'transactions']
                },
                'private': {
                    'post': ['balances-and-info', 'open-orders', 'user-transactions', 'btc-deposit-address/get', 'btc-deposit-address/new', 'deposits/get', 'withdrawals/get', 'orders/new', 'orders/edit', 'orders/cancel', 'orders/status', 'withdrawals/new']
                }
            },
            'markets': {
                'BTC/USD': { 'id': 'USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
                'BTC/EUR': { 'id': 'EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
                'BTC/CNY': { 'id': 'CNY', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
                'BTC/RUB': { 'id': 'RUB', 'symbol': 'BTC/RUB', 'base': 'BTC', 'quote': 'RUB' },
                'BTC/CHF': { 'id': 'CHF', 'symbol': 'BTC/CHF', 'base': 'BTC', 'quote': 'CHF' },
                'BTC/JPY': { 'id': 'JPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },
                'BTC/GBP': { 'id': 'GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
                'BTC/CAD': { 'id': 'CAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
                'BTC/AUD': { 'id': 'AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
                'BTC/AED': { 'id': 'AED', 'symbol': 'BTC/AED', 'base': 'BTC', 'quote': 'AED' },
                'BTC/BGN': { 'id': 'BGN', 'symbol': 'BTC/BGN', 'base': 'BTC', 'quote': 'BGN' },
                'BTC/CZK': { 'id': 'CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' },
                'BTC/DKK': { 'id': 'DKK', 'symbol': 'BTC/DKK', 'base': 'BTC', 'quote': 'DKK' },
                'BTC/HKD': { 'id': 'HKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },
                'BTC/HRK': { 'id': 'HRK', 'symbol': 'BTC/HRK', 'base': 'BTC', 'quote': 'HRK' },
                'BTC/HUF': { 'id': 'HUF', 'symbol': 'BTC/HUF', 'base': 'BTC', 'quote': 'HUF' },
                'BTC/ILS': { 'id': 'ILS', 'symbol': 'BTC/ILS', 'base': 'BTC', 'quote': 'ILS' },
                'BTC/INR': { 'id': 'INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' },
                'BTC/MUR': { 'id': 'MUR', 'symbol': 'BTC/MUR', 'base': 'BTC', 'quote': 'MUR' },
                'BTC/MXN': { 'id': 'MXN', 'symbol': 'BTC/MXN', 'base': 'BTC', 'quote': 'MXN' },
                'BTC/NOK': { 'id': 'NOK', 'symbol': 'BTC/NOK', 'base': 'BTC', 'quote': 'NOK' },
                'BTC/NZD': { 'id': 'NZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },
                'BTC/PLN': { 'id': 'PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
                'BTC/RON': { 'id': 'RON', 'symbol': 'BTC/RON', 'base': 'BTC', 'quote': 'RON' },
                'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' },
                'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
                'BTC/THB': { 'id': 'THB', 'symbol': 'BTC/THB', 'base': 'BTC', 'quote': 'THB' },
                'BTC/TRY': { 'id': 'TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' },
                'BTC/ZAR': { 'id': 'ZAR', 'symbol': 'BTC/ZAR', 'base': 'BTC', 'quote': 'ZAR' }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostBalancesAndInfo();
            let balance = response['balances-and-info'];
            let result = { 'info': balance };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this.account();
                account['free'] = _this.safeFloat(balance['available'], currency, 0.0);
                account['used'] = _this.safeFloat(balance['on_hold'], currency, 0.0);
                account['total'] = _this.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this2.publicGetOrderBook(_this2.extend({
                'currency': _this2.marketId(symbol)
            }, params));
            return _this2.parseOrderBook(response['order-book'], undefined, 'bid', 'ask', 'price', 'order_amount');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this3.publicGetStats(_this3.extend({
                'currency': _this3.marketId(symbol)
            }, params));
            let ticker = response['stats'];
            let timestamp = _this3.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['max']),
                'low': parseFloat(ticker['min']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_price']),
                'change': parseFloat(ticker['daily_change']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['total_btc_traded'])
            };
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {
        return [this.parse8601(ohlcv['date'] + ' 00:00:00'), undefined, undefined, undefined, parseFloat(ohlcv['price']), undefined];
    }

    fetchOHLCV(symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetHistoricalPrices(_this4.extend({
                'currency': market['id'],
                'timeframe': _this4.timeframes[timeframe]
            }, params));
            let ohlcvs = _this4.omit(response['historical-prices'], 'request_currency');
            return _this4.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(trade['timestamp']) * 1000;
        return {
            'id': trade['id'],
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'order': undefined,
            'type': undefined,
            'side': trade['maker_type'],
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetTransactions(_this5.extend({
                'currency': market['id']
            }, params));
            let trades = _this5.omit(response['transactions'], 'request_currency');
            return _this5.parseTrades(trades, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let order = {
                'side': side,
                'type': type,
                'currency': _this6.marketId(symbol),
                'amount': amount
            };
            if (type == 'limit') order['limit_price'] = price;
            let result = yield _this6.privatePostOrdersNew(_this6.extend(order, params));
            return {
                'info': result,
                'id': result
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            return yield _this7.privatePostOrdersCancel({ 'id': id });
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let response = yield _this8.privatePostWithdrawalsNew(_this8.extend({
                'currency': currency,
                'amount': parseFloat(amount),
                'address': address
            }, params));
            return {
                'info': response,
                'id': response['result']['uuid']
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        if (this.id == 'cryptocapital') throw new ExchangeError(this.id + ' is an abstract base API for _1btcxe');
        let url = this.urls['api'] + '/' + path;
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let query = this.extend({
                'api_key': this.apiKey,
                'nonce': this.nonce()
            }, params);
            let request = this.json(query);
            query['signature'] = this.hmac(this.encode(request), this.encode(this.secret));
            body = this.json(query);
            headers = { 'Content-Type': 'application/json' };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.fetch2(path, api, method, params, headers, body);
            if ('errors' in response) {
                let errors = [];
                for (let e = 0; e < response['errors'].length; e++) {
                    let error = response['errors'][e];
                    errors.push(error['code'] + ': ' + error['message']);
                }
                errors = errors.join(' ');
                throw new ExchangeError(_this9.id + ' ' + errors);
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],5:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, OrderNotFound } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class acx extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'acx',
            'name': 'ACX',
            'countries': 'AU',
            'rateLimit': 1000,
            'version': 'v2',
            'hasCORS': true,
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'hasWithdraw': true,
            'timeframes': {
                '1m': '1',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '120',
                '4h': '240',
                '12h': '720',
                '1d': '1440',
                '3d': '4320',
                '1w': '10080'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/30247614-1fe61c74-9621-11e7-9e8c-f1a627afa279.jpg',
                'extension': '.json',
                'api': 'https://acx.io/api',
                'www': 'https://acx.io',
                'doc': 'https://acx.io/documents/api_v2'
            },
            'api': {
                'public': {
                    'get': ['markets', // Get all available markets
                    'tickers', // Get ticker of all markets
                    'tickers/{market}', // Get ticker of specific market
                    'trades', // Get recent trades on market, each trade is included only once Trades are sorted in reverse creation order.
                    'order_book', // Get the order book of specified market
                    'depth', // Get depth or specified market Both asks and bids are sorted from highest price to lowest.
                    'k', // Get OHLC(k line) of specific market
                    'k_with_pending_trades', // Get K data with pending trades, which are the trades not included in K data yet, because there's delay between trade generated and processed by K data generator
                    'timestamp']
                },
                'private': {
                    'get': ['members/me', // Get your profile and accounts info
                    'deposits', // Get your deposits history
                    'deposit', // Get details of specific deposit
                    'deposit_address', // Where to deposit The address field could be empty when a new address is generating (e.g. for bitcoin), you should try again later in that case.
                    'orders', // Get your orders, results is paginated
                    'order', // Get information of specified order
                    'trades/my', // Get your executed trades Trades are sorted in reverse creation order.
                    'withdraws', // Get your cryptocurrency withdraws
                    'withdraw'],
                    'post': ['orders', // Create a Sell/Buy order
                    'orders/multi', // Create multiple sell/buy orders
                    'orders/clear', // Cancel all my orders
                    'order/delete', // Cancel an order
                    'withdraw']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'maker': 0.0,
                    'taker': 0.0
                },
                'funding': {
                    'tierBased': false,
                    'percentage': true,
                    'withdraw': 0.0 // There is only 1% fee on withdrawals to your bank account.
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetMarkets();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['id'];
                let symbol = market['name'];
                let [base, quote] = symbol.split('/');
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetMembersMe();
            let balances = response['accounts'];
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let uppercase = currency.toUpperCase();
                let account = {
                    'free': parseFloat(balance['balance']),
                    'used': parseFloat(balance['locked']),
                    'total': 0.0
                };
                account['total'] = _this2.sum(account['free'], account['used']);
                result[uppercase] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let orderbook = yield _this3.publicGetDepth(_this3.extend({
                'market': market['id'],
                'limit': 300
            }, params));
            let timestamp = orderbook['timestamp'] * 1000;
            let result = _this3.parseOrderBook(orderbook, timestamp);
            result['bids'] = _this3.sortBy(result['bids'], 0, true);
            result['asks'] = _this3.sortBy(result['asks'], 0);
            return result;
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['at'] * 1000;
        ticker = ticker['ticker'];
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'high', undefined),
            'low': this.safeFloat(ticker, 'low', undefined),
            'bid': this.safeFloat(ticker, 'buy', undefined),
            'ask': this.safeFloat(ticker, 'sell', undefined),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': this.safeFloat(ticker, 'last', undefined),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'vol', undefined),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let tickers = yield _this4.publicGetTickers(params);
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = undefined;
                let symbol = id;
                if (id in _this4.markets_by_id) {
                    market = _this4.markets_by_id[id];
                    symbol = market['symbol'];
                } else {
                    let base = id.slice(0, 3);
                    let quote = id.slice(3, 6);
                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    base = _this4.commonCurrencyCode(base);
                    quote = _this4.commonCurrencyCode(quote);
                    let symbol = base + '/' + quote;
                }
                let ticker = tickers[id];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetTickersMarket(_this5.extend({
                'market': market['id']
            }, params));
            return _this5.parseTicker(response, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = trade['timestamp'] * 1000;
        let side = trade['type'] == 'bid' ? 'buy' : 'sell';
        return {
            'info': trade,
            'id': trade['tid'].toString(),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': side,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetTrades(_this6.extend({
                'market': market['id']
            }, params));
            // looks like they switched this endpoint off
            // it returns 503 Service Temporarily Unavailable always
            // return this.parseTrades (response, market, since, limit);
            return response;
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [ohlcv[0] * 1000, ohlcv[1], ohlcv[2], ohlcv[3], ohlcv[4], ohlcv[5]];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            if (!limit) limit = 500; // default is 30
            let request = {
                'market': market['id'],
                'period': _this7.timeframes[timeframe],
                'limit': limit
            };
            if (since) request['timestamp'] = since;
            let response = yield _this7.publicGetK(_this7.extend(request, params));
            return _this7.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    parseOrder(order, market = undefined) {
        let symbol = undefined;
        if (market) {
            symbol = market['symbol'];
        } else {
            let marketId = order['market'];
            symbol = this.marketsById[marketId]['symbol'];
        }
        let timestamp = this.parse8601(order['created_at']);
        let state = order['state'];
        let status = undefined;
        if (state == 'done') {
            status = 'closed';
        } else if (state == 'wait') {
            status = 'open';
        } else if (state == 'cancel') {
            status = 'canceled';
        }
        return {
            'id': order['id'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'status': status,
            'symbol': symbol,
            'type': order['ord_type'],
            'side': order['side'],
            'price': parseFloat(order['price']),
            'amount': parseFloat(order['volume']),
            'filled': parseFloat(order['executed_volume']),
            'remaining': parseFloat(order['remaining_volume']),
            'trades': undefined,
            'fee': undefined,
            'info': order
        };
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let order = {
                'market': _this8.marketId(symbol),
                'side': side,
                'volume': amount.toString(),
                'ord_type': type
            };
            if (type == 'limit') {
                order['price'] = price.toString();
            }
            let response = yield _this8.privatePostOrders(_this8.extend(order, params));
            let market = _this8.marketsById[response['market']];
            return _this8.parseOrder(response, market);
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let result = yield _this9.privatePostOrderDelete({ 'id': id });
            let order = _this9.parseOrder(result);
            if (order['status'] == 'closed') {
                throw new OrderNotFound(_this9.id + ' ' + result);
            }
            return order;
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let result = yield _this10.privatePostWithdraw(_this10.extend({
                'currency': currency.toLowerCase(),
                'sum': amount,
                'address': address
            }, params));
            return {
                'info': result,
                'id': undefined
            };
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    encodeParams(params) {
        if ('orders' in params) {
            let orders = params['orders'];
            let query = this.urlencode(this.keysort(this.omit(params, 'orders')));
            for (let i = 0; i < orders.length; i++) {
                let order = orders[i];
                let keys = Object.keys(order);
                for (let k = 0; k < keys.length; k++) {
                    let key = keys[k];
                    let value = order[key];
                    query += '&orders%5B%5D%5B' + key + '%5D=' + value.toString();
                }
            }
            return query;
        }
        return this.urlencode(this.keysort(params));
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let request = '/api' + '/' + this.version + '/' + this.implodeParams(path, params);
        if ('extension' in this.urls) request += this.urls['extension'];
        let query = this.omit(params, this.extractParams(path));
        let url = this.urls['api'] + request;
        if (api == 'public') {
            if (Object.keys(query).length) {
                url += '?' + this.urlencode(query);
            }
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let query = this.encodeParams(this.extend({
                'access_key': this.apiKey,
                'tonce': nonce
            }, params));
            let auth = method + '|' + request + '|' + query;
            let signature = this.hmac(this.encode(auth), this.encode(this.secret));
            let suffix = query + '&signature=' + signature;
            if (method == 'GET') {
                url += '?' + suffix;
            } else {
                body = suffix;
                headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
            }
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this11.fetch2(path, api, method, params, headers, body);
            if ('error' in response) throw new ExchangeError(_this11.id + ' ' + _this11.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],6:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const okcoinusd = require('./okcoinusd.js');

//  ---------------------------------------------------------------------------

module.exports = class allcoin extends okcoinusd {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'allcoin',
            'name': 'Allcoin',
            'countries': 'CA',
            'hasCORS': false,
            'extension': '',
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/31561809-c316b37c-b061-11e7-8d5a-b547b4d730eb.jpg',
                'api': {
                    'web': 'https://allcoin.com',
                    'public': 'https://api.allcoin.com/api',
                    'private': 'https://api.allcoin.com/api'
                },
                'www': 'https://allcoin.com',
                'doc': 'https://allcoin.com/About/APIReference'
            },
            'api': {
                'web': {
                    'get': ['marketoverviews/']
                },
                'public': {
                    'get': ['depth', 'kline', 'ticker', 'trades']
                },
                'private': {
                    'post': ['batch_trade', 'cancel_order', 'order_history', 'order_info', 'orders_info', 'repayment', 'trade', 'trade_history', 'userinfo']
                }
            },
            'markets': undefined
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            // todo rewrite for https://www.allcoin.com/Home/MarketOverViewDetail/
            let currencies = ['BTC', 'ETH', 'USD', 'QTUM', 'CNET', 'CK.USD'];
            let result = [];
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let response = yield _this.webGetMarketoverviews({
                    'type': 'full',
                    'secondary': currency
                });
                let markets = response['Markets'];
                for (let k = 0; k < markets.length; k++) {
                    let market = markets[k];
                    let base = market['Primary'];
                    let quote = market['Secondary'];
                    let id = base.toLowerCase() + '_' + quote.toLowerCase();
                    let symbol = base + '/' + quote;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'type': 'spot',
                        'spot': true,
                        'future': false,
                        'info': market
                    });
                }
            }
            return result;
        })();
    }

    parseOrderStatus(status) {
        if (status == -1) return 'canceled';
        if (status == 0) return 'open';
        if (status == 1) return 'open'; // partially filled
        if (status == 2) return 'closed';
        if (status == 10) return 'canceled';
        return status;
    }

    getCreateDateField() {
        // allcoin typo create_data instead of create_date
        return 'create_data';
    }

    getOrdersField() {
        // allcoin typo order instead of orders (expected based on their API docs)
        return 'order';
    }
};
},{"./okcoinusd.js":81}],7:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class anxpro extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'anxpro',
            'name': 'ANXPro',
            'countries': ['JP', 'SG', 'HK', 'NZ'],
            'version': '2',
            'rateLimit': 1500,
            'hasCORS': false,
            'hasFetchTrades': false,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27765983-fd8595da-5ec9-11e7-82e3-adb3ab8c2612.jpg',
                'api': 'https://anxpro.com/api',
                'www': 'https://anxpro.com',
                'doc': ['http://docs.anxv2.apiary.io', 'https://anxpro.com/pages/api']
            },
            'api': {
                'public': {
                    'get': ['{currency_pair}/money/ticker', '{currency_pair}/money/depth/full', '{currency_pair}/money/trade/fetch']
                },
                'private': {
                    'post': ['{currency_pair}/money/order/add', '{currency_pair}/money/order/cancel', '{currency_pair}/money/order/quote', '{currency_pair}/money/order/result', '{currency_pair}/money/orders', 'money/{currency}/address', 'money/{currency}/send_simple', 'money/info', 'money/trade/list', 'money/wallet/history']
                }
            },
            'markets': {
                'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'multiplier': 100000 },
                'BTC/HKD': { 'id': 'BTCHKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD', 'multiplier': 100000 },
                'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'multiplier': 100000 },
                'BTC/CAD': { 'id': 'BTCCAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD', 'multiplier': 100000 },
                'BTC/AUD': { 'id': 'BTCAUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD', 'multiplier': 100000 },
                'BTC/SGD': { 'id': 'BTCSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD', 'multiplier': 100000 },
                'BTC/JPY': { 'id': 'BTCJPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY', 'multiplier': 100000 },
                'BTC/GBP': { 'id': 'BTCGBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP', 'multiplier': 100000 },
                'BTC/NZD': { 'id': 'BTCNZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD', 'multiplier': 100000 },
                'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'multiplier': 100000 },
                'STR/BTC': { 'id': 'STRBTC', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC', 'multiplier': 100000000 },
                'XRP/BTC': { 'id': 'XRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'multiplier': 100000000 },
                'DOGE/BTC': { 'id': 'DOGEBTC', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'multiplier': 100000000 }
            },
            'fees': {
                'trading': {
                    'maker': 0.3 / 100,
                    'taker': 0.6 / 100
                }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostMoneyInfo();
            let balance = response['data'];
            let currencies = Object.keys(balance['Wallets']);
            let result = { 'info': balance };
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                let account = _this.account();
                if (currency in balance['Wallets']) {
                    let wallet = balance['Wallets'][currency];
                    account['free'] = parseFloat(wallet['Available_Balance']['value']);
                    account['total'] = parseFloat(wallet['Balance']['value']);
                    account['used'] = account['total'] - account['free'];
                }
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this2.publicGetCurrencyPairMoneyDepthFull(_this2.extend({
                'currency_pair': _this2.marketId(symbol)
            }, params));
            let orderbook = response['data'];
            let t = parseInt(orderbook['dataUpdateTime']);
            let timestamp = parseInt(t / 1000);
            return _this2.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this3.publicGetCurrencyPairMoneyTicker(_this3.extend({
                'currency_pair': _this3.marketId(symbol)
            }, params));
            let ticker = response['data'];
            let t = parseInt(ticker['dataUpdateTime']);
            let timestamp = parseInt(t / 1000);
            let bid = _this3.safeFloat(ticker['buy'], 'value');
            let ask = _this3.safeFloat(ticker['sell'], 'value');;
            let vwap = parseFloat(ticker['vwap']['value']);
            let baseVolume = parseFloat(ticker['vol']['value']);
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']['value']),
                'low': parseFloat(ticker['low']['value']),
                'bid': bid,
                'ask': ask,
                'vwap': vwap,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']['value']),
                'change': undefined,
                'percentage': undefined,
                'average': parseFloat(ticker['avg']['value']),
                'baseVolume': baseVolume,
                'quoteVolume': baseVolume * vwap,
                'info': ticker
            };
        })();
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            throw new ExchangeError(_this4.id + ' switched off the trades endpoint, see their docs at http://docs.anxv2.apiary.io/reference/market-data/currencypairmoneytradefetch-disabled');
            return _this4.publicGetCurrencyPairMoneyTradeFetch(_this4.extend({
                'currency_pair': _this4.marketId(symbol)
            }, params));
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let market = _this5.market(symbol);
            let order = {
                'currency_pair': market['id'],
                'amount_int': parseInt(amount * 100000000) // 10^8
            };
            if (type == 'limit') {
                order['price_int'] = parseInt(price * market['multiplier']); // 10^5 or 10^8
            }
            order['type'] = side == 'buy' ? 'bid' : 'ask';
            let result = yield _this5.privatePostCurrencyPairMoneyOrderAdd(_this5.extend(order, params));
            return {
                'info': result,
                'id': result['data']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCurrencyPairMoneyOrderCancel({ 'oid': id });
        })();
    }

    getAmountMultiplier(currency) {
        if (currency == 'BTC') {
            return 100000000;
        } else if (currency == 'LTC') {
            return 100000000;
        } else if (currency == 'STR') {
            return 100000000;
        } else if (currency == 'XRP') {
            return 100000000;
        } else if (currency == 'DOGE') {
            return 100000000;
        }
        return 100;
    }

    withdraw(currency, amount, address, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let multiplier = _this7.getAmountMultiplier(currency);
            let response = yield _this7.privatePostMoneyCurrencySendSimple(_this7.extend({
                'currency': currency,
                'amount_int': parseInt(amount * multiplier),
                'address': address
            }, params));
            return {
                'info': response,
                'id': response['data']['transactionId']
            };
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let request = this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        let url = this.urls['api'] + '/' + this.version + '/' + request;
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            body = this.urlencode(this.extend({ 'nonce': nonce }, query));
            let secret = this.base64ToBinary(this.secret);
            let auth = request + "\0" + body;
            let signature = this.hmac(this.encode(auth), secret, 'sha512', 'base64');
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Rest-Key': this.apiKey,
                'Rest-Sign': this.decode(signature)
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if ('result' in response) if (response['result'] == 'success') return response;
            throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],8:[function(require,module,exports){
(function (process){
"use strict";

//-----------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const isNode = typeof window === 'undefined',
      functions = require('./functions'),
      throttle = require('./throttle'),
      fetch = require('fetch-ponyfill')().fetch,
      Market = require('./Market');

const { deepExtend,
    extend,
    sleep,
    timeout,
    flatten,
    indexBy,
    sortBy,
    groupBy,
    aggregate,
    uuid,
    precisionFromString } = functions;

const { ExchangeError,
    NotSupported,
    AuthenticationError,
    DDoSProtection,
    RequestTimeout,
    ExchangeNotAvailable } = require('./errors');

// stub until we get a better solution for Webpack and React
// const journal = isNode && require ('./journal')
const journal = undefined;

module.exports = class Exchange {

    getMarket(symbol) {

        if (!this.marketClasses) this.marketClasses = {};

        let marketClass = this.marketClasses[symbol];

        if (marketClass) return marketClass;

        marketClass = new Market(this, symbol);
        this.marketClasses[symbol] = marketClass; // only one Market instance per market
        return marketClass;
    }

    describe() {
        return {};
    }

    constructor(userConfig = {}) {

        Object.assign(this, functions, { encode: string => string, decode: string => string });

        if (isNode) this.nodeVersion = process.version.match(/\d+\.\d+.\d+/)[0];

        // this.initRestRateLimiter ()

        // if (isNode) {
        //     this.userAgent = {
        //         'User-Agent': 'ccxt/' + Exchange.ccxtVersion +
        //             ' (+https://github.com/ccxt/ccxt)' +
        //             ' Node.js/' + this.nodeVersion + ' (JavaScript)'
        //     }
        // }

        this.userAgents = {
            'chrome': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',
            'chrome39': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36'
        };

        this.headers = {};

        // prepended to URL, like https://proxy.com/https://exchange.com/api...
        this.proxy = '';

        this.iso8601 = timestamp => new Date(timestamp).toISOString();
        this.parse8601 = x => Date.parse(x.indexOf('+') >= 0 || x.slice(-1) == 'Z' ? x : x + 'Z');
        this.milliseconds = Date.now;
        this.microseconds = () => Math.floor(this.milliseconds() * 1000);
        this.seconds = () => Math.floor(this.milliseconds() / 1000);
        this.id = undefined;

        // rate limiter settings
        this.enableRateLimit = false;
        this.rateLimit = 2000; // milliseconds = seconds * 1000

        this.parseJsonResponse = true; // whether a reply is required to be in JSON or not
        this.substituteCommonCurrencyCodes = true; // reserved
        this.parseBalanceFromOpenOrders = false; // some exchanges return balance updates from order API endpoints

        this.timeout = 10000; // milliseconds
        this.verbose = false;
        this.debug = false;
        this.journal = 'debug.json';
        this.userAgent = undefined;
        this.twofa = false; // two-factor authentication (2FA)
        this.timeframes = undefined;
        this.hasPublicAPI = true;
        this.hasPrivateAPI = true;
        this.hasCORS = false;
        this.hasDeposit = false;
        this.hasFetchBalance = true;
        this.hasFetchClosedOrders = false;
        this.hasFetchCurrencies = false;
        this.hasFetchMyTrades = false;
        this.hasFetchOHLCV = false;
        this.hasFetchOpenOrders = false;
        this.hasFetchOrder = false;
        this.hasFetchOrderBook = true;
        this.hasFetchOrders = false;
        this.hasFetchTicker = true;
        this.hasFetchTickers = false;
        this.hasFetchTrades = true;
        this.hasWithdraw = false;
        this.hasCreateOrder = this.hasPrivateAPI;
        this.hasCancelOrder = this.hasPrivateAPI;

        this.requiredCredentials = {
            'apiKey': true,
            'secret': true,
            'uid': false,
            'login': false,
            'password': false
        };

        this.balance = {};
        this.orderbooks = {};
        this.tickers = {};
        this.fees = {};
        this.orders = {};
        this.trades = {};
        this.currencies = {};

        this.last_http_response = undefined;
        this.last_json_response = undefined;

        this.arrayConcat = (a, b) => a.concat(b);

        // TODO: generate
        this.market_id = this.marketId;
        this.market_ids = this.marketIds;
        this.array_concat = this.arrayConcat;
        this.implode_params = this.implodeParams;
        this.extract_params = this.extractParams;
        this.fetch_balance = this.fetchBalance;
        this.fetch_free_balance = this.fetchFreeBalance;
        this.fetch_used_balance = this.fetchUsedBalance;
        this.fetch_total_balance = this.fetchTotalBalance;
        this.fetch_l2_order_book = this.fetchL2OrderBook;
        this.fetch_order_book = this.fetchOrderBook;
        this.fetch_tickers = this.fetchTickers;
        this.fetch_ticker = this.fetchTicker;
        this.fetch_trades = this.fetchTrades;
        this.fetch_order = this.fetchOrder;
        this.fetch_orders = this.fetchOrders;
        this.fetch_open_orders = this.fetchOpenOrders;
        this.fetch_closed_orders = this.fetchClosedOrders;
        this.fetch_order_status = this.fetchOrderStatus;
        this.fetch_markets = this.fetchMarkets;
        this.load_markets = this.loadMarkets;
        this.set_markets = this.setMarkets;
        this.parse_balance = this.parseBalance;
        this.parse_bid_ask = this.parseBidAsk;
        this.parse_bids_asks = this.parseBidsAsks;
        this.parse_order_book = this.parseOrderBook;
        this.parse_trades = this.parseTrades;
        this.parse_orders = this.parseOrders;
        this.parse_ohlcv = this.parseOHLCV;
        this.parse_ohlcvs = this.parseOHLCVs;
        this.edit_limit_buy_order = this.editLimitBuyOrder;
        this.edit_limit_sell_order = this.editLimitSellOrder;
        this.edit_limit_order = this.editLimitOrder;
        this.edit_order = this.editOrder;
        this.create_limit_buy_order = this.createLimitBuyOrder;
        this.create_limit_sell_order = this.createLimitSellOrder;
        this.create_market_buy_order = this.createMarketBuyOrder;
        this.create_market_sell_order = this.createMarketSellOrder;
        this.create_order = this.createOrder;
        this.calculate_fee = this.calculateFee;
        this.common_currency_code = this.commonCurrencyCode;
        this.price_to_precision = this.priceToPrecision;
        this.amount_to_precision = this.amountToPrecision;
        this.fee_to_precision = this.feeToPrecision;
        this.cost_to_precision = this.costToPrecision;
        this.precisionFromString = precisionFromString;
        this.precision_from_string = precisionFromString;
        this.truncate = functions.truncate;
        this.uuid = uuid;

        // API methods metainfo
        this.has = {
            'cancelOrder': this.hasPrivateAPI,
            'createDepositAddress': false,
            'createOrder': this.hasPrivateAPI,
            'deposit': false,
            'fetchBalance': this.hasPrivateAPI,
            'fetchClosedOrders': false,
            'fetchCurrencies': false,
            'fetchDepositAddress': false,
            'fetchMarkets': true,
            'fetchMyTrades': false,
            'fetchOHLCV': false,
            'fetchOpenOrders': false,
            'fetchOrder': false,
            'fetchOrderBook': true,
            'fetchOrders': false,
            'fetchTicker': true,
            'fetchTickers': false,
            'fetchTrades': true,
            'withdraw': false

            // merge configs
        };const config = deepExtend(this.describe(), userConfig);

        // merge to this
        for (const [property, value] of Object.entries(config)) this[property] = deepExtend(this[property], value);

        if (this.api) this.defineRestApi(this.api, 'request');

        this.initRestRateLimiter();

        if (this.markets) this.setMarkets(this.markets);

        if (this.debug && journal) {
            journal(() => this.journal, this, Object.keys(this.has));
        }
    }

    defaults() {
        return {/* override me */};
    }

    nonce() {
        return this.seconds();
    }

    encodeURIComponent(...args) {
        return encodeURIComponent(...args);
    }

    checkRequiredCredentials() {
        Object.keys(this.requiredCredentials).map(key => {
            if (this.requiredCredentials[key] && !this[key]) throw new AuthenticationError(this.id + ' requires `' + key + '`');
        });
    }

    initRestRateLimiter() {

        this.tokenBucket = this.extend({
            refillRate: 1 / this.rateLimit,
            delay: 1,
            capacity: 1,
            defaultCost: 1,
            maxCapacity: 1000
        }, this.tokenBucket);

        this.throttle = throttle(this.tokenBucket);

        this.executeRestRequest = function (url, method = 'GET', headers = undefined, body = undefined) {

            let promise = fetch(url, { 'method': method, 'headers': headers, 'body': body, 'agent': this.tunnelAgent || null, timeout: this.timeout }).catch(e => {
                if (isNode) throw new ExchangeNotAvailable([this.id, method, url, e.type, e.message].join(' '));
                throw e; // rethrow all unknown errors
            }).then(response => this.handleRestErrors(response, url, method, headers, body)).then(response => this.handleRestResponse(response, url, method, headers, body));

            return timeout(this.timeout, promise).catch(e => {
                if (e instanceof RequestTimeout) throw new RequestTimeout(this.id + ' ' + method + ' ' + url + ' ' + e.message + ' (' + this.timeout + ' ms)');
                throw e;
            });
        };
    }

    defineRestApi(api, methodName, options = {}) {
        var _this = this;

        for (const type of Object.keys(api)) {
            for (const httpMethod of Object.keys(api[type])) {

                let urls = api[type][httpMethod];
                for (let i = 0; i < urls.length; i++) {
                    let url = urls[i].trim();
                    let splitPath = url.split(/[^a-zA-Z0-9]/);

                    let uppercaseMethod = httpMethod.toUpperCase();
                    let lowercaseMethod = httpMethod.toLowerCase();
                    let camelcaseMethod = this.capitalize(lowercaseMethod);
                    let camelcaseSuffix = splitPath.map(this.capitalize).join('');
                    let underscoreSuffix = splitPath.map(x => x.trim().toLowerCase()).filter(x => x.length > 0).join('_');

                    if (camelcaseSuffix.indexOf(camelcaseMethod) === 0) camelcaseSuffix = camelcaseSuffix.slice(camelcaseMethod.length);

                    if (underscoreSuffix.indexOf(lowercaseMethod) === 0) underscoreSuffix = underscoreSuffix.slice(lowercaseMethod.length);

                    let camelcase = type + camelcaseMethod + this.capitalize(camelcaseSuffix);
                    let underscore = type + '_' + lowercaseMethod + '_' + underscoreSuffix;

                    if ('suffixes' in options) {
                        if ('camelcase' in options['suffixes']) camelcase += options['suffixes']['camelcase'];
                        if ('underscore' in options.suffixes) underscore += options['suffixes']['underscore'];
                    }

                    if ('underscore_suffix' in options) underscore += options.underscoreSuffix;
                    if ('camelcase_suffix' in options) camelcase += options.camelcaseSuffix;

                    let partial = (() => {
                        var _ref = _asyncToGenerator(function* (params) {
                            return _this[methodName](url, type, uppercaseMethod, params || {});
                        });

                        return function partial(_x) {
                            return _ref.apply(this, arguments);
                        };
                    })();

                    this[camelcase] = partial;
                    this[underscore] = partial;
                }
            }
        }
    }

    fetch(url, method = 'GET', headers = undefined, body = undefined) {

        if (isNode && this.userAgent) {
            if (typeof this.userAgent == 'string') headers = extend({ 'User-Agent': this.userAgent }, headers);else if (typeof this.userAgent == 'object' && 'User-Agent' in this.userAgent) headers = extend(this.userAgent, headers);
        }

        if (typeof this.proxy == 'function') {

            url = this.proxy(url);
            if (isNode) headers = extend({ 'Origin': '*' }, headers);
        } else if (typeof this.proxy == 'string') {

            if (this.proxy.length) if (isNode) headers = extend({ 'Origin': '*' }, headers);

            url = this.proxy + url;
        }

        headers = extend(this.headers, headers);

        if (this.verbose) console.log(this.id, method, url, "\nRequest:\n", headers, body);

        return this.executeRestRequest(url, method, headers, body);
    }

    fetch2(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this2 = this;

        return _asyncToGenerator(function* () {

            if (_this2.enableRateLimit) yield _this2.throttle();

            let request = _this2.sign(path, api, method, params, headers, body);
            return _this2.fetch(request.url, request.method, request.headers, request.body);
        })();
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        return this.fetch2(path, api, method, params, headers, body);
    }

    handleErrors(statusCode, statusText, url, method, headers, body) {
        // override me
    }

    defaultErrorHandler(code, reason, url, method, headers, body) {
        if (this.verbose) console.log(this.id, method, url, code, reason, body ? "\nResponse:\n" + body : '');
        if (code >= 200 && code <= 300) return body;
        let error = undefined;
        this.last_http_response = body;
        let details = body;
        let match = body.match(/\<title\>([^<]+)/i);
        if (match) details = match[1].trim();
        if ([418, 429].includes(code)) {
            error = DDoSProtection;
        } else if ([404, 409, 422, 500, 501, 502, 520, 521, 522, 525].includes(code)) {
            error = ExchangeNotAvailable;
        } else if ([400, 403, 405, 503, 530].includes(code)) {
            let ddosProtection = body.match(/cloudflare|incapsula/i);
            if (ddosProtection) {
                error = DDoSProtection;
            } else {
                error = ExchangeNotAvailable;
                details += ' (possible reasons: ' + ['invalid API keys', 'bad or old nonce', 'exchange is down or offline', 'on maintenance', 'DDoS protection', 'rate-limiting'].join(', ') + ')';
            }
        } else if ([408, 504].includes(code)) {
            error = RequestTimeout;
        } else if ([401, 511].includes(code)) {
            error = AuthenticationError;
        } else {
            error = ExchangeError;
        }
        throw new error([this.id, method, url, code, reason, details].join(' '));
    }

    handleRestErrors(response, url, method = 'GET', headers = undefined, body = undefined) {

        if (typeof response == 'string') return response;

        return response.text().then(text => {

            const args = [response.status, response.statusText, url, method, headers, text];

            this.handleErrors(...args);
            return this.defaultErrorHandler(...args);
        });
    }

    handleRestResponse(response, url, method = 'GET', headers = undefined, body = undefined) {

        try {

            this.last_http_response = response;
            if (this.parseJsonResponse) {
                this.last_json_response = typeof response == 'string' && response.length > 1 ? JSON.parse(response) : response;
                return this.last_json_response;
            }

            return response;
        } catch (e) {

            let maintenance = response.match(/offline|busy|retry|wait|unavailable|maintain|maintenance|maintenancing/i);
            let ddosProtection = response.match(/cloudflare|incapsula|overload/i);

            if (e instanceof SyntaxError) {

                let error = ExchangeNotAvailable;
                let details = 'not accessible from this location at the moment';
                if (maintenance) details = 'offline, on maintenance or unreachable from this location at the moment';
                if (ddosProtection) error = DDoSProtection;
                throw new error([this.id, method, url, details].join(' '));
            }

            if (this.verbose) console.log(this.id, method, url, 'error', e, "response body:\n'" + response + "'");

            throw e;
        }
    }

    setMarkets(markets, currencies = undefined) {
        let values = Object.values(markets).map(market => deepExtend({
            'limits': this.limits,
            'precision': this.precision
        }, this.fees['trading'], market));
        this.markets = deepExtend(this.markets, indexBy(values, 'symbol'));
        this.marketsById = indexBy(markets, 'id');
        this.markets_by_id = this.marketsById;
        this.symbols = Object.keys(this.markets).sort();
        this.ids = Object.keys(this.markets_by_id).sort();
        if (currencies) {
            this.currencies = deepExtend(currencies, this.currencies);
        } else {
            const baseCurrencies = values.filter(market => 'base' in market).map(market => ({
                id: market.baseId || market.base,
                code: market.base,
                precision: market.precision ? market.precision.base || market.precision.amount : 8
            }));
            const quoteCurrencies = values.filter(market => 'quote' in market).map(market => ({
                id: market.quoteId || market.quote,
                code: market.quote,
                precision: market.precision ? market.precision.quote || market.precision.price : 8
            }));
            const allCurrencies = baseCurrencies.concat(quoteCurrencies);
            const groupedCurrencies = groupBy(allCurrencies, 'code');
            const currencies = Object.keys(groupedCurrencies).map(code => groupedCurrencies[code].reduce((previous, current) => previous.precision > current.precision ? previous : current, groupedCurrencies[code][0]));
            const sortedCurrencies = sortBy(flatten(currencies), 'code');
            this.currencies = deepExtend(indexBy(sortedCurrencies, 'code'), this.currencies);
        }
        return this.markets;
    }

    loadMarkets(reload = false) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            if (!reload && _this3.markets) {
                if (!_this3.marketsById) {
                    return _this3.setMarkets(_this3.markets);
                }
                return _this3.markets;
            }
            const markets = yield _this3.fetchMarkets();
            let currencies = undefined;
            if (_this3.has.fetchCurrencies) {
                currencies = yield _this3.fetchCurrencies();
            }
            return _this3.setMarkets(markets, currencies);
        })();
    }

    fetchTickers(symbols = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchTickers not supported yet');
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchOrder not supported yet');
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchOrders not supported yet');
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchOpenOrders not supported yet');
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchClosedOrders not supported yet');
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        throw new NotSupported(this.id + ' fetchMyTrades not supported yet');
    }

    fetchCurrencies() {
        throw new NotSupported(this.id + ' fetchCurrencies not supported yet');
    }

    fetchMarkets() {
        return new Promise((resolve, reject) => resolve(this.markets));
    }

    fetchOrderStatus(id, market = undefined) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let order = yield _this4.fetchOrder(id);
            return order['status'];
        })();
    }

    account() {
        return {
            'free': 0.0,
            'used': 0.0,
            'total': 0.0
        };
    }

    commonCurrencyCode(currency) {
        if (!this.substituteCommonCurrencyCodes) return currency;
        if (currency == 'XBT') return 'BTC';
        if (currency == 'BCC') return 'BCH';
        if (currency == 'DRK') return 'DASH';
        return currency;
    }

    currency(code) {

        if (typeof this.currencies == 'undefined') return new ExchangeError(this.id + ' currencies not loaded');

        if (typeof code === 'string' && code in this.currencies) return this.currencies[code];

        throw new ExchangeError(this.id + ' does not have currency code ' + code);
    }

    market(symbol) {

        if (typeof this.markets == 'undefined') return new ExchangeError(this.id + ' markets not loaded');

        if (typeof symbol === 'string' && symbol in this.markets) return this.markets[symbol];

        throw new ExchangeError(this.id + ' does not have market symbol ' + symbol);
    }

    marketId(symbol) {
        return this.market(symbol).id || symbol;
    }

    marketIds(symbols) {
        return symbols.map(symbol => this.marketId(symbol));
    }

    symbol(symbol) {
        return this.market(symbol).symbol || symbol;
    }

    extractParams(string) {
        let re = /{([a-zA-Z0-9_]+?)}/g;
        let matches = [];
        let match;
        while (match = re.exec(string)) matches.push(match[1]);
        return matches;
    }

    implodeParams(string, params) {
        for (let property in params) string = string.replace('{' + property + '}', params[property]);
        return string;
    }

    url(path, params = {}) {
        let result = this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (Object.keys(query).length) result += '?' + this.urlencode(query);
        return result;
    }

    parseBidAsk(bidask, priceKey = 0, amountKey = 1) {
        let price = parseFloat(bidask[priceKey]);
        let amount = parseFloat(bidask[amountKey]);
        return [price, amount];
    }

    parseBidsAsks(bidasks, priceKey = 0, amountKey = 1) {
        return Object.values(bidasks || []).map(bidask => this.parseBidAsk(bidask, priceKey, amountKey));
    }

    fetchL2OrderBook(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this5.fetchOrderBook(symbol, params);
            return extend(orderbook, {
                'bids': sortBy(aggregate(orderbook.bids), 0, true),
                'asks': sortBy(aggregate(orderbook.asks), 0)
            });
        })();
    }

    parseOrderBook(orderbook, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 0, amountKey = 1) {
        timestamp = timestamp || this.milliseconds();
        return {
            'bids': bidsKey in orderbook ? this.parseBidsAsks(orderbook[bidsKey], priceKey, amountKey) : [],
            'asks': asksKey in orderbook ? this.parseBidsAsks(orderbook[asksKey], priceKey, amountKey) : [],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp)
        };
    }

    getCurrencyUsedOnOpenOrders(currency) {
        return Object.values(this.orders).filter(order => order['status'] == 'open').reduce((total, order) => {
            let symbol = order['symbol'];
            let market = this.markets[symbol];
            let amount = order['remaining'];
            if (currency == market['base'] && order['side'] == 'sell') {
                return total + amount;
            } else if (currency == market['quote'] && order['side'] == 'buy') {
                return total + (order['cost'] || order['price'] * amount);
            } else {
                return total;
            }
        }, 0);
    }

    parseBalance(balance) {

        const currencies = Object.keys(this.omit(balance, 'info'));

        currencies.forEach(currency => {

            if (typeof balance[currency].used == 'undefined') {

                if (this.parseBalanceFromOpenOrders && 'open_orders' in balance['info']) {
                    const exchangeOrdersCount = balance['info']['open_orders'];
                    const cachedOrdersCount = Object.values(this.orders).filter(order => order['status'] == 'open').length;
                    if (cachedOrdersCount == exchangeOrdersCount) {
                        balance[currency].used = this.getCurrencyUsedOnOpenOrders(currency);
                        balance[currency].total = balance[currency].used + balance[currency].free;
                    }
                } else {
                    balance[currency].used = this.getCurrencyUsedOnOpenOrders(currency);
                    balance[currency].total = balance[currency].used + balance[currency].free;
                }
            }

            ['free', 'used', 'total'].forEach(account => {
                balance[account] = balance[account] || {};
                balance[account][currency] = balance[currency][account];
            });
        });
        return balance;
    }

    fetchPartialBalance(part, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let balance = yield _this6.fetchBalance(params);
            return balance[part];
        })();
    }

    fetchFreeBalance(params = {}) {
        return this.fetchPartialBalance('free', params);
    }

    fetchUsedBalance(params = {}) {
        return this.fetchPartialBalance('used', params);
    }

    fetchTotalBalance(params = {}) {
        return this.fetchPartialBalance('total', params);
    }

    filterBySinceLimit(array, since = undefined, limit = undefined) {
        if (since) array = array.filter(entry => entry.timestamp > since);
        if (limit) array = array.slice(0, limit);
        return array;
    }

    parseTrades(trades, market = undefined, since = undefined, limit = undefined) {
        let result = Object.values(trades).map(trade => this.parseTrade(trade, market));
        result = sortBy(result, 'timestamp', true);
        return this.filterBySinceLimit(result, since, limit);
    }

    parseOrders(orders, market = undefined, since = undefined, limit = undefined) {
        let result = Object.values(orders).map(order => this.parseOrder(order, market));
        return this.filterBySinceLimit(result, since, limit);
    }

    filterOrdersBySymbol(orders, symbol = undefined) {
        let grouped = this.groupBy(orders, 'symbol');
        if (symbol) {
            if (symbol in grouped) return grouped[symbol];
            return [];
        }
        return orders;
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return ohlcv;
    }

    parseOHLCVs(ohlcvs, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        ohlcvs = Object.values(ohlcvs);
        let result = [];
        for (let i = 0; i < ohlcvs.length; i++) {
            if (limit && result.length >= limit) break;
            let ohlcv = this.parseOHLCV(ohlcvs[i], market, timeframe, since, limit);
            if (since && ohlcv[0] < since) continue;
            result.push(ohlcv);
        }
        return result;
    }

    editLimitBuyOrder(id, symbol, ...args) {
        return this.editLimitOrder(id, symbol, 'buy', ...args);
    }

    editLimitSellOrder(id, symbol, ...args) {
        return this.editLimitOrder(id, symbol, 'sell', ...args);
    }

    editLimitOrder(id, symbol, ...args) {
        return this.editOrder(id, symbol, 'limit', ...args);
    }

    editOrder(id, symbol, ...args) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            if (!_this7.enableRateLimit) throw new ExchangeError(_this7.id + ' editOrder() requires enableRateLimit = true');
            yield _this7.cancelOrder(id, symbol);
            return _this7.createOrder(symbol, ...args);
        })();
    }

    createLimitBuyOrder(symbol, ...args) {
        return this.createOrder(symbol, 'limit', 'buy', ...args);
    }

    createLimitSellOrder(symbol, ...args) {
        return this.createOrder(symbol, 'limit', 'sell', ...args);
    }

    createMarketBuyOrder(symbol, amount, params = {}) {
        return this.createOrder(symbol, 'market', 'buy', amount, undefined, params);
    }

    createMarketSellOrder(symbol, amount, params = {}) {
        return this.createOrder(symbol, 'market', 'sell', amount, undefined, params);
    }

    costToPrecision(symbol, cost) {
        return parseFloat(cost).toFixed(this.markets[symbol].precision.price);
    }

    priceToPrecision(symbol, price) {
        return parseFloat(price).toFixed(this.markets[symbol].precision.price);
    }

    amountToPrecision(symbol, amount) {
        return this.truncate(amount, this.markets[symbol].precision.amount);
    }

    amountToLots(symbol, amount) {
        return this.amountToPrecision(symbol, Math.floor(amount / this.markets[symbol].lot) * this.markets[symbol].lot);
    }

    feeToPrecision(symbol, fee) {
        return parseFloat(fee).toFixed(this.markets[symbol].precision.price);
    }

    calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {
        let market = this.markets[symbol];
        let rate = market[takerOrMaker];
        let cost = parseFloat(this.costToPrecision(symbol, amount * price));
        return {
            'type': takerOrMaker,
            'currency': market['quote'],
            'rate': rate,
            'cost': parseFloat(this.feeToPrecision(symbol, rate * cost))
        };
    }

    Ymd(timestamp, infix = ' ') {
        let date = new Date(timestamp);
        let Y = date.getUTCFullYear();
        let m = date.getUTCMonth() + 1;
        let d = date.getUTCDate();
        m = m < 10 ? '0' + m : m;
        d = d < 10 ? '0' + d : d;
        return Y + '-' + m + '-' + d;
    }

    YmdHMS(timestamp, infix = ' ') {
        let date = new Date(timestamp);
        let Y = date.getUTCFullYear();
        let m = date.getUTCMonth() + 1;
        let d = date.getUTCDate();
        let H = date.getUTCHours();
        let M = date.getUTCMinutes();
        let S = date.getUTCSeconds();
        m = m < 10 ? '0' + m : m;
        d = d < 10 ? '0' + d : d;
        H = H < 10 ? '0' + H : H;
        M = M < 10 ? '0' + M : M;
        S = S < 10 ? '0' + S : S;
        return Y + '-' + m + '-' + d + infix + H + ':' + M + ':' + S;
    }
};
}).call(this,require('_process'))

},{"./Market":9,"./errors":10,"./functions":11,"./throttle":12,"_process":137,"fetch-ponyfill":136}],9:[function(require,module,exports){
"use strict";

module.exports = class Market {

    constructor(exchange, symbol) {
        this.exchange = exchange;
        this.symbol = symbol;
        this.market = exchange.markets[symbol];
    }

    amountToPrecision(amount) {
        return this.exchange.amountToPrecision(this.symbol, amount);
    }

    createLimitBuyOrder(amount, price) {
        return this.exchange.createLimitBuyOrder(this.symbol, amount, price);
    }

    createLimitSellOrder(amount, price) {
        return this.exchange.createLimitSellOrder(this.symbol, amount, price);
    }
};
},{}],10:[function(require,module,exports){
class BaseError extends Error {
    constructor(message) {
        super(message);
        // a workaround to make `instanceof BaseError` work in ES5
        this.constructor = BaseError;
        this.__proto__ = BaseError.prototype;
        this.message = message;
    }
}

class ExchangeError extends BaseError {
    constructor(message) {
        super(message);
        this.constructor = ExchangeError;
        this.__proto__ = ExchangeError.prototype;
        this.message = message;
    }
}

class NotSupported extends ExchangeError {
    constructor(message) {
        super(message);
        this.constructor = NotSupported;
        this.__proto__ = NotSupported.prototype;
        this.message = message;
    }
}

class AuthenticationError extends ExchangeError {
    constructor(message) {
        super(message);
        this.constructor = AuthenticationError;
        this.__proto__ = AuthenticationError.prototype;
        this.message = message;
    }
}

class InvalidNonce extends ExchangeError {
    constructor(message) {
        super(message);
        this.constructor = InvalidNonce;
        this.__proto__ = InvalidNonce.prototype;
        this.message = message;
    }
}

class InsufficientFunds extends ExchangeError {
    constructor(message) {
        super(message);
        this.constructor = InsufficientFunds;
        this.__proto__ = InsufficientFunds.prototype;
        this.message = message;
    }
}

class InvalidOrder extends ExchangeError {
    constructor(message) {
        super(message);
        this.constructor = InvalidOrder;
        this.__proto__ = InvalidOrder.prototype;
        this.message = message;
    }
}

class OrderNotFound extends InvalidOrder {
    constructor(message) {
        super(message);
        this.constructor = OrderNotFound;
        this.__proto__ = OrderNotFound.prototype;
        this.message = message;
    }
}

class OrderNotCached extends InvalidOrder {
    constructor(message) {
        super(message);
        this.constructor = OrderNotCached;
        this.__proto__ = OrderNotCached.prototype;
        this.message = message;
    }
}

class CancelPending extends InvalidOrder {
    constructor(message) {
        super(message);
        this.constructor = CancelPending;
        this.__proto__ = CancelPending.prototype;
        this.message = message;
    }
}

class NetworkError extends BaseError {
    constructor(message) {
        super(message);
        this.constructor = NetworkError;
        this.__proto__ = NetworkError.prototype;
        this.message = message;
    }
}

class DDoSProtection extends NetworkError {
    constructor(message) {
        super(message);
        this.constructor = DDoSProtection;
        this.__proto__ = DDoSProtection.prototype;
        this.message = message;
    }
}

class RequestTimeout extends NetworkError {
    constructor(message) {
        super(message);
        this.constructor = RequestTimeout;
        this.__proto__ = RequestTimeout.prototype;
        this.message = message;
    }
}

class ExchangeNotAvailable extends NetworkError {
    constructor(message) {
        super(message);
        this.constructor = ExchangeNotAvailable;
        this.__proto__ = ExchangeNotAvailable.prototype;
        this.message = message;
    }
}

module.exports = {

    BaseError,
    ExchangeError,
    NotSupported,
    AuthenticationError,
    InvalidNonce,
    InsufficientFunds,
    InvalidOrder,
    OrderNotFound,
    OrderNotCached,
    CancelPending,
    NetworkError,
    DDoSProtection,
    RequestTimeout,
    ExchangeNotAvailable
};
},{}],11:[function(require,module,exports){
"use strict";

//-----------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const CryptoJS = require('crypto-js'),
      qs = require('qs'); // querystring

//-----------------------------------------------------------------------------

const { RequestTimeout } = require('./errors');

//-----------------------------------------------------------------------------
// utility helpers

const setTimeout_original = setTimeout;

// setTimeout can fire earlier than specified, so we need to ensure it does not happen...

const setTimeout_safe = (done, ms, setTimeout = setTimeout_original /* overrideable for mocking purposes */, targetTime = Date.now() + ms) => {

    let clearInnerTimeout = () => {};
    let active = true;

    let id = setTimeout(() => {
        active = true;
        const rest = targetTime - Date.now();
        if (rest > 0) {
            clearInnerTimeout = setTimeout_safe(done, rest, setTimeout, targetTime); // try sleep more
        } else {
            done();
        }
    }, ms);

    return function clear() {
        if (active) {
            active = false; // dunno if IDs are unique on various platforms, so it's better to rely on this flag to exclude the possible cancellation of the wrong timer (if called after completion)
            clearTimeout(id);
        }
        clearInnerTimeout();
    };
};

const sleep = ms => new Promise(resolve => setTimeout_safe(resolve, ms));

const decimal = float => parseFloat(float).toString();

const timeout = (() => {
    var _ref = _asyncToGenerator(function* (ms, promise) {

        let clear = function () {};
        const timeout = new Promise(function (resolve) {
            return clear = setTimeout_safe(resolve, ms);
        });

        try {
            return yield Promise.race([promise, timeout.then(function () {
                throw new RequestTimeout('request timed out');
            })]);
        } finally {
            clear(); // fixes https://github.com/ccxt/ccxt/issues/749
        }
    });

    return function timeout(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

const capitalize = string => string.length ? string.charAt(0).toUpperCase() + string.slice(1) : string;

const keysort = object => {
    const result = {};
    Object.keys(object).sort().forEach(key => result[key] = object[key]);
    return result;
};

const extend = (...args) => Object.assign({}, ...args);

const deepExtend = function (...args) {

    // if (args.length < 1)
    //     return args
    // else if (args.length < 2)
    //     return args[0]

    let result = undefined;

    for (const arg of args) {

        if (arg && typeof arg == 'object' && (arg.constructor === Object || !('constructor' in arg))) {

            if (typeof result != 'object') {
                result = {};
            }

            for (const key in arg) {
                result[key] = deepExtend(result[key], arg[key]);
            }
        } else {

            result = arg;
        }
    }

    return result;
};

const omit = (object, ...args) => {
    const result = extend(object);
    for (const x of args) {
        if (typeof x === 'string') {
            delete result[x];
        } else if (Array.isArray(x)) {
            for (const k of x) delete result[k];
        }
    }
    return result;
};

const groupBy = (array, key) => {
    const result = {};
    Object.values(array).filter(entry => entry[key] != 'undefined').forEach(entry => {
        if (typeof result[entry[key]] == 'undefined') result[entry[key]] = [];
        result[entry[key]].push(entry);
    });
    return result;
};

const filterBy = (array, key, value = undefined) => {
    if (value) {
        let grouped = groupBy(array, key);
        if (value in grouped) return grouped[value];
        return [];
    }
    return array;
};

const indexBy = (array, key) => {
    const result = {};
    Object.values(array).filter(entry => entry[key] != 'undefined').forEach(entry => {
        result[entry[key]] = entry;
    });
    return result;
};

const sortBy = (array, key, descending = false) => {
    descending = descending ? -1 : 1;
    return array.sort((a, b) => a[key] < b[key] ? -descending : a[key] > b[key] ? descending : 0);
};

const flatten = (array, result = []) => {
    for (let i = 0, length = array.length; i < length; i++) {
        const value = array[i];
        if (Array.isArray(value)) {
            flatten(value, result);
        } else {
            result.push(value);
        }
    }
    return result;
};

const unique = array => array.filter((value, index, self) => self.indexOf(value) == index);

const pluck = (array, key) => array.filter(element => typeof element[key] != 'undefined').map(element => element[key]);

const urlencode = object => qs.stringify(object);
const rawencode = object => qs.stringify(object, { encode: false });

const sum = (...args) => {
    const result = args.filter(arg => typeof arg != 'undefined');
    return result.length > 0 ? result.reduce((sum, value) => sum + value, 0) : undefined;
};

const safeFloat = (object, key, defaultValue = undefined) => {
    if (key in object) {
        if (typeof object[key] == 'number') return object[key];else if (typeof object[key] == 'string' && object[key]) return parseFloat(object[key]);
    }
    return defaultValue;
};

const safeString = (object, key, defaultValue = undefined) => {
    return object && key in object && object[key] ? object[key].toString() : defaultValue;
};

const safeInteger = (object, key, defaultValue = undefined) => {
    return key in object && object[key] ? parseInt(object[key]) : defaultValue;
};

const safeValue = (object, key, defaultValue = undefined) => {
    return key in object && object[key] ? object[key] : defaultValue;
};

const uuid = a => a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);

// See https://stackoverflow.com/questions/1685680/how-to-avoid-scientific-notation-for-large-numbers-in-javascript for discussion

function toFixed(x) {
    // avoid scientific notation for too large and too small numbers

    if (Math.abs(x) < 1.0) {
        const e = parseInt(x.toString().split('e-')[1]);
        if (e) {
            x *= Math.pow(10, e - 1);
            x = '0.' + new Array(e).join('0') + x.toString().substring(2);
        }
    } else {
        let e = parseInt(x.toString().split('+')[1]);
        if (e > 20) {
            e -= 20;
            x /= Math.pow(10, e);
            x += new Array(e + 1).join('0');
        }
    }
    return x;
}

// See https://stackoverflow.com/questions/4912788/truncate-not-round-off-decimal-numbers-in-javascript for discussion

// > So, after all it turned out, rounding bugs will always haunt you, no matter how hard you try to compensate them.
// > Hence the problem should be attacked by representing numbers exactly in decimal notation.

const truncate_regExpCache = [],
      truncate = (num, precision = 0) => {
    num = toFixed(num);
    const re = truncate_regExpCache[precision] || (truncate_regExpCache[precision] = new RegExp("([-]*\\d+\\.\\d{" + precision + "})(\\d)"));
    const [, result] = num.toString().match(re) || [null, num];
    return parseFloat(result);
};

const precisionFromString = string => {
    const split = string.replace(/0+$/g, '').split('.');
    return split.length > 1 ? split[1].length : 0;
};

const ordered = x => x; // a stub to keep assoc keys in order, in JS it does nothing, it's mostly for Python

const aggregate = function (bidasks) {

    let result = {};

    bidasks.forEach(([price, volume]) => {
        if (volume > 0) result[price] = (result[price] || 0) + volume;
    });

    return Object.keys(result).map(price => [parseFloat(price), parseFloat(result[price])]);
};

//-----------------------------------------------------------------------------
// string ←→ binary ←→ base64 conversion routines

const stringToBinary = str => {
    const arr = new Uint8Array(str.length);
    for (let i = 0; i < str.length; i++) {
        arr[i] = str.charCodeAt(i);
    }
    return CryptoJS.lib.WordArray.create(arr);
};

const stringToBase64 = string => CryptoJS.enc.Latin1.parse(string).toString(CryptoJS.enc.Base64),
      utf16ToBase64 = string => CryptoJS.enc.Utf16.parse(string).toString(CryptoJS.enc.Base64),
      base64ToBinary = string => CryptoJS.enc.Base64.parse(string),
      base64ToString = string => CryptoJS.enc.Base64.parse(string).toString(CryptoJS.enc.Utf8),
      binaryToString = string => string;

const binaryConcat = (...args) => args.reduce((a, b) => a.concat(b));

// url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores
const urlencodeBase64 = base64string => base64string.replace(/[=]+$/, '').replace(/\+/g, '-').replace(/\//g, '_');

//-----------------------------------------------------------------------------
// cryptography

const hash = (request, hash = 'md5', digest = 'hex') => {
    const result = CryptoJS[hash.toUpperCase()](request);
    return digest == 'binary' ? result : result.toString(CryptoJS.enc[capitalize(digest)]);
};

const hmac = (request, secret, hash = 'sha256', digest = 'hex') => {
    const encoding = digest == 'binary' ? 'Latin1' : capitalize(digest);
    return CryptoJS['Hmac' + hash.toUpperCase()](request, secret).toString(CryptoJS.enc[capitalize(encoding)]);
};

//-----------------------------------------------------------------------------
// a JSON Web Token authentication method

const jwt = (request, secret, alg = 'HS256', hash = 'sha256') => {
    const encodedHeader = urlencodeBase64(stringToBase64(JSON.stringify({ 'alg': alg, 'typ': 'JWT' }))),
          encodedData = urlencodeBase64(stringToBase64(JSON.stringify(request))),
          token = [encodedHeader, encodedData].join('.'),
          signature = urlencodeBase64(utf16ToBase64(hmac(token, secret, hash, 'utf16')));
    return [token, signature].join('.');
};

//-----------------------------------------------------------------------------

module.exports = {

    setTimeout_safe,

    // common utility functions

    sleep,
    timeout,
    capitalize,
    keysort,
    extend,
    deepExtend,
    omit,
    groupBy,
    indexBy,
    sortBy,
    filterBy,
    flatten,
    unique,
    pluck,
    urlencode,
    rawencode,
    sum,
    decimal,
    safeFloat,
    safeString,
    safeInteger,
    safeValue,
    ordered,
    aggregate,
    truncate,
    uuid,
    precisionFromString,

    // underscore aliases

    index_by: indexBy,
    sort_by: sortBy,
    group_by: groupBy,
    filter_by: filterBy,
    safe_float: safeFloat,
    safe_string: safeString,
    safe_integer: safeInteger,
    safe_value: safeValue,

    // crypto functions

    binaryConcat,
    stringToBinary,
    binaryToString,
    stringToBase64,
    utf16ToBase64,
    base64ToBinary,
    base64ToString,
    urlencodeBase64,
    hash,
    hmac,
    jwt,

    // json
    json: JSON.stringify,
    unjson: JSON.parse
};
},{"./errors":10,"crypto-js":110,"qs":139}],12:[function(require,module,exports){
"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { sleep } = require('./functions');

const throttle = cfg => {

    let lastTimestamp = Date.now(),
        numTokens = typeof cfg.numTokens != 'undefined' ? cfg.numTokens : cfg.capacity,
        queue = [],
        running = false,
        counter = 0;

    return Object.assign(cost => {

        if (queue.length > cfg.maxCapacity) throw new Error('Backlog is over max capacity of ' + cfg.maxCapacity);

        return new Promise((() => {
            var _ref = _asyncToGenerator(function* (resolve, reject) {

                try {

                    queue.push({ cost, resolve, reject });

                    if (!running) {
                        running = true;
                        while (queue.length > 0) {
                            const hasEnoughTokens = cfg.capacity ? numTokens > 0 : numTokens >= 0;
                            if (hasEnoughTokens) {
                                if (queue.length > 0) {
                                    let { cost, resolve, reject } = queue[0];
                                    cost = cost || cfg.defaultCost;
                                    if (numTokens >= Math.min(cost, cfg.capacity)) {
                                        numTokens -= cost;
                                        queue.shift();
                                        resolve();
                                    }
                                }
                            }
                            let now = Date.now();
                            let elapsed = now - lastTimestamp;
                            lastTimestamp = now;
                            numTokens = Math.min(cfg.capacity, numTokens + elapsed * cfg.refillRate);
                            yield sleep(cfg.delay);
                        }
                        running = false;
                    }
                } catch (e) {

                    reject(e);
                }
            });

            return function (_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })());
    }, cfg, {
        configure: newCfg => throttle(Object.assign({}, cfg, newCfg))
    });
};

module.exports = throttle;
},{"./functions":11}],13:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, InsufficientFunds, OrderNotFound, InvalidOrder, DDoSProtection } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class binance extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'binance',
            'name': 'Binance',
            'countries': 'CN', // China
            'rateLimit': 500,
            'hasCORS': false,
            // obsolete metainfo interface
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'hasFetchMyTrades': true,
            'hasFetchOrder': true,
            'hasFetchOrders': true,
            'hasFetchOpenOrders': true,
            'hasWithdraw': true,
            // new metainfo interface
            'has': {
                'fetchTickers': true,
                'fetchOHLCV': true,
                'fetchMyTrades': true,
                'fetchOrder': true,
                'fetchOrders': true,
                'fetchOpenOrders': true,
                'withdraw': true
            },
            'timeframes': {
                '1m': '1m',
                '3m': '3m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '2h': '2h',
                '4h': '4h',
                '6h': '6h',
                '8h': '8h',
                '12h': '12h',
                '1d': '1d',
                '3d': '3d',
                '1w': '1w',
                '1M': '1M'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',
                'api': {
                    'web': 'https://www.binance.com',
                    'wapi': 'https://api.binance.com/wapi/v3',
                    'public': 'https://api.binance.com/api/v1',
                    'private': 'https://api.binance.com/api/v3'
                },
                'www': 'https://www.binance.com',
                'doc': 'https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md',
                'fees': ['https://binance.zendesk.com/hc/en-us/articles/115000429332', 'https://support.binance.com/hc/en-us/articles/115000583311']
            },
            'api': {
                'web': {
                    'get': ['exchange/public/product']
                },
                'wapi': {
                    'post': ['withdraw'],
                    'get': ['depositHistory', 'withdrawHistory', 'depositAddress']
                },
                'public': {
                    'get': ['exchangeInfo', 'ping', 'time', 'depth', 'aggTrades', 'klines', 'ticker/24hr', 'ticker/allPrices', 'ticker/allBookTickers']
                },
                'private': {
                    'get': ['order', 'openOrders', 'allOrders', 'account', 'myTrades'],
                    'post': ['order', 'order/test', 'userDataStream'],
                    'put': ['userDataStream'],
                    'delete': ['order', 'userDataStream']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'taker': 0.001,
                    'maker': 0.001
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BNB': 1.0,
                        'BTC': 0.0005,
                        'ETH': 0.005,
                        'LTC': 0.001,
                        'NEO': 0.0,
                        'QTUM': 0.01,
                        'SNT': 50.0,
                        'BNT': 0.6,
                        'EOS': 2.0,
                        'BCH': 0.0005,
                        'GAS': 0.0,
                        'USDT': 5.0,
                        'OAX': 2.0,
                        'DNT': 30.0,
                        'MCO': 0.15,
                        'ICN': 0.5,
                        'WTC': 0.2,
                        'OMG': 0.1,
                        'ZRX': 5.0,
                        'STRAT': 0.1,
                        'SNGLS': 8.0,
                        'BQX': 2.0,
                        'KNC': 1.0,
                        'FUN': 50.0,
                        'SNM': 10.0,
                        'LINK': 5.0,
                        'XVG': 0.1,
                        'CTR': 1.0,
                        'SALT': 0.3,
                        'IOTA': 0.0,
                        'MDA': 0.5,
                        'MTL': 0.15,
                        'SUB': 10.0,
                        'ETC': 0.01,
                        'MTH': 10.0,
                        'ENG': 2.0,
                        'AST': 4.0,
                        'BTG': undefined,
                        'DASH': 0.002,
                        'EVX': 1.0,
                        'REQ': 30.0,
                        'LRC': 7.0,
                        'VIB': 7.0,
                        'HSR': 0.0001,
                        'TRX': 500.0,
                        'POWR': 15.0,
                        'ARK': 0.1,
                        'YOYO': 30.0,
                        'XRP': 0.15,
                        'MOD': 1.0,
                        'ENJ': 1.0,
                        'STORJ': 2.0
                    },
                    'deposit': {
                        'BNB': 0,
                        'BTC': 0,
                        'ETH': 0,
                        'LTC': 0,
                        'NEO': 0,
                        'QTUM': 0,
                        'SNT': 0,
                        'BNT': 0,
                        'EOS': 0,
                        'BCH': 0,
                        'GAS': 0,
                        'USDT': 0,
                        'OAX': 0,
                        'DNT': 0,
                        'MCO': 0,
                        'ICN': 0,
                        'WTC': 0,
                        'OMG': 0,
                        'ZRX': 0,
                        'STRAT': 0,
                        'SNGLS': 0,
                        'BQX': 0,
                        'KNC': 0,
                        'FUN': 0,
                        'SNM': 0,
                        'LINK': 0,
                        'XVG': 0,
                        'CTR': 0,
                        'SALT': 0,
                        'IOTA': 0,
                        'MDA': 0,
                        'MTL': 0,
                        'SUB': 0,
                        'ETC': 0,
                        'MTH': 0,
                        'ENG': 0,
                        'AST': 0,
                        'BTG': 0,
                        'DASH': 0,
                        'EVX': 0,
                        'REQ': 0,
                        'LRC': 0,
                        'VIB': 0,
                        'HSR': 0,
                        'TRX': 0,
                        'POWR': 0,
                        'ARK': 0,
                        'YOYO': 0,
                        'XRP': 0,
                        'MOD': 0,
                        'ENJ': 0,
                        'STORJ': 0
                    }
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.publicGetExchangeInfo();
            let markets = response['symbols'];
            let result = [];
            for (let i = 0; i < markets.length; i++) {
                let market = markets[i];
                let id = market['symbol'];
                let base = _this.commonCurrencyCode(market['baseAsset']);
                let quote = _this.commonCurrencyCode(market['quoteAsset']);
                let symbol = base + '/' + quote;
                let filters = _this.indexBy(market['filters'], 'filterType');
                let precision = {
                    'base': market['baseAssetPrecision'],
                    'quote': market['quotePrecision'],
                    'amount': market['baseAssetPrecision'],
                    'price': market['quotePrecision']
                };
                let active = market['status'] == 'TRADING';
                let lot = -1 * Math.log10(precision['amount']);
                let entry = _this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market,
                    'lot': lot,
                    'active': active,
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': lot,
                            'max': undefined
                        },
                        'price': {
                            'min': -1 * Math.log10(precision['price']),
                            'max': undefined
                        },
                        'cost': {
                            'min': lot,
                            'max': undefined
                        }
                    }
                });
                if ('PRICE_FILTER' in filters) {
                    let filter = filters['PRICE_FILTER'];
                    entry['precision']['price'] = _this.precisionFromString(filter['tickSize']);
                    entry['limits']['price'] = {
                        'min': parseFloat(filter['minPrice']),
                        'max': parseFloat(filter['maxPrice'])
                    };
                }
                if ('LOT_SIZE' in filters) {
                    let filter = filters['LOT_SIZE'];
                    entry['precision']['amount'] = _this.precisionFromString(filter['stepSize']);
                    entry['lot'] = parseFloat(filter['stepSize']);
                    entry['limits']['amount'] = {
                        'min': parseFloat(filter['minQty']),
                        'max': parseFloat(filter['maxQty'])
                    };
                }
                if ('MIN_NOTIONAL' in filters) {
                    entry['limits']['cost']['min'] = parseFloat(filters['MIN_NOTIONAL']['minNotional']);
                }
                result.push(entry);
            }
            return result;
        })();
    }

    calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {
        let market = this.markets[symbol];
        let key = 'quote';
        let rate = market[takerOrMaker];
        let cost = parseFloat(this.costToPrecision(symbol, amount * rate));
        if (side == 'sell') {
            cost *= price;
        } else {
            key = 'base';
        }
        return {
            'type': takerOrMaker,
            'currency': market[key],
            'rate': rate,
            'cost': parseFloat(this.feeToPrecision(symbol, cost))
        };
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetAccount(params);
            let result = { 'info': response };
            let balances = response['balances'];
            for (let i = 0; i < balances.length; i++) {
                let balance = balances[i];
                let asset = balance['asset'];
                let currency = _this2.commonCurrencyCode(asset);
                let account = {
                    'free': parseFloat(balance['free']),
                    'used': parseFloat(balance['locked']),
                    'total': 0.0
                };
                account['total'] = _this2.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let orderbook = yield _this3.publicGetDepth(_this3.extend({
                'symbol': market['id'],
                'limit': 100 // default = maximum = 100
            }, params));
            return _this3.parseOrderBook(orderbook);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.safeInteger(ticker, 'closeTime');
        if (typeof timestamp == 'undefined') timestamp = this.milliseconds();
        let symbol = ticker['symbol'];
        if (!market) {
            if (symbol in this.markets_by_id) {
                market = this.markets_by_id[symbol];
            }
        }
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'highPrice'),
            'low': this.safeFloat(ticker, 'lowPrice'),
            'bid': this.safeFloat(ticker, 'bidPrice'),
            'ask': this.safeFloat(ticker, 'askPrice'),
            'vwap': this.safeFloat(ticker, 'weightedAvgPrice'),
            'open': this.safeFloat(ticker, 'openPrice'),
            'close': this.safeFloat(ticker, 'prevClosePrice'),
            'first': undefined,
            'last': this.safeFloat(ticker, 'lastPrice'),
            'change': this.safeFloat(ticker, 'priceChangePercent'),
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'volume'),
            'quoteVolume': this.safeFloat(ticker, 'quoteVolume'),
            'info': ticker
        };
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTicker24hr(_this4.extend({
                'symbol': market['id']
            }, params));
            return _this4.parseTicker(response, market);
        })();
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let rawTickers = yield _this5.publicGetTicker24hr(params);
            let tickers = [];
            for (let i = 0; i < rawTickers.length; i++) {
                tickers.push(_this5.parseTicker(rawTickers[i]));
            }
            let tickersBySymbol = _this5.indexBy(tickers, 'symbol');
            // return all of them if no symbols were passed in the first argument
            if (!symbols) return tickersBySymbol;
            // otherwise filter by symbol
            let result = {};
            for (let i = 0; i < symbols.length; i++) {
                let symbol = symbols[i];
                if (symbol in tickersBySymbol) result[symbol] = tickersBySymbol[symbol];
            }
            return result;
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [ohlcv[0], parseFloat(ohlcv[1]), parseFloat(ohlcv[2]), parseFloat(ohlcv[3]), parseFloat(ohlcv[4]), parseFloat(ohlcv[5])];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let request = {
                'symbol': market['id'],
                'interval': _this6.timeframes[timeframe]
            };
            request['limit'] = limit ? limit : 500; // default == max == 500
            if (since) request['startTime'] = since;
            let response = yield _this6.publicGetKlines(_this6.extend(request, params));
            return _this6.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestampField = 'T' in trade ? 'T' : 'time';
        let timestamp = trade[timestampField];
        let priceField = 'p' in trade ? 'p' : 'price';
        let price = parseFloat(trade[priceField]);
        let amountField = 'q' in trade ? 'q' : 'qty';
        let amount = parseFloat(trade[amountField]);
        let idField = 'a' in trade ? 'a' : 'id';
        let id = trade[idField].toString();
        let side = undefined;
        let order = undefined;
        if ('orderId' in trade) order = trade['orderId'].toString();
        if ('m' in trade) {
            side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally
        } else {
            side = trade['isBuyer'] ? 'buy' : 'sell'; // this is a true side
        }
        let fee = undefined;
        if ('commission' in trade) {
            fee = {
                'cost': parseFloat(trade['commission']),
                'currency': this.commonCurrencyCode(trade['commissionAsset'])
            };
        }
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': id,
            'order': order,
            'type': undefined,
            'side': side,
            'price': price,
            'cost': price * amount,
            'amount': amount,
            'fee': fee
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let request = {
                'symbol': market['id']
            };
            if (since) {
                request['startTime'] = since;
                request['endTime'] = since + 86400000;
            }
            if (limit) request['limit'] = limit;
            // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.
            // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.
            // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.
            // 'limit': 500,     // default = maximum = 500
            let response = yield _this7.publicGetAggTrades(_this7.extend(request, params));
            return _this7.parseTrades(response, market, since, limit);
        })();
    }

    parseOrderStatus(status) {
        if (status == 'NEW') return 'open';
        if (status == 'PARTIALLY_FILLED') return 'open';
        if (status == 'FILLED') return 'closed';
        if (status == 'CANCELED') return 'canceled';
        return status.toLowerCase();
    }

    parseOrder(order, market = undefined) {
        let status = this.parseOrderStatus(order['status']);
        let symbol = undefined;
        if (market) {
            symbol = market['symbol'];
        } else {
            let id = order['symbol'];
            if (id in this.markets_by_id) {
                market = this.markets_by_id[id];
                symbol = market['symbol'];
            }
        }
        let timestamp = order['time'];
        let price = parseFloat(order['price']);
        let amount = parseFloat(order['origQty']);
        let filled = this.safeFloat(order, 'executedQty', 0.0);
        let remaining = Math.max(amount - filled, 0.0);
        let result = {
            'info': order,
            'id': order['orderId'].toString(),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': order['type'].toLowerCase(),
            'side': order['side'].toLowerCase(),
            'price': price,
            'amount': amount,
            'cost': price * amount,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': undefined
        };
        return result;
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let market = _this8.market(symbol);
            let order = {
                'symbol': market['id'],
                'quantity': _this8.amountToPrecision(symbol, amount),
                'type': type.toUpperCase(),
                'side': side.toUpperCase()
            };
            if (type == 'limit') {
                order = _this8.extend(order, {
                    'price': _this8.priceToPrecision(symbol, price),
                    'timeInForce': 'GTC' // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
                });
            }
            let response = yield _this8.privatePostOrder(_this8.extend(order, params));
            return {
                'info': response,
                'id': response['orderId'].toString()
            };
        })();
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this9.id + ' fetchOrder requires a symbol param');
            yield _this9.loadMarkets();
            let market = _this9.market(symbol);
            let response = yield _this9.privateGetOrder(_this9.extend({
                'symbol': market['id'],
                'orderId': parseInt(id)
            }, params));
            return _this9.parseOrder(response, market);
        })();
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this10.id + ' fetchOrders requires a symbol param');
            yield _this10.loadMarkets();
            let market = _this10.market(symbol);
            let request = {
                'symbol': market['id']
            };
            if (limit) request['limit'] = limit;
            let response = yield _this10.privateGetAllOrders(_this10.extend(request, params));
            return _this10.parseOrders(response, market, since, limit);
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this11.id + ' fetchOpenOrders requires a symbol param');
            yield _this11.loadMarkets();
            let market = _this11.market(symbol);
            let response = yield _this11.privateGetOpenOrders(_this11.extend({
                'symbol': market['id']
            }, params));
            return _this11.parseOrders(response, market, since, limit);
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this12.id + ' cancelOrder requires a symbol param');
            yield _this12.loadMarkets();
            let market = _this12.market(symbol);
            let response = undefined;
            try {
                response = yield _this12.privateDeleteOrder(_this12.extend({
                    'symbol': market['id'],
                    'orderId': parseInt(id)
                    // 'origClientOrderId': id,
                }, params));
            } catch (e) {
                if (_this12.last_http_response.indexOf('UNKNOWN_ORDER') >= 0) throw new OrderNotFound(_this12.id + ' cancelOrder() error: ' + _this12.last_http_response);
                throw e;
            }
            return response;
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this13.id + ' fetchMyTrades requires a symbol');
            yield _this13.loadMarkets();
            let market = _this13.market(symbol);
            let request = {
                'symbol': market['id']
            };
            if (limit) request['limit'] = limit;
            let response = yield _this13.privateGetMyTrades(_this13.extend(request, params));
            return _this13.parseTrades(response, market, since, limit);
        })();
    }

    commonCurrencyCode(currency) {
        if (currency == 'BCC') return 'BCH';
        return currency;
    }

    currencyId(currency) {
        if (currency == 'BCH') return 'BCC';
        return currency;
    }

    fetchDepositAddress(currency, params = {}) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this14.wapiGetDepositAddress(_this14.extend({
                'asset': _this14.currencyId(currency),
                'recvWindow': 10000000
            }, params));
            if ('success' in response) {
                if (response['success']) {
                    let address = _this14.safeString(response, 'address');
                    return {
                        'currency': currency,
                        'address': address,
                        'status': 'ok',
                        'info': response
                    };
                }
            }
            throw new ExchangeError(_this14.id + ' fetchDepositAddress failed: ' + _this14.last_http_response);
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this15.wapiPostWithdraw(_this15.extend({
                'asset': _this15.currencyId(currency),
                'address': address,
                'amount': parseFloat(amount),
                'recvWindow': 10000000
            }, params));
            return {
                'info': response,
                'id': undefined
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        url += '/' + path;
        if (api == 'wapi') url += '.html';
        if (api == 'private' || api == 'wapi') {
            this.checkRequiredCredentials();
            let nonce = this.milliseconds();
            let query = this.urlencode(this.extend({ 'timestamp': nonce }, params));
            let signature = this.hmac(this.encode(query), this.encode(this.secret));
            query += '&' + 'signature=' + signature;
            headers = {
                'X-MBX-APIKEY': this.apiKey
            };
            if (method == 'GET' || api == 'wapi') {
                url += '?' + query;
            } else {
                body = query;
                headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        } else {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code >= 400) {
            if (code == 418) throw new DDoSProtection(this.id + ' ' + code.toString() + ' ' + reason + ' ' + body);
            if (body.indexOf('MIN_NOTIONAL') >= 0) throw new InvalidOrder(this.id + ' order cost = amount * price should be > 0.001 BTC ' + body);
            if (body.indexOf('LOT_SIZE') >= 0) throw new InvalidOrder(this.id + ' order amount should be evenly divisible by lot size, use this.amountToLots (symbol, amount) ' + body);
            if (body.indexOf('PRICE_FILTER') >= 0) throw new InvalidOrder(this.id + ' order price exceeds allowed price precision or invalid, use this.priceToPrecision (symbol, amount) ' + body);
            if (body.indexOf('Order does not exist') >= 0) throw new OrderNotFound(this.id + ' ' + body);
        }
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this16 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this16.fetch2(path, api, method, params, headers, body);
            if ('code' in response) {
                if (response['code'] < 0) {
                    if (response['code'] == -2010) throw new InsufficientFunds(_this16.id + ' ' + _this16.json(response));
                    if (response['code'] == -2011) throw new OrderNotFound(_this16.id + ' ' + _this16.json(response));
                    throw new ExchangeError(_this16.id + ' ' + _this16.json(response));
                }
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],14:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');

//  ---------------------------------------------------------------------------

module.exports = class bit2c extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bit2c',
            'name': 'Bit2C',
            'countries': 'IL', // Israel
            'rateLimit': 3000,
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg',
                'api': 'https://www.bit2c.co.il',
                'www': 'https://www.bit2c.co.il',
                'doc': ['https://www.bit2c.co.il/home/api', 'https://github.com/OferE/bit2c']
            },
            'api': {
                'public': {
                    'get': ['Exchanges/{pair}/Ticker', 'Exchanges/{pair}/orderbook', 'Exchanges/{pair}/trades']
                },
                'private': {
                    'post': ['Account/Balance', 'Account/Balance/v2', 'Merchant/CreateCheckout', 'Order/AccountHistory', 'Order/AddCoinFundsRequest', 'Order/AddFund', 'Order/AddOrder', 'Order/AddOrderMarketPriceBuy', 'Order/AddOrderMarketPriceSell', 'Order/CancelOrder', 'Order/MyOrders', 'Payment/GetMyId', 'Payment/Send']
                }
            },
            'markets': {
                'BTC/NIS': { 'id': 'BtcNis', 'symbol': 'BTC/NIS', 'base': 'BTC', 'quote': 'NIS' },
                'BCH/NIS': { 'id': 'BchNis', 'symbol': 'BCH/NIS', 'base': 'BCH', 'quote': 'NIS' },
                'LTC/NIS': { 'id': 'LtcNis', 'symbol': 'LTC/NIS', 'base': 'LTC', 'quote': 'NIS' },
                'BTG/NIS': { 'id': 'BtgNis', 'symbol': 'BTG/NIS', 'base': 'BTG', 'quote': 'NIS' }
            },
            'fees': {
                'trading': {
                    'maker': 0.5 / 100,
                    'taker': 0.5 / 100
                }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let balance = yield _this.privatePostAccountBalanceV2();
            let result = { 'info': balance };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this.account();
                if (currency in balance) {
                    let available = 'AVAILABLE_' + currency;
                    account['free'] = balance[available];
                    account['total'] = balance[currency];
                    account['used'] = account['total'] - account['free'];
                }
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this2.publicGetExchangesPairOrderbook(_this2.extend({
                'pair': _this2.marketId(symbol)
            }, params));
            return _this2.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let ticker = yield _this3.publicGetExchangesPairTicker(_this3.extend({
                'pair': _this3.marketId(symbol)
            }, params));
            let timestamp = _this3.milliseconds();
            let averagePrice = parseFloat(ticker['av']);
            let baseVolume = parseFloat(ticker['a']);
            let quoteVolume = baseVolume * averagePrice;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['h']),
                'ask': parseFloat(ticker['l']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['ll']),
                'change': undefined,
                'percentage': undefined,
                'average': averagePrice,
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = parseInt(trade['date']) * 1000;
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'id': trade['tid'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'order': undefined,
            'type': undefined,
            'side': undefined,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetExchangesPairTrades(_this4.extend({
                'pair': market['id']
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let method = 'privatePostOrderAddOrder';
            let order = {
                'Amount': amount,
                'Pair': _this5.marketId(symbol)
            };
            if (type == 'market') {
                method += 'MarketPrice' + _this5.capitalize(side);
            } else {
                order['Price'] = price;
                order['Total'] = amount * price;
                order['IsBid'] = side == 'buy';
            }
            let result = yield _this5[method](_this5.extend(order, params));
            return {
                'info': result,
                'id': result['NewOrder']['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostOrderCancelOrder({ 'id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.implodeParams(path, params);
        if (api == 'public') {
            url += '.json';
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let query = this.extend({ 'nonce': nonce }, params);
            body = this.urlencode(query);
            let signature = this.hmac(this.encode(body), this.encode(this.secret), 'sha512', 'base64');
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'key': this.apiKey,
                'sign': this.decode(signature)
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8}],15:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bitbay extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitbay',
            'name': 'BitBay',
            'countries': ['PL', 'EU'], // Poland
            'rateLimit': 1000,
            'hasCORS': true,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg',
                'www': 'https://bitbay.net',
                'api': {
                    'public': 'https://bitbay.net/API/Public',
                    'private': 'https://bitbay.net/API/Trading/tradingApi.php'
                },
                'doc': ['https://bitbay.net/public-api', 'https://bitbay.net/account/tab-api', 'https://github.com/BitBayNet/API']
            },
            'api': {
                'public': {
                    'get': ['{id}/all', '{id}/market', '{id}/orderbook', '{id}/ticker', '{id}/trades']
                },
                'private': {
                    'post': ['info', 'trade', 'cancel', 'orderbook', 'orders', 'transfer', 'withdraw', 'history', 'transactions']
                }
            },
            'markets': {
                'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'baseId': 'BTC', 'quoteId': 'USD' },
                'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'BTC', 'quoteId': 'EUR' },
                'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN', 'baseId': 'BTC', 'quoteId': 'PLN' },
                'LTC/USD': { 'id': 'LTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD', 'baseId': 'LTC', 'quoteId': 'USD' },
                'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR', 'baseId': 'LTC', 'quoteId': 'EUR' },
                'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN', 'baseId': 'LTC', 'quoteId': 'PLN' },
                'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'LTC', 'quoteId': 'BTC' },
                'ETH/USD': { 'id': 'ETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'baseId': 'ETH', 'quoteId': 'USD' },
                'ETH/EUR': { 'id': 'ETHEUR', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR', 'baseId': 'ETH', 'quoteId': 'EUR' },
                'ETH/PLN': { 'id': 'ETHPLN', 'symbol': 'ETH/PLN', 'base': 'ETH', 'quote': 'PLN', 'baseId': 'ETH', 'quoteId': 'PLN' },
                'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'ETH', 'quoteId': 'BTC' },
                'LSK/USD': { 'id': 'LSKUSD', 'symbol': 'LSK/USD', 'base': 'LSK', 'quote': 'USD', 'baseId': 'LSK', 'quoteId': 'USD' },
                'LSK/EUR': { 'id': 'LSKEUR', 'symbol': 'LSK/EUR', 'base': 'LSK', 'quote': 'EUR', 'baseId': 'LSK', 'quoteId': 'EUR' },
                'LSK/PLN': { 'id': 'LSKPLN', 'symbol': 'LSK/PLN', 'base': 'LSK', 'quote': 'PLN', 'baseId': 'LSK', 'quoteId': 'PLN' },
                'LSK/BTC': { 'id': 'LSKBTC', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC', 'baseId': 'LSK', 'quoteId': 'BTC' },
                'BCH/USD': { 'id': 'BCCUSD', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD', 'baseId': 'BCC', 'quoteId': 'USD' },
                'BCH/EUR': { 'id': 'BCCEUR', 'symbol': 'BCH/EUR', 'base': 'BCH', 'quote': 'EUR', 'baseId': 'BCC', 'quoteId': 'EUR' },
                'BCH/PLN': { 'id': 'BCCPLN', 'symbol': 'BCH/PLN', 'base': 'BCH', 'quote': 'PLN', 'baseId': 'BCC', 'quoteId': 'PLN' },
                'BCH/BTC': { 'id': 'BCCBTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'baseId': 'BCC', 'quoteId': 'BTC' },
                'BTG/USD': { 'id': 'BTGUSD', 'symbol': 'BTG/USD', 'base': 'BTG', 'quote': 'USD', 'baseId': 'BTG', 'quoteId': 'USD' },
                'BTG/EUR': { 'id': 'BTGEUR', 'symbol': 'BTG/EUR', 'base': 'BTG', 'quote': 'EUR', 'baseId': 'BTG', 'quoteId': 'EUR' },
                'BTG/PLN': { 'id': 'BTGPLN', 'symbol': 'BTG/PLN', 'base': 'BTG', 'quote': 'PLN', 'baseId': 'BTG', 'quoteId': 'PLN' },
                'BTG/BTC': { 'id': 'BTGBTC', 'symbol': 'BTG/BTC', 'base': 'BTG', 'quote': 'BTC', 'baseId': 'BTG', 'quoteId': 'BTC' },
                'DASH/USD': { 'id': 'DASHUSD', 'symbol': 'DASH/USD', 'base': 'DASH', 'quote': 'USD', 'baseId': 'DASH', 'quoteId': 'USD' },
                'DASH/EUR': { 'id': 'DASHEUR', 'symbol': 'DASH/EUR', 'base': 'DASH', 'quote': 'EUR', 'baseId': 'DASH', 'quoteId': 'EUR' },
                'DASH/PLN': { 'id': 'DASHPLN', 'symbol': 'DASH/PLN', 'base': 'DASH', 'quote': 'PLN', 'baseId': 'DASH', 'quoteId': 'PLN' },
                'DASH/BTC': { 'id': 'DASHBTC', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'DASH', 'quoteId': 'BTC' },
                'GAME/USD': { 'id': 'GAMEUSD', 'symbol': 'GAME/USD', 'base': 'GAME', 'quote': 'USD', 'baseId': 'GAME', 'quoteId': 'USD' },
                'GAME/EUR': { 'id': 'GAMEEUR', 'symbol': 'GAME/EUR', 'base': 'GAME', 'quote': 'EUR', 'baseId': 'GAME', 'quoteId': 'EUR' },
                'GAME/PLN': { 'id': 'GAMEPLN', 'symbol': 'GAME/PLN', 'base': 'GAME', 'quote': 'PLN', 'baseId': 'GAME', 'quoteId': 'PLN' },
                'GAME/BTC': { 'id': 'GAMEBTC', 'symbol': 'GAME/BTC', 'base': 'GAME', 'quote': 'BTC', 'baseId': 'GAME', 'quoteId': 'BTC' }
            },
            'fees': {
                'trading': {
                    'maker': 0.3 / 100,
                    'taker': 0.0043
                }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostInfo();
            if ('balances' in response) {
                let balance = response['balances'];
                let result = { 'info': balance };
                let codes = Object.keys(_this.currencies);
                for (let i = 0; i < codes.length; i++) {
                    let code = codes[i];
                    let currency = _this.currencies[code];
                    let id = currency['id'];
                    let account = _this.account();
                    if (id in balance) {
                        account['free'] = parseFloat(balance[id]['available']);
                        account['used'] = parseFloat(balance[id]['locked']);
                        account['total'] = _this.sum(account['free'], account['used']);
                    }
                    result[code] = account;
                }
                return _this.parseBalance(result);
            }
            throw new ExchangeError(_this.id + ' empty balance response ' + _this.json(response));
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this2.publicGetIdOrderbook(_this2.extend({
                'id': _this2.marketId(symbol)
            }, params));
            return _this2.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let ticker = yield _this3.publicGetIdTicker(_this3.extend({
                'id': _this3.marketId(symbol)
            }, params));
            let timestamp = _this3.milliseconds();
            let baseVolume = _this3.safeFloat(ticker, 'volume');
            let vwap = _this3.safeFloat(ticker, 'vwap');
            let quoteVolume = baseVolume * vwap;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': _this3.safeFloat(ticker, 'max'),
                'low': _this3.safeFloat(ticker, 'min'),
                'bid': _this3.safeFloat(ticker, 'bid'),
                'ask': _this3.safeFloat(ticker, 'ask'),
                'vwap': vwap,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': _this3.safeFloat(ticker, 'last'),
                'change': undefined,
                'percentage': undefined,
                'average': _this3.safeFloat(ticker, 'average'),
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['date'] * 1000;
        return {
            'id': trade['tid'],
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['type'],
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetIdTrades(_this4.extend({
                'id': market['id']
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let market = _this5.market(symbol);
            return _this5.privatePostTrade(_this5.extend({
                'type': side,
                'currency': market['baseId'],
                'amount': amount,
                'payment_currency': market['quoteId'],
                'rate': price
            }, params));
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCancel({ 'id': id });
        })();
    }

    isFiat(currency) {
        let fiatCurrencies = {
            'USD': true,
            'EUR': true,
            'PLN': true
        };
        if (currency in fiatCurrencies) return true;
        return false;
    }

    withdraw(code, amount, address, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let method = undefined;
            let currency = _this7.currency(code);
            let request = {
                'currency': currency['id'],
                'quantity': amount
            };
            if (_this7.isFiat(code)) {
                method = 'privatePostWithdraw';
                // request['account'] = params['account']; // they demand an account number
                // request['express'] = params['express']; // whatever it means, they don't explain
                // request['bic'] = '';
            } else {
                method = 'privatePostTransfer';
                request['address'] = address;
            }
            let response = yield _this7[method](_this7.extend(request, params));
            return {
                'info': response,
                'id': undefined
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        if (api == 'public') {
            url += '/' + this.implodeParams(path, params) + '.json';
        } else {
            this.checkRequiredCredentials();
            body = this.urlencode(this.extend({
                'method': path,
                'moment': this.nonce()
            }, params));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'API-Key': this.apiKey,
                'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],16:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bitcoincoid extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitcoincoid',
            'name': 'Bitcoin.co.id',
            'countries': 'ID', // Indonesia
            'hasCORS': false,
            'version': '1.7', // as of 6 November 2017
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766138-043c7786-5ecf-11e7-882b-809c14f38b53.jpg',
                'api': {
                    'public': 'https://vip.bitcoin.co.id/api',
                    'private': 'https://vip.bitcoin.co.id/tapi'
                },
                'www': 'https://www.bitcoin.co.id',
                'doc': ['https://vip.bitcoin.co.id/downloads/BITCOINCOID-API-DOCUMENTATION.pdf', 'https://vip.bitcoin.co.id/trade_api']
            },
            'api': {
                'public': {
                    'get': ['{pair}/ticker', '{pair}/trades', '{pair}/depth']
                },
                'private': {
                    'post': ['getInfo', 'transHistory', 'trade', 'tradeHistory', 'openOrders', 'cancelOrder']
                }
            },
            'markets': {
                'BTC/IDR': { 'id': 'btc_idr', 'symbol': 'BTC/IDR', 'base': 'BTC', 'quote': 'IDR', 'baseId': 'btc', 'quoteId': 'idr' },
                'BCH/IDR': { 'id': 'bch_idr', 'symbol': 'BCH/IDR', 'base': 'BCH', 'quote': 'IDR', 'baseId': 'bch', 'quoteId': 'idr' },
                'BTG/IDR': { 'id': 'btg_idr', 'symbol': 'BTG/IDR', 'base': 'BTG', 'quote': 'IDR', 'baseId': 'btg', 'quoteId': 'idr' },
                'ETH/IDR': { 'id': 'eth_idr', 'symbol': 'ETH/IDR', 'base': 'ETH', 'quote': 'IDR', 'baseId': 'eth', 'quoteId': 'idr' },
                'ETC/IDR': { 'id': 'etc_idr', 'symbol': 'ETC/IDR', 'base': 'ETC', 'quote': 'IDR', 'baseId': 'etc', 'quoteId': 'idr' },
                'LTC/IDR': { 'id': 'ltc_idr', 'symbol': 'LTC/IDR', 'base': 'LTC', 'quote': 'IDR', 'baseId': 'ltc', 'quoteId': 'idr' },
                'NXT/IDR': { 'id': 'nxt_idr', 'symbol': 'NXT/IDR', 'base': 'NXT', 'quote': 'IDR', 'baseId': 'nxt', 'quoteId': 'idr' },
                'WAVES/IDR': { 'id': 'waves_idr', 'symbol': 'WAVES/IDR', 'base': 'WAVES', 'quote': 'IDR', 'baseId': 'waves', 'quoteId': 'idr' },
                'XRP/IDR': { 'id': 'xrp_idr', 'symbol': 'XRP/IDR', 'base': 'XRP', 'quote': 'IDR', 'baseId': 'xrp', 'quoteId': 'idr' },
                'XZC/IDR': { 'id': 'xzc_idr', 'symbol': 'XZC/IDR', 'base': 'XZC', 'quote': 'IDR', 'baseId': 'xzc', 'quoteId': 'idr' },
                'XLM/IDR': { 'id': 'str_idr', 'symbol': 'XLM/IDR', 'base': 'XLM', 'quote': 'IDR', 'baseId': 'str', 'quoteId': 'idr' },
                'BTS/BTC': { 'id': 'bts_btc', 'symbol': 'BTS/BTC', 'base': 'BTS', 'quote': 'BTC', 'baseId': 'bts', 'quoteId': 'btc' },
                'DASH/BTC': { 'id': 'drk_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'drk', 'quoteId': 'btc' },
                'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'baseId': 'doge', 'quoteId': 'btc' },
                'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc' },
                'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },
                'NXT/BTC': { 'id': 'nxt_btc', 'symbol': 'NXT/BTC', 'base': 'NXT', 'quote': 'BTC', 'baseId': 'nxt', 'quoteId': 'btc' },
                'XLM/BTC': { 'id': 'str_btc', 'symbol': 'XLM/BTC', 'base': 'XLM', 'quote': 'BTC', 'baseId': 'str', 'quoteId': 'btc' },
                'XEM/BTC': { 'id': 'nem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC', 'baseId': 'nem', 'quoteId': 'btc' },
                'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc' }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostGetInfo();
            let balance = response['return'];
            let result = { 'info': balance };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let account = _this.account();
                account['free'] = _this.safeFloat(balance['balance'], lowercase, 0.0);
                account['used'] = _this.safeFloat(balance['balance_hold'], lowercase, 0.0);
                account['total'] = _this.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this2.publicGetPairDepth(_this2.extend({
                'pair': _this2.marketId(symbol)
            }, params));
            return _this2.parseOrderBook(orderbook, undefined, 'buy', 'sell');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetPairTicker(_this3.extend({
                'pair': market['id']
            }, params));
            let ticker = response['ticker'];
            let timestamp = parseFloat(ticker['server_time']) * 1000;
            let baseVolume = 'vol_' + market['baseId'].toLowerCase();
            let quoteVolume = 'vol_' + market['quoteId'].toLowerCase();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker[baseVolume]),
                'quoteVolume': parseFloat(ticker[quoteVolume]),
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(trade['date']) * 1000;
        return {
            'id': trade['tid'],
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['type'],
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetPairTrades(_this4.extend({
                'pair': market['id']
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let market = _this5.market(symbol);
            let order = {
                'pair': market['id'],
                'type': side,
                'price': price
            };
            let base = market['baseId'];
            order[base] = amount;
            let result = yield _this5.privatePostTrade(_this5.extend(order, params));
            return {
                'info': result,
                'id': result['return']['order_id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCancelOrder(_this6.extend({
                'order_id': id
            }, params));
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        if (api == 'public') {
            url += '/' + this.implodeParams(path, params);
        } else {
            this.checkRequiredCredentials();
            body = this.urlencode(this.extend({
                'method': path,
                'nonce': this.nonce()
            }, params));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Key': this.apiKey,
                'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.fetch2(path, api, method, params, headers, body);
            if ('error' in response) throw new ExchangeError(_this7.id + ' ' + response['error']);
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],17:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, InsufficientFunds, NotSupported, InvalidOrder, OrderNotFound } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bitfinex extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitfinex',
            'name': 'Bitfinex',
            'countries': 'VG',
            'version': 'v1',
            'rateLimit': 1500,
            'hasCORS': false,
            // old metainfo interface
            'hasFetchOrder': true,
            'hasFetchTickers': true,
            'hasDeposit': true,
            'hasWithdraw': true,
            'hasFetchOHLCV': true,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            // new metainfo interface
            'has': {
                'fetchOHLCV': true,
                'fetchTickers': true,
                'fetchOrder': true,
                'fetchOpenOrders': true,
                'fetchClosedOrders': true,
                'fetchMyTrades': true,
                'withdraw': true,
                'deposit': true
            },
            'timeframes': {
                '1m': '1m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '3h': '3h',
                '6h': '6h',
                '12h': '12h',
                '1d': '1D',
                '1w': '7D',
                '2w': '14D',
                '1M': '1M'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
                'api': 'https://api.bitfinex.com',
                'www': 'https://www.bitfinex.com',
                'doc': ['https://bitfinex.readme.io/v1/docs', 'https://github.com/bitfinexcom/bitfinex-api-node']
            },
            'api': {
                'v2': {
                    'get': ['candles/trade:{timeframe}:{symbol}/{section}', 'candles/trade:{timeframe}:{symbol}/last', 'candles/trade:{timeframe}:{symbol}/hist']
                },
                'public': {
                    'get': ['book/{symbol}',
                    // 'candles/{symbol}',
                    'lendbook/{currency}', 'lends/{currency}', 'pubticker/{symbol}', 'stats/{symbol}', 'symbols', 'symbols_details', 'tickers', 'today', 'trades/{symbol}']
                },
                'private': {
                    'post': ['account_fees', 'account_infos', 'balances', 'basket_manage', 'credits', 'deposit/new', 'funding/close', 'history', 'history/movements', 'key_info', 'margin_infos', 'mytrades', 'mytrades_funding', 'offer/cancel', 'offer/new', 'offer/status', 'offers', 'offers/hist', 'order/cancel', 'order/cancel/all', 'order/cancel/multi', 'order/cancel/replace', 'order/new', 'order/new/multi', 'order/status', 'orders', 'orders/hist', 'position/claim', 'positions', 'summary', 'taken_funds', 'total_taken_funds', 'transfer', 'unused_taken_funds', 'withdraw']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': true,
                    'percentage': true,
                    'maker': 0.1 / 100,
                    'taker': 0.2 / 100,
                    'tiers': {
                        'taker': [[0, 0.2 / 100], [500000, 0.2 / 100], [1000000, 0.2 / 100], [2500000, 0.2 / 100], [5000000, 0.2 / 100], [7500000, 0.2 / 100], [10000000, 0.18 / 100], [15000000, 0.16 / 100], [20000000, 0.14 / 100], [25000000, 0.12 / 100], [30000000, 0.1 / 100]],
                        'maker': [[0, 0.1 / 100], [500000, 0.08 / 100], [1000000, 0.06 / 100], [2500000, 0.04 / 100], [5000000, 0.02 / 100], [7500000, 0], [10000000, 0], [15000000, 0], [20000000, 0], [25000000, 0], [30000000, 0]]
                    }
                },
                'funding': {
                    'tierBased': false, // true for tier-based/progressive
                    'percentage': false, // fixed commission
                    'deposit': {
                        'BTC': 0.0005,
                        'IOTA': 0.5,
                        'ETH': 0.01,
                        'BCH': 0.01,
                        'LTC': 0.1,
                        'EOS': 0.1,
                        'XMR': 0.04,
                        'SAN': 0.1,
                        'DASH': 0.01,
                        'ETC': 0.01,
                        'XPR': 0.02,
                        'YYW': 0.1,
                        'NEO': 0,
                        'ZEC': 0.1,
                        'BTG': 0,
                        'OMG': 0.1,
                        'DATA': 1,
                        'QASH': 1,
                        'ETP': 0.01,
                        'QTUM': 0.01,
                        'EDO': 0.5,
                        'AVT': 0.5,
                        'USDT': 0
                    },
                    'withdraw': {
                        'BTC': 0.0005,
                        'IOTA': 0.5,
                        'ETH': 0.01,
                        'BCH': 0.01,
                        'LTC': 0.1,
                        'EOS': 0.1,
                        'XMR': 0.04,
                        'SAN': 0.1,
                        'DASH': 0.01,
                        'ETC': 0.01,
                        'XPR': 0.02,
                        'YYW': 0.1,
                        'NEO': 0,
                        'ZEC': 0.1,
                        'BTG': 0,
                        'OMG': 0.1,
                        'DATA': 1,
                        'QASH': 1,
                        'ETP': 0.01,
                        'QTUM': 0.01,
                        'EDO': 0.5,
                        'AVT': 0.5,
                        'USDT': 5
                    }
                }
            }
        });
    }

    commonCurrencyCode(currency) {
        // issue #4 Bitfinex names Dash as DSH, instead of DASH
        if (currency == 'DSH') return 'DASH';
        if (currency == 'QTM') return 'QTUM';
        if (currency == 'BCC') return 'CST_BCC';
        if (currency == 'BCU') return 'CST_BCU';
        // issue #796
        if (currency == 'IOT') return 'IOTA';
        return currency;
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetSymbolsDetails();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['pair'].toUpperCase();
                let baseId = id.slice(0, 3);
                let quoteId = id.slice(3, 6);
                let base = _this.commonCurrencyCode(baseId);
                let quote = _this.commonCurrencyCode(quoteId);
                let symbol = base + '/' + quote;
                let precision = {
                    'price': market['price_precision'],
                    'amount': market['price_precision']
                };
                result.push(_this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'baseId': baseId,
                    'quoteId': quoteId,
                    'active': true,
                    'info': market,
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': parseFloat(market['minimum_order_size']),
                            'max': parseFloat(market['maximum_order_size'])
                        },
                        'price': {
                            'min': Math.pow(10, -precision['price']),
                            'max': Math.pow(10, precision['price'])
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        }
                    }
                }));
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let balanceType = _this2.safeString(params, 'type', 'exchange');
            let balances = yield _this2.privatePostBalances();
            let result = { 'info': balances };
            for (let i = 0; i < balances.length; i++) {
                let balance = balances[i];
                if (balance['type'] == balanceType) {
                    let currency = balance['currency'];
                    let uppercase = currency.toUpperCase();
                    uppercase = _this2.commonCurrencyCode(uppercase);
                    let account = _this2.account();
                    account['free'] = parseFloat(balance['available']);
                    account['total'] = parseFloat(balance['amount']);
                    account['used'] = account['total'] - account['free'];
                    result[uppercase] = account;
                }
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetBookSymbol(_this3.extend({
                'symbol': _this3.marketId(symbol)
            }, params));
            return _this3.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
        })();
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let tickers = yield _this4.publicGetTickers(params);
            let result = {};
            for (let i = 0; i < tickers.length; i++) {
                let ticker = tickers[i];
                if ('pair' in ticker) {
                    let id = ticker['pair'];
                    if (id in _this4.markets_by_id) {
                        let market = _this4.markets_by_id[id];
                        let symbol = market['symbol'];
                        result[symbol] = _this4.parseTicker(ticker, market);
                    } else {
                        throw new ExchangeError(_this4.id + ' fetchTickers() failed to recognize symbol ' + id + ' ' + _this4.json(ticker));
                    }
                } else {
                    throw new ExchangeError(_this4.id + ' fetchTickers() response not recognized ' + _this4.json(tickers));
                }
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let ticker = yield _this5.publicGetPubtickerSymbol(_this5.extend({
                'symbol': market['id']
            }, params));
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = parseFloat(ticker['timestamp']) * 1000;
        let symbol = undefined;
        if (market) {
            symbol = market['symbol'];
        } else if ('pair' in ticker) {
            let id = ticker['pair'];
            if (id in this.markets_by_id) {
                market = this.markets_by_id[id];
                symbol = market['symbol'];
            } else {
                throw new ExchangeError(this.id + ' unrecognized ticker symbol ' + id + ' ' + this.json(ticker));
            }
        }
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['bid']),
            'ask': parseFloat(ticker['ask']),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last_price']),
            'change': undefined,
            'percentage': undefined,
            'average': parseFloat(ticker['mid']),
            'baseVolume': parseFloat(ticker['volume']),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(parseFloat(trade['timestamp'])) * 1000;
        let side = trade['type'].toLowerCase();
        let orderId = this.safeString(trade, 'order_id');
        let price = parseFloat(trade['price']);
        let amount = parseFloat(trade['amount']);
        let cost = price * amount;
        return {
            'id': trade['tid'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'order': orderId,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': undefined
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetTradesSymbol(_this6.extend({
                'symbol': market['id']
            }, params));
            return _this6.parseTrades(response, market, since, limit);
        })();
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let request = { 'symbol': market['id'] };
            if (limit) {
                request['limit_trades'] = limit;
            }
            if (since) {
                request['timestamp'] = parseInt(since / 1000);
            }
            let response = yield _this7.privatePostMytrades(_this7.extend(request, params));
            return _this7.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let orderType = type;
            if (type == 'limit' || type == 'market') orderType = 'exchange ' + type;
            // amount = this.amountToPrecision (symbol, amount);
            let order = {
                'symbol': _this8.marketId(symbol),
                'amount': amount.toString(),
                'side': side,
                'type': orderType,
                'ocoorder': false,
                'buy_price_oco': 0,
                'sell_price_oco': 0
            };
            if (type == 'market') {
                order['price'] = _this8.nonce().toString();
            } else {
                // price = this.priceToPrecision (symbol, price);
                order['price'] = price.toString();
            }
            let result = yield _this8.privatePostOrderNew(_this8.extend(order, params));
            return _this8.parseOrder(result);
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            return yield _this9.privatePostOrderCancel({ 'order_id': parseInt(id) });
        })();
    }

    parseOrder(order, market = undefined) {
        let side = order['side'];
        let open = order['is_live'];
        let canceled = order['is_cancelled'];
        let status = undefined;
        if (open) {
            status = 'open';
        } else if (canceled) {
            status = 'canceled';
        } else {
            status = 'closed';
        }
        let symbol = undefined;
        if (!market) {
            let exchange = order['symbol'].toUpperCase();
            if (exchange in this.markets_by_id) {
                market = this.markets_by_id[exchange];
            }
        }
        if (market) symbol = market['symbol'];
        let orderType = order['type'];
        let exchange = orderType.indexOf('exchange ') >= 0;
        if (exchange) {
            let [prefix, orderType] = order['type'].split(' ');
        }
        let timestamp = parseInt(parseFloat(order['timestamp']) * 1000);
        let result = {
            'info': order,
            'id': order['id'].toString(),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': orderType,
            'side': side,
            'price': parseFloat(order['price']),
            'average': parseFloat(order['avg_execution_price']),
            'amount': parseFloat(order['original_amount']),
            'remaining': parseFloat(order['remaining_amount']),
            'filled': parseFloat(order['executed_amount']),
            'status': status,
            'fee': undefined
        };
        return result;
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let response = yield _this10.privatePostOrders(params);
            let orders = _this10.parseOrders(response, undefined, since, limit);
            if (symbol) orders = _this10.filterBy(orders, 'symbol', symbol);
            return orders;
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            let request = {};
            if (limit) request['limit'] = limit;
            let response = yield _this11.privatePostOrdersHist(_this11.extend(request, params));
            let orders = _this11.parseOrders(response, undefined, since, limit);
            if (symbol) orders = _this11.filterBy(orders, 'symbol', symbol);
            orders = _this11.filterBy(orders, 'status', 'closed');
            return orders;
        })();
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            yield _this12.loadMarkets();
            let response = yield _this12.privatePostOrderStatus(_this12.extend({
                'order_id': parseInt(id)
            }, params));
            return _this12.parseOrder(response);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [ohlcv[0], ohlcv[1], ohlcv[3], ohlcv[4], ohlcv[2], ohlcv[5]];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            yield _this13.loadMarkets();
            let market = _this13.market(symbol);
            let v2id = 't' + market['id'];
            let request = {
                'symbol': v2id,
                'timeframe': _this13.timeframes[timeframe]
            };
            if (limit) request['limit'] = limit;
            if (since) request['start'] = since;
            request = _this13.extend(request, params);
            let response = yield _this13.v2GetCandlesTradeTimeframeSymbolHist(request);
            return _this13.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    getCurrencyName(currency) {
        if (currency == 'BTC') {
            return 'bitcoin';
        } else if (currency == 'LTC') {
            return 'litecoin';
        } else if (currency == 'ETH') {
            return 'ethereum';
        } else if (currency == 'ETC') {
            return 'ethereumc';
        } else if (currency == 'OMNI') {
            return 'mastercoin'; // ???
        } else if (currency == 'ZEC') {
            return 'zcash';
        } else if (currency == 'XMR') {
            return 'monero';
        } else if (currency == 'USD') {
            return 'wire';
        } else if (currency == 'DASH') {
            return 'dash';
        } else if (currency == 'XRP') {
            return 'ripple';
        } else if (currency == 'EOS') {
            return 'eos';
        } else if (currency == 'BCH') {
            return 'bcash';
        } else if (currency == 'USDT') {
            return 'tetheruso';
        }
        throw new NotSupported(this.id + ' ' + currency + ' not supported for withdrawal');
    }

    createDepositAddress(currency, params = {}) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this14.fetchDepositAddress(currency, _this14.extend({
                'renew': 1
            }, params));
            return {
                'currency': currency,
                'address': response['address'],
                'status': 'ok',
                'info': response['info']
            };
        })();
    }

    fetchDepositAddress(currency, params = {}) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            let name = _this15.getCurrencyName(currency);
            let request = {
                'method': name,
                'wallet_name': 'exchange',
                'renew': 0 // a value of 1 will generate a new address
            };
            let response = yield _this15.privatePostDepositNew(_this15.extend(request, params));
            return {
                'currency': currency,
                'address': response['address'],
                'status': 'ok',
                'info': response
            };
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this16 = this;

        return _asyncToGenerator(function* () {
            let name = _this16.getCurrencyName(currency);
            let request = {
                'withdraw_type': name,
                'walletselected': 'exchange',
                'amount': amount.toString(),
                'address': address
            };
            let responses = yield _this16.privatePostWithdraw(_this16.extend(request, params));
            let response = responses[0];
            return {
                'info': response,
                'id': response['withdrawal_id']
            };
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let request = '/' + this.implodeParams(path, params);
        if (api == 'v2') {
            request = '/' + api + request;
        } else {
            request = '/' + this.version + request;
        }
        let query = this.omit(params, this.extractParams(path));
        let url = this.urls['api'] + request;
        if (api == 'public' || path.indexOf('/hist') >= 0) {
            if (Object.keys(query).length) {
                let suffix = '?' + this.urlencode(query);
                url += suffix;
                request += suffix;
            }
        }
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            query = this.extend({
                'nonce': nonce.toString(),
                'request': request
            }, query);
            query = this.json(query);
            query = this.encode(query);
            let payload = this.stringToBase64(query);
            let secret = this.encode(this.secret);
            let signature = this.hmac(payload, secret, 'sha384');
            headers = {
                'X-BFX-APIKEY': this.apiKey,
                'X-BFX-PAYLOAD': this.decode(payload),
                'X-BFX-SIGNATURE': signature
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code == 400) {
            if (body[0] == "{") {
                let response = JSON.parse(body);
                let message = response['message'];
                if (message.indexOf('Key price should be a decimal number') >= 0) {
                    throw new InvalidOrder(this.id + ' ' + message);
                } else if (message.indexOf('Invalid order: not enough exchange balance') >= 0) {
                    throw new InsufficientFunds(this.id + ' ' + message);
                } else if (message.indexOf('Invalid order') >= 0) {
                    throw new InvalidOrder(this.id + ' ' + message);
                } else if (message.indexOf('Order could not be cancelled.') >= 0) {
                    throw new OrderNotFound(this.id + ' ' + message);
                }
            }
            throw new ExchangeError(this.id + ' ' + body);
        }
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this17 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this17.fetch2(path, api, method, params, headers, body);
            if ('message' in response) {
                throw new ExchangeError(_this17.id + ' ' + _this17.json(response));
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],18:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const bitfinex = require('./bitfinex.js');
const { ExchangeError, NotSupported, InsufficientFunds } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class bitfinex2 extends bitfinex {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitfinex2',
            'name': 'Bitfinex v2',
            'countries': 'VG',
            'version': 'v2',
            'hasCORS': true,
            // old metainfo interface
            'hasFetchOrder': true,
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'hasWithdraw': true,
            'hasDeposit': false,
            'hasFetchOpenOrders': false,
            'hasFetchClosedOrders': false,
            // new metainfo interface
            'has': {
                'fetchOHLCV': true,
                'fetchTickers': true,
                'fetchOrder': true,
                'fetchOpenOrders': false,
                'fetchClosedOrders': false,
                'withdraw': true,
                'deposit': false
            },
            'timeframes': {
                '1m': '1m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '3h': '3h',
                '6h': '6h',
                '12h': '12h',
                '1d': '1D',
                '1w': '7D',
                '2w': '14D',
                '1M': '1M'
            },
            'rateLimit': 1500,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
                'api': 'https://api.bitfinex.com',
                'www': 'https://www.bitfinex.com',
                'doc': ['https://bitfinex.readme.io/v2/docs', 'https://github.com/bitfinexcom/bitfinex-api-node'],
                'fees': 'https://www.bitfinex.com/fees'
            },
            'api': {
                'public': {
                    'get': ['platform/status', 'tickers', 'ticker/{symbol}', 'trades/{symbol}/hist', 'book/{symbol}/{precision}', 'book/{symbol}/P0', 'book/{symbol}/P1', 'book/{symbol}/P2', 'book/{symbol}/P3', 'book/{symbol}/R0', 'symbols_details', 'stats1/{key}:{size}:{symbol}/{side}/{section}', 'stats1/{key}:{size}:{symbol}/long/last', 'stats1/{key}:{size}:{symbol}/long/hist', 'stats1/{key}:{size}:{symbol}/short/last', 'stats1/{key}:{size}:{symbol}/short/hist', 'candles/trade:{timeframe}:{symbol}/{section}', 'candles/trade:{timeframe}:{symbol}/last', 'candles/trade:{timeframe}:{symbol}/hist'],
                    'post': ['calc/trade/avg']
                },
                'private': {
                    'post': ['auth/r/wallets', 'auth/r/orders/{symbol}', 'auth/r/orders/{symbol}/new', 'auth/r/orders/{symbol}/hist', 'auth/r/order/{symbol}:{id}/trades', 'auth/r/trades/{symbol}/hist', 'auth/r/positions', 'auth/r/funding/offers/{symbol}', 'auth/r/funding/offers/{symbol}/hist', 'auth/r/funding/loans/{symbol}', 'auth/r/funding/loans/{symbol}/hist', 'auth/r/funding/credits/{symbol}', 'auth/r/funding/credits/{symbol}/hist', 'auth/r/funding/trades/{symbol}/hist', 'auth/r/info/margin/{key}', 'auth/r/info/funding/{key}', 'auth/r/movements/{currency}/hist', 'auth/r/stats/perf:{timeframe}/hist', 'auth/r/alerts', 'auth/w/alert/set', 'auth/w/alert/{type}:{symbol}:{price}/del', 'auth/calc/order/avail']
                }
            },
            'markets': {
                'AVT/BTC': { 'id': 'tAVTBTC', 'symbol': 'AVT/BTC', 'base': 'AVT', 'quote': 'BTC' },
                'AVT/ETH': { 'id': 'tAVTETH', 'symbol': 'AVT/ETH', 'base': 'AVT', 'quote': 'ETH' },
                'AVT/USD': { 'id': 'tAVTUSD', 'symbol': 'AVT/USD', 'base': 'AVT', 'quote': 'USD' },
                'CST_BCC/BTC': { 'id': 'tBCCBTC', 'symbol': 'CST_BCC/BTC', 'base': 'CST_BCC', 'quote': 'BTC' },
                'CST_BCC/USD': { 'id': 'tBCCUSD', 'symbol': 'CST_BCC/USD', 'base': 'CST_BCC', 'quote': 'USD' },
                'BCH/BTC': { 'id': 'tBCHBTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },
                'BCH/ETH': { 'id': 'tBCHETH', 'symbol': 'BCH/ETH', 'base': 'BCH', 'quote': 'ETH' },
                'BCH/USD': { 'id': 'tBCHUSD', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD' },
                'CST_BCU/BTC': { 'id': 'tBCUBTC', 'symbol': 'CST_BCU/BTC', 'base': 'CST_BCU', 'quote': 'BTC' },
                'CST_BCU/USD': { 'id': 'tBCUUSD', 'symbol': 'CST_BCU/USD', 'base': 'CST_BCU', 'quote': 'USD' },
                'BT1/BTC': { 'id': 'tBT1BTC', 'symbol': 'BT1/BTC', 'base': 'BT1', 'quote': 'BTC' },
                'BT1/USD': { 'id': 'tBT1USD', 'symbol': 'BT1/USD', 'base': 'BT1', 'quote': 'USD' },
                'BT2/BTC': { 'id': 'tBT2BTC', 'symbol': 'BT2/BTC', 'base': 'BT2', 'quote': 'BTC' },
                'BT2/USD': { 'id': 'tBT2USD', 'symbol': 'BT2/USD', 'base': 'BT2', 'quote': 'USD' },
                'BTC/USD': { 'id': 'tBTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
                'BTC/EUR': { 'id': 'tBTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
                'BTG/BTC': { 'id': 'tBTGBTC', 'symbol': 'BTG/BTC', 'base': 'BTG', 'quote': 'BTC' },
                'BTG/USD': { 'id': 'tBTGUSD', 'symbol': 'BTG/USD', 'base': 'BTG', 'quote': 'USD' },
                'DASH/BTC': { 'id': 'tDSHBTC', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' },
                'DASH/USD': { 'id': 'tDSHUSD', 'symbol': 'DASH/USD', 'base': 'DASH', 'quote': 'USD' },
                'DAT/BTC': { 'id': 'tDATBTC', 'symbol': 'DAT/BTC', 'base': 'DAT', 'quote': 'BTC' },
                'DAT/ETH': { 'id': 'tDATETH', 'symbol': 'DAT/ETH', 'base': 'DAT', 'quote': 'ETH' },
                'DAT/USD': { 'id': 'tDATUSD', 'symbol': 'DAT/USD', 'base': 'DAT', 'quote': 'USD' },
                'EDO/BTC': { 'id': 'tEDOBTC', 'symbol': 'EDO/BTC', 'base': 'EDO', 'quote': 'BTC' },
                'EDO/ETH': { 'id': 'tEDOETH', 'symbol': 'EDO/ETH', 'base': 'EDO', 'quote': 'ETH' },
                'EDO/USD': { 'id': 'tEDOUSD', 'symbol': 'EDO/USD', 'base': 'EDO', 'quote': 'USD' },
                'EOS/BTC': { 'id': 'tEOSBTC', 'symbol': 'EOS/BTC', 'base': 'EOS', 'quote': 'BTC' },
                'EOS/ETH': { 'id': 'tEOSETH', 'symbol': 'EOS/ETH', 'base': 'EOS', 'quote': 'ETH' },
                'EOS/USD': { 'id': 'tEOSUSD', 'symbol': 'EOS/USD', 'base': 'EOS', 'quote': 'USD' },
                'ETC/BTC': { 'id': 'tETCBTC', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
                'ETC/USD': { 'id': 'tETCUSD', 'symbol': 'ETC/USD', 'base': 'ETC', 'quote': 'USD' },
                'ETH/BTC': { 'id': 'tETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
                'ETH/USD': { 'id': 'tETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
                'ETP/BTC': { 'id': 'tETPBTC', 'symbol': 'ETP/BTC', 'base': 'ETP', 'quote': 'BTC' },
                'ETP/ETH': { 'id': 'tETPETH', 'symbol': 'ETP/ETH', 'base': 'ETP', 'quote': 'ETH' },
                'ETP/USD': { 'id': 'tETPUSD', 'symbol': 'ETP/USD', 'base': 'ETP', 'quote': 'USD' },
                'IOTA/BTC': { 'id': 'tIOTBTC', 'symbol': 'IOTA/BTC', 'base': 'IOTA', 'quote': 'BTC' },
                'IOTA/ETH': { 'id': 'tIOTETH', 'symbol': 'IOTA/ETH', 'base': 'IOTA', 'quote': 'ETH' },
                'IOTA/USD': { 'id': 'tIOTUSD', 'symbol': 'IOTA/USD', 'base': 'IOTA', 'quote': 'USD' },
                'LTC/BTC': { 'id': 'tLTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
                'LTC/USD': { 'id': 'tLTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
                'NEO/BTC': { 'id': 'tNEOBTC', 'symbol': 'NEO/BTC', 'base': 'NEO', 'quote': 'BTC' },
                'NEO/ETH': { 'id': 'tNEOETH', 'symbol': 'NEO/ETH', 'base': 'NEO', 'quote': 'ETH' },
                'NEO/USD': { 'id': 'tNEOUSD', 'symbol': 'NEO/USD', 'base': 'NEO', 'quote': 'USD' },
                'OMG/BTC': { 'id': 'tOMGBTC', 'symbol': 'OMG/BTC', 'base': 'OMG', 'quote': 'BTC' },
                'OMG/ETH': { 'id': 'tOMGETH', 'symbol': 'OMG/ETH', 'base': 'OMG', 'quote': 'ETH' },
                'OMG/USD': { 'id': 'tOMGUSD', 'symbol': 'OMG/USD', 'base': 'OMG', 'quote': 'USD' },
                'QTUM/BTC': { 'id': 'tQTMBTC', 'symbol': 'QTUM/BTC', 'base': 'QTUM', 'quote': 'BTC' },
                'QTUM/ETH': { 'id': 'tQTMETH', 'symbol': 'QTUM/ETH', 'base': 'QTUM', 'quote': 'ETH' },
                'QTUM/USD': { 'id': 'tQTMUSD', 'symbol': 'QTUM/USD', 'base': 'QTUM', 'quote': 'USD' },
                'RRT/BTC': { 'id': 'tRRTBTC', 'symbol': 'RRT/BTC', 'base': 'RRT', 'quote': 'BTC' },
                'RRT/USD': { 'id': 'tRRTUSD', 'symbol': 'RRT/USD', 'base': 'RRT', 'quote': 'USD' },
                'SAN/BTC': { 'id': 'tSANBTC', 'symbol': 'SAN/BTC', 'base': 'SAN', 'quote': 'BTC' },
                'SAN/ETH': { 'id': 'tSANETH', 'symbol': 'SAN/ETH', 'base': 'SAN', 'quote': 'ETH' },
                'SAN/USD': { 'id': 'tSANUSD', 'symbol': 'SAN/USD', 'base': 'SAN', 'quote': 'USD' },
                'XMR/BTC': { 'id': 'tXMRBTC', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },
                'XMR/USD': { 'id': 'tXMRUSD', 'symbol': 'XMR/USD', 'base': 'XMR', 'quote': 'USD' },
                'XRP/BTC': { 'id': 'tXRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
                'XRP/USD': { 'id': 'tXRPUSD', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD' },
                'ZEC/BTC': { 'id': 'tZECBTC', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },
                'ZEC/USD': { 'id': 'tZECUSD', 'symbol': 'ZEC/USD', 'base': 'ZEC', 'quote': 'USD' }
            },
            'fees': {
                'trading': {
                    'maker': 0.1 / 100,
                    'taker': 0.2 / 100
                },
                'funding': {
                    'withdraw': {
                        'BTC': 0.0005,
                        'BCH': 0.0005,
                        'ETH': 0.01,
                        'EOS': 0.1,
                        'LTC': 0.001,
                        'OMG': 0.1,
                        'IOT': 0.0,
                        'NEO': 0.0,
                        'ETC': 0.01,
                        'XRP': 0.02,
                        'ETP': 0.01,
                        'ZEC': 0.001,
                        'BTG': 0.0,
                        'DASH': 0.01,
                        'XMR': 0.04,
                        'QTM': 0.01,
                        'EDO': 0.5,
                        'DAT': 1.0,
                        'AVT': 0.5,
                        'SAN': 0.1,
                        'USDT': 5.0
                    }
                }
            }
        });
    }

    commonCurrencyCode(currency) {
        // issue #4 Bitfinex names Dash as DSH, instead of DASH
        if (currency == 'DSH') return 'DASH';
        if (currency == 'QTM') return 'QTUM';
        // issue #796
        if (currency == 'IOT') return 'IOTA';
        return currency;
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostAuthRWallets();
            let balanceType = _this.safeString(params, 'type', 'exchange');
            let result = { 'info': response };
            for (let b = 0; b < response.length; b++) {
                let balance = response[b];
                let [accountType, currency, total, interest, available] = balance;
                if (accountType == balanceType) {
                    if (currency[0] == 't') currency = currency.slice(1);
                    let uppercase = currency.toUpperCase();
                    uppercase = _this.commonCurrencyCode(uppercase);
                    let account = _this.account();
                    account['free'] = available;
                    account['total'] = total;
                    if (account['free']) account['used'] = account['total'] - account['free'];
                    result[uppercase] = account;
                }
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this2.publicGetBookSymbolPrecision(_this2.extend({
                'symbol': _this2.marketId(symbol),
                'precision': 'R0'
            }, params));
            let timestamp = _this2.milliseconds();
            let result = {
                'bids': [],
                'asks': [],
                'timestamp': timestamp,
                'datetime': _this2.iso8601(timestamp)
            };
            for (let i = 0; i < orderbook.length; i++) {
                let order = orderbook[i];
                let price = order[1];
                let amount = order[2];
                let side = amount > 0 ? 'bids' : 'asks';
                amount = Math.abs(amount);
                result[side].push([price, amount]);
            }
            result['bids'] = _this2.sortBy(result['bids'], 0, true);
            result['asks'] = _this2.sortBy(result['asks'], 0);
            return result;
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let length = ticker.length;
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': ticker[length - 2],
            'low': ticker[length - 1],
            'bid': ticker[length - 10],
            'ask': ticker[length - 8],
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': ticker[length - 4],
            'change': ticker[length - 6],
            'percentage': ticker[length - 5],
            'average': undefined,
            'baseVolume': ticker[length - 3],
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let tickers = yield _this3.publicGetTickers(_this3.extend({
                'symbols': _this3.ids.join(',')
            }, params));
            let result = {};
            for (let i = 0; i < tickers.length; i++) {
                let ticker = tickers[i];
                let id = ticker[0];
                let market = _this3.markets_by_id[id];
                let symbol = market['symbol'];
                result[symbol] = _this3.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.markets[symbol];
            let ticker = yield _this4.publicGetTickerSymbol(_this4.extend({
                'symbol': market['id']
            }, params));
            return _this4.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let [id, timestamp, amount, price] = trade;
        let side = amount < 0 ? 'sell' : 'buy';
        if (amount < 0) {
            amount = -amount;
        }
        return {
            'id': id.toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': side,
            'price': price,
            'amount': amount
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let market = _this5.market(symbol);
            let request = {
                'symbol': market['id']
            };
            if (since) {
                request['start'] = since;
            }
            if (limit) {
                request['limit'] = limit;
            }
            let response = yield _this5.publicGetTradesSymbolHist(_this5.extend(request, params));
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let market = _this6.market(symbol);
            let request = {
                'symbol': market['id'],
                'timeframe': _this6.timeframes[timeframe]
            };
            if (limit) request['limit'] = limit;
            if (since) request['start'] = since;
            request = _this6.extend(request, params);
            let response = yield _this6.publicGetCandlesTradeTimeframeSymbolHist(request);
            return _this6.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            throw new NotSupported(_this7.id + ' createOrder not implemented yet');
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        throw new NotSupported(this.id + ' cancelOrder not implemented yet');
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            throw new NotSupported(_this8.id + ' fetchOrder not implemented yet');
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            throw new NotSupported(_this9.id + ' withdraw not implemented yet');
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let request = this.version + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        let url = this.urls['api'] + '/' + request;
        if (api == 'public') {
            if (Object.keys(query).length) {
                url += '?' + this.urlencode(query);
            }
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            body = this.json(query);
            let auth = '/api' + '/' + request + nonce + body;
            let signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha384');
            headers = {
                'bfx-nonce': nonce,
                'bfx-apikey': this.apiKey,
                'bfx-signature': signature,
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this10.fetch2(path, api, method, params, headers, body);
            if (response) {
                if ('message' in response) {
                    if (response['message'].indexOf('not enough exchange balance') >= 0) throw new InsufficientFunds(_this10.id + ' ' + _this10.json(response));
                    throw new ExchangeError(_this10.id + ' ' + _this10.json(response));
                }
                return response;
            } else if (response == '') {
                throw new ExchangeError(_this10.id + ' returned empty response');
            }
            return response;
        })();
    }
};
},{"./base/errors":10,"./bitfinex.js":17}],19:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');

//  ---------------------------------------------------------------------------

module.exports = class bitflyer extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitflyer',
            'name': 'bitFlyer',
            'countries': 'JP',
            'version': 'v1',
            'rateLimit': 500,
            'hasCORS': false,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg',
                'api': 'https://api.bitflyer.jp',
                'www': 'https://bitflyer.jp',
                'doc': 'https://bitflyer.jp/API'
            },
            'api': {
                'public': {
                    'get': ['getmarkets', // or 'markets'
                    'getboard', // or 'board'
                    'getticker', // or 'ticker'
                    'getexecutions', // or 'executions'
                    'gethealth', 'getchats']
                },
                'private': {
                    'get': ['getpermissions', 'getbalance', 'getcollateral', 'getcollateralaccounts', 'getaddresses', 'getcoinins', 'getcoinouts', 'getbankaccounts', 'getdeposits', 'getwithdrawals', 'getchildorders', 'getparentorders', 'getparentorder', 'getexecutions', 'getpositions', 'gettradingcommission'],
                    'post': ['sendcoin', 'withdraw', 'sendchildorder', 'cancelchildorder', 'sendparentorder', 'cancelparentorder', 'cancelallchildorders']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.25 / 100,
                    'taker': 0.25 / 100
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetMarkets();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['product_code'];
                let currencies = id.split('_');
                let base = undefined;
                let quote = undefined;
                let symbol = id;
                let numCurrencies = currencies.length;
                if (numCurrencies == 1) {
                    base = symbol.slice(0, 3);
                    quote = symbol.slice(3, 6);
                } else if (numCurrencies == 2) {
                    base = currencies[0];
                    quote = currencies[1];
                    symbol = base + '/' + quote;
                } else {
                    base = currencies[1];
                    quote = currencies[2];
                }
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetBalance();
            let balances = {};
            for (let b = 0; b < response.length; b++) {
                let account = response[b];
                let currency = account['currency_code'];
                balances[currency] = account;
            }
            let result = { 'info': response };
            let currencies = Object.keys(_this2.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this2.account();
                if (currency in balances) {
                    account['total'] = balances[currency]['amount'];
                    account['free'] = balances[currency]['available'];
                    account['used'] = account['total'] - account['free'];
                }
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetBoard(_this3.extend({
                'product_code': _this3.marketId(symbol)
            }, params));
            return _this3.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'size');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let ticker = yield _this4.publicGetTicker(_this4.extend({
                'product_code': _this4.marketId(symbol)
            }, params));
            let timestamp = _this4.parse8601(ticker['timestamp']);
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['best_bid']),
                'ask': parseFloat(ticker['best_ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['ltp']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume_by_product']),
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        let side = undefined;
        let order = undefined;
        if ('side' in trade) if (trade['side']) {
            side = trade['side'].toLowerCase();
            let id = side + '_child_order_acceptance_id';
            if (id in trade) order = trade[id];
        }
        let timestamp = this.parse8601(trade['exec_date']);
        return {
            'id': trade['id'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'order': order,
            'type': undefined,
            'side': side,
            'price': trade['price'],
            'amount': trade['size']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetExecutions(_this5.extend({
                'product_code': market['id']
            }, params));
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let order = {
                'product_code': _this6.marketId(symbol),
                'child_order_type': type.toUpperCase(),
                'side': side.toUpperCase(),
                'price': price,
                'size': amount
            };
            let result = yield _this6.privatePostSendchildorder(_this6.extend(order, params));
            return {
                'info': result,
                'id': result['child_order_acceptance_id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            return yield _this7.privatePostCancelchildorder(_this7.extend({
                'parent_order_id': id
            }, params));
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let response = yield _this8.privatePostWithdraw(_this8.extend({
                'currency_code': currency,
                'amount': amount
                // 'bank_account_id': 1234,
            }, params));
            return {
                'info': response,
                'id': response['message_id']
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let request = '/' + this.version + '/';
        if (api == 'private') request += 'me/';
        request += path;
        if (method == 'GET') {
            if (Object.keys(params).length) request += '?' + this.urlencode(params);
        }
        let url = this.urls['api'] + request;
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            body = this.json(params);
            let auth = [nonce, method, request, body].join('');
            headers = {
                'ACCESS-KEY': this.apiKey,
                'ACCESS-TIMESTAMP': nonce,
                'ACCESS-SIGN': this.hmac(this.encode(auth), this.encode(this.secret)),
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8}],20:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, NotSupported } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bithumb extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bithumb',
            'name': 'Bithumb',
            'countries': 'KR', // South Korea
            'rateLimit': 500,
            'hasCORS': true,
            'hasFetchTickers': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/30597177-ea800172-9d5e-11e7-804c-b9d4fa9b56b0.jpg',
                'api': {
                    'public': 'https://api.bithumb.com/public',
                    'private': 'https://api.bithumb.com'
                },
                'www': 'https://www.bithumb.com',
                'doc': 'https://www.bithumb.com/u1/US127'
            },
            'api': {
                'public': {
                    'get': ['ticker/{currency}', 'ticker/all', 'orderbook/{currency}', 'orderbook/all', 'recent_transactions/{currency}', 'recent_transactions/all']
                },
                'private': {
                    'post': ['info/account', 'info/balance', 'info/wallet_address', 'info/ticker', 'info/orders', 'info/user_transactions', 'trade/place', 'info/order_detail', 'trade/cancel', 'trade/btc_withdrawal', 'trade/krw_deposit', 'trade/krw_withdrawal', 'trade/market_buy', 'trade/market_sell']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.15 / 100,
                    'taker': 0.15 / 100
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetTickerAll();
            let currencies = Object.keys(markets['data']);
            let result = [];
            for (let i = 0; i < currencies.length; i++) {
                let id = currencies[i];
                if (id != 'date') {
                    let market = markets['data'][id];
                    let base = id;
                    let quote = 'KRW';
                    let symbol = id + '/' + quote;
                    result.push(_this.extend(_this.fees['trading'], {
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market,
                        'lot': undefined,
                        'active': true,
                        'precision': {
                            'amount': undefined,
                            'price': undefined
                        },
                        'limits': {
                            'amount': {
                                'min': undefined,
                                'max': undefined
                            },
                            'price': {
                                'min': undefined,
                                'max': undefined
                            },
                            'cost': {
                                'min': undefined,
                                'max': undefined
                            }
                        }
                    }));
                }
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostInfoBalance(_this2.extend({
                'currency': 'ALL'
            }, params));
            let result = { 'info': response };
            let balances = response['data'];
            let currencies = Object.keys(_this2.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this2.account();
                let lowercase = currency.toLowerCase();
                account['total'] = _this2.safeFloat(balances, 'total_' + lowercase);
                account['used'] = _this2.safeFloat(balances, 'in_use_' + lowercase);
                account['free'] = _this2.safeFloat(balances, 'available_' + lowercase);
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetOrderbookCurrency(_this3.extend({
                'count': 50, // max = 50
                'currency': market['base']
            }, params));
            let orderbook = response['data'];
            let timestamp = parseInt(orderbook['timestamp']);
            return _this3.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'quantity');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = parseInt(ticker['date']);
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'max_price'),
            'low': this.safeFloat(ticker, 'min_price'),
            'bid': this.safeFloat(ticker, 'buy_price'),
            'ask': this.safeFloat(ticker, 'sell_price'),
            'vwap': undefined,
            'open': this.safeFloat(ticker, 'opening_price'),
            'close': this.safeFloat(ticker, 'closing_price'),
            'first': undefined,
            'last': this.safeFloat(ticker, 'last_trade'),
            'change': undefined,
            'percentage': undefined,
            'average': this.safeFloat(ticker, 'average_price'),
            'baseVolume': this.safeFloat(ticker, 'volume_1day'),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.publicGetTickerAll(params);
            let result = {};
            let timestamp = response['data']['date'];
            let tickers = _this4.omit(response['data'], 'date');
            let ids = Object.keys(tickers);
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let symbol = id;
                let market = undefined;
                if (id in _this4.markets_by_id) {
                    market = _this4.markets_by_id[id];
                    symbol = market['symbol'];
                }
                let ticker = tickers[id];
                ticker['date'] = timestamp;
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetTickerCurrency(_this5.extend({
                'currency': market['base']
            }, params));
            return _this5.parseTicker(response['data'], market);
        })();
    }

    parseTrade(trade, market) {
        // a workaround for their bug in date format, hours are not 0-padded
        let [transaction_date, transaction_time] = trade['transaction_date'].split(' ');
        let transaction_time_short = transaction_time.length < 8;
        if (transaction_time_short) transaction_time = '0' + transaction_time;
        let timestamp = this.parse8601(transaction_date + ' ' + transaction_time);
        let side = trade['type'] == 'ask' ? 'sell' : 'buy';
        return {
            'id': undefined,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'order': undefined,
            'type': undefined,
            'side': side,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['units_traded'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetRecentTransactionsCurrency(_this6.extend({
                'currency': market['base'],
                'count': 100 // max = 100
            }, params));
            return _this6.parseTrades(response['data'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        throw new NotSupported(this.id + ' private API not implemented yet');
        //     let prefix = '';
        //     if (type == 'market')
        //         prefix = 'market_';
        //     let order = {
        //         'pair': this.marketId (symbol),
        //         'quantity': amount,
        //         'price': price || 0,
        //         'type': prefix + side,
        //     };
        //     let response = await this.privatePostOrderCreate (this.extend (order, params));
        //     return {
        //         'info': response,
        //         'id': response['order_id'].toString (),
        //     };
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let side = 'side' in params;
            if (!side) throw new ExchangeError(_this7.id + ' cancelOrder requires a side parameter (sell or buy)');
            side = side == 'buy' ? 'purchase' : 'sales';
            let currency = 'currency' in params;
            if (!currency) throw new ExchangeError(_this7.id + ' cancelOrder requires a currency parameter');
            return yield _this7.privatePostTradeCancel({
                'order_id': id,
                'type': params['side'],
                'currency': params['currency']
            });
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let endpoint = '/' + this.implodeParams(path, params);
        let url = this.urls['api'][api] + endpoint;
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            body = this.urlencode(this.extend({
                'endpoint': endpoint
            }, query));
            let nonce = this.nonce().toString();
            let auth = endpoint + "\0" + body + "\0" + nonce;
            let signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha512');
            headers = {
                'Api-Key': this.apiKey,
                'Api-Sign': this.decode(this.stringToBase64(this.encode(signature))),
                'Api-Nonce': nonce
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if ('status' in response) {
                if (response['status'] == '0000') return response;
                throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],21:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { NotSupported } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bitlish extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitlish',
            'name': 'Bitlish',
            'countries': ['GB', 'EU', 'RU'],
            'rateLimit': 1500,
            'version': 'v1',
            'hasCORS': false,
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766275-dcfc6c30-5ed3-11e7-839d-00a846385d0b.jpg',
                'api': 'https://bitlish.com/api',
                'www': 'https://bitlish.com',
                'doc': 'https://bitlish.com/api'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': false
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'taker': 0.3 / 100, // anonymous 0.3%, verified 0.2%
                    'maker': 0
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BTC': 0.001,
                        'LTC': 0.001,
                        'DOGE': 0.001,
                        'ETH': 0.001,
                        'XMR': 0,
                        'ZEC': 0.001,
                        'DASH': 0.0001,
                        'EUR': 50
                    },
                    'deposit': {
                        'BTC': 0,
                        'LTC': 0,
                        'DOGE': 0,
                        'ETH': 0,
                        'XMR': 0,
                        'ZEC': 0,
                        'DASH': 0,
                        'EUR': 0
                    }
                }
            },
            'api': {
                'public': {
                    'get': ['instruments', 'ohlcv', 'pairs', 'tickers', 'trades_depth', 'trades_history'],
                    'post': ['instruments', 'ohlcv', 'pairs', 'tickers', 'trades_depth', 'trades_history']
                },
                'private': {
                    'post': ['accounts_operations', 'balance', 'cancel_trade', 'cancel_trades_by_ids', 'cancel_all_trades', 'create_bcode', 'create_template_wallet', 'create_trade', 'deposit', 'list_accounts_operations_from_ts', 'list_active_trades', 'list_bcodes', 'list_my_matches_from_ts', 'list_my_trades', 'list_my_trads_from_ts', 'list_payment_methods', 'list_payments', 'redeem_code', 'resign', 'signin', 'signout', 'trade_details', 'trade_options', 'withdraw', 'withdraw_by_id']
                }
            }
        });
    }

    commonCurrencyCode(currency) {
        if (!this.substituteCommonCurrencyCodes) return currency;
        if (currency == 'XBT') return 'BTC';
        if (currency == 'BCC') return 'BCH';
        if (currency == 'DRK') return 'DASH';
        if (currency == 'DSH') currency = 'DASH';
        if (currency == 'XDG') currency = 'DOGE';
        return currency;
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetPairs();
            let result = [];
            let keys = Object.keys(markets);
            for (let p = 0; p < keys.length; p++) {
                let market = markets[keys[p]];
                let id = market['id'];
                let symbol = market['name'];
                let [base, quote] = symbol.split('/');
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    parseTicker(ticker, market) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'high': this.safeFloat(ticker, 'max'),
            'low': this.safeFloat(ticker, 'min'),
            'bid': undefined,
            'ask': undefined,
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': this.safeFloat(ticker, 'first'),
            'last': this.safeFloat(ticker, 'last'),
            'change': undefined,
            'percentage': this.safeFloat(ticker, 'prc'),
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'sum'),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let tickers = yield _this2.publicGetTickers(params);
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = _this2.markets_by_id[id];
                let symbol = market['symbol'];
                let ticker = tickers[id];
                result[symbol] = _this2.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let tickers = yield _this3.publicGetTickers(params);
            let ticker = tickers[market['id']];
            return _this3.parseTicker(ticker, market);
        })();
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            // let market = this.market (symbol);
            let now = _this4.seconds();
            let start = now - 86400 * 30; // last 30 days
            let interval = [start.toString(), undefined];
            return yield _this4.publicPostOhlcv(_this4.extend({
                'time_range': interval
            }, params));
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let orderbook = yield _this5.publicGetTradesDepth(_this5.extend({
                'pair_id': _this5.marketId(symbol)
            }, params));
            let timestamp = undefined;
            let last = _this5.safeInteger(orderbook, 'last');
            if (last) timestamp = parseInt(last / 1000);
            return _this5.parseOrderBook(orderbook, timestamp, 'bid', 'ask', 'price', 'volume');
        })();
    }

    parseTrade(trade, market = undefined) {
        let side = trade['dir'] == 'bid' ? 'buy' : 'sell';
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let timestamp = parseInt(trade['created'] / 1000);
        return {
            'id': undefined,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'order': undefined,
            'type': undefined,
            'side': side,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetTradesHistory(_this6.extend({
                'pair_id': market['id']
            }, params));
            return _this6.parseTrades(response['list'], market, since, limit);
        })();
    }

    fetchBalance(params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let response = yield _this7.privatePostBalance();
            let result = { 'info': response };
            let currencies = Object.keys(response);
            let balance = {};
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                let account = response[currency];
                currency = currency.toUpperCase();
                // issue #4 bitlish names Dash as DSH, instead of DASH
                if (currency == 'DSH') currency = 'DASH';
                if (currency == 'XDG') currency = 'DOGE';
                balance[currency] = account;
            }
            currencies = Object.keys(_this7.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this7.account();
                if (currency in balance) {
                    account['free'] = parseFloat(balance[currency]['funds']);
                    account['used'] = parseFloat(balance[currency]['holded']);
                    account['total'] = _this7.sum(account['free'], account['used']);
                }
                result[currency] = account;
            }
            return _this7.parseBalance(result);
        })();
    }

    signIn() {
        return this.privatePostSignin({
            'login': this.login,
            'passwd': this.password
        });
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let order = {
                'pair_id': _this8.marketId(symbol),
                'dir': side == 'buy' ? 'bid' : 'ask',
                'amount': amount
            };
            if (type == 'limit') order['price'] = price;
            let result = yield _this8.privatePostCreateTrade(_this8.extend(order, params));
            return {
                'info': result,
                'id': result['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            return yield _this9.privatePostCancelTrade({ 'id': id });
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            if (currency != 'BTC') {
                // they did not document other types...
                throw new NotSupported(_this10.id + ' currently supports BTC withdrawals only, until they document other currencies...');
            }
            let response = yield _this10.privatePostWithdraw(_this10.extend({
                'currency': currency.toLowerCase(),
                'amount': parseFloat(amount),
                'account': address,
                'payment_method': 'bitcoin' // they did not document other types...
            }, params));
            return {
                'info': response,
                'id': response['message_id']
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + path;
        if (api == 'public') {
            if (method == 'GET') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                body = this.json(params);
                headers = { 'Content-Type': 'application/json' };
            }
        } else {
            this.checkRequiredCredentials();
            body = this.json(this.extend({ 'token': this.apiKey }, params));
            headers = { 'Content-Type': 'application/json' };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],22:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bitmarket extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitmarket',
            'name': 'BitMarket',
            'countries': ['PL', 'EU'],
            'rateLimit': 1500,
            'hasCORS': false,
            'hasFetchOHLCV': true,
            'hasWithdraw': true,
            'timeframes': {
                '90m': '90m',
                '6h': '6h',
                '1d': '1d',
                '1w': '7d',
                '1M': '1m',
                '3M': '3m',
                '6M': '6m',
                '1y': '1y'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27767256-a8555200-5ef9-11e7-96fd-469a65e2b0bd.jpg',
                'api': {
                    'public': 'https://www.bitmarket.net',
                    'private': 'https://www.bitmarket.pl/api2/' // last slash is critical
                },
                'www': ['https://www.bitmarket.pl', 'https://www.bitmarket.net'],
                'doc': ['https://www.bitmarket.net/docs.php?file=api_public.html', 'https://www.bitmarket.net/docs.php?file=api_private.html', 'https://github.com/bitmarket-net/api']
            },
            'api': {
                'public': {
                    'get': ['json/{market}/ticker', 'json/{market}/orderbook', 'json/{market}/trades', 'json/ctransfer', 'graphs/{market}/90m', 'graphs/{market}/6h', 'graphs/{market}/1d', 'graphs/{market}/7d', 'graphs/{market}/1m', 'graphs/{market}/3m', 'graphs/{market}/6m', 'graphs/{market}/1y']
                },
                'private': {
                    'post': ['info', 'trade', 'cancel', 'orders', 'trades', 'history', 'withdrawals', 'tradingdesk', 'tradingdeskStatus', 'tradingdeskConfirm', 'cryptotradingdesk', 'cryptotradingdeskStatus', 'cryptotradingdeskConfirm', 'withdraw', 'withdrawFiat', 'withdrawPLNPP', 'withdrawFiatFast', 'deposit', 'transfer', 'transfers', 'marginList', 'marginOpen', 'marginClose', 'marginCancel', 'marginModify', 'marginBalanceAdd', 'marginBalanceRemove', 'swapList', 'swapOpen', 'swapClose']
                }
            },
            'markets': {
                'BCH/PLN': { 'id': 'BCCPLN', 'symbol': 'BCH/PLN', 'base': 'BCH', 'quote': 'PLN' },
                'BTG/PLN': { 'id': 'BTGPLN', 'symbol': 'BTG/PLN', 'base': 'BTG', 'quote': 'PLN' },
                'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
                'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
                'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },
                'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
                'LiteMineX/BTC': { 'id': 'LiteMineXBTC', 'symbol': 'LiteMineX/BTC', 'base': 'LiteMineX', 'quote': 'BTC' }
            },
            'fees': {
                'trading': {
                    'tierBased': true,
                    'percentage': true,
                    'taker': 0.45 / 100,
                    'maker': 0.15 / 100,
                    'tiers': {
                        'taker': [[0, 0.45 / 100], [99.99, 0.44 / 100], [299.99, 0.43 / 100], [499.99, 0.42 / 100], [999.99, 0.41 / 100], [1999.99, 0.40 / 100], [2999.99, 0.39 / 100], [4999.99, 0.38 / 100], [9999.99, 0.37 / 100], [19999.99, 0.36 / 100], [29999.99, 0.35 / 100], [49999.99, 0.34 / 100], [99999.99, 0.33 / 100], [199999.99, 0.32 / 100], [299999.99, 0.31 / 100], [499999.99, 0.0 / 100]],
                        'maker': [[0, 0.15 / 100], [99.99, 0.14 / 100], [299.99, 0.13 / 100], [499.99, 0.12 / 100], [999.99, 0.11 / 100], [1999.99, 0.10 / 100], [2999.99, 0.9 / 100], [4999.99, 0.8 / 100], [9999.99, 0.7 / 100], [19999.99, 0.6 / 100], [29999.99, 0.5 / 100], [49999.99, 0.4 / 100], [99999.99, 0.3 / 100], [199999.99, 0.2 / 100], [299999.99, 0.1 / 100], [499999.99, 0.0 / 100]]
                    }
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BTC': 0.0008,
                        'LTC': 0.005,
                        'BCH': 0.0008,
                        'BTG': 0.0008,
                        'DOGE': 1,
                        'EUR': 2,
                        'PLN': 2
                    },
                    'deposit': {
                        'BTC': 0,
                        'LTC': 0,
                        'BCH': 0,
                        'BTG': 0,
                        'DOGE': 25,
                        'EUR': 2, // SEPA. Transfer INT (SHA): 5 EUR
                        'PLN': 0
                    }
                }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            yield _this.loadMarkets();
            let response = yield _this.privatePostInfo();
            let data = response['data'];
            let balance = data['balances'];
            let result = { 'info': data };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this.account();
                if (currency in balance['available']) account['free'] = balance['available'][currency];
                if (currency in balance['blocked']) account['used'] = balance['blocked'][currency];
                account['total'] = _this.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this2.publicGetJsonMarketOrderbook(_this2.extend({
                'market': _this2.marketId(symbol)
            }, params));
            let timestamp = _this2.milliseconds();
            return {
                'bids': orderbook['bids'],
                'asks': orderbook['asks'],
                'timestamp': timestamp,
                'datetime': _this2.iso8601(timestamp)
            };
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let ticker = yield _this3.publicGetJsonMarketTicker(_this3.extend({
                'market': _this3.marketId(symbol)
            }, params));
            let timestamp = _this3.milliseconds();
            let vwap = parseFloat(ticker['vwap']);
            let baseVolume = parseFloat(ticker['volume']);
            let quoteVolume = baseVolume * vwap;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': vwap,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        let side = trade['type'] == 'bid' ? 'buy' : 'sell';
        let timestamp = trade['date'] * 1000;
        return {
            'id': trade['tid'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'order': undefined,
            'type': undefined,
            'side': side,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetJsonMarketTrades(_this4.extend({
                'market': market['id']
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '90m', since = undefined, limit = undefined) {
        return [ohlcv['time'] * 1000, parseFloat(ohlcv['open']), parseFloat(ohlcv['high']), parseFloat(ohlcv['low']), parseFloat(ohlcv['close']), parseFloat(ohlcv['vol'])];
    }

    fetchOHLCV(symbol, timeframe = '90m', since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let method = 'publicGetGraphsMarket' + _this5.timeframes[timeframe];
            let market = _this5.market(symbol);
            let response = yield _this5[method](_this5.extend({
                'market': market['id']
            }, params));
            return _this5.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this6.privatePostTrade(_this6.extend({
                'market': _this6.marketId(symbol),
                'type': side,
                'amount': amount,
                'rate': price
            }, params));
            let result = {
                'info': response
            };
            if ('id' in response['order']) result['id'] = response['id'];
            return result;
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            return yield _this7.privatePostCancel({ 'id': id });
        })();
    }

    isFiat(currency) {
        if (currency == 'EUR') return true;
        if (currency == 'PLN') return true;
        return false;
    }

    withdraw(currency, amount, address, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let method = undefined;
            let request = {
                'currency': currency,
                'quantity': amount
            };
            if (_this8.isFiat(currency)) {
                method = 'privatePostWithdrawFiat';
                if ('account' in params) {
                    request['account'] = params['account']; // bank account code for withdrawal
                } else {
                    throw new ExchangeError(_this8.id + ' requires account parameter to withdraw fiat currency');
                }
                if ('account2' in params) {
                    request['account2'] = params['account2']; // bank SWIFT code (EUR only)
                } else {
                    if (currency == 'EUR') throw new ExchangeError(_this8.id + ' requires account2 parameter to withdraw EUR');
                }
                if ('withdrawal_note' in params) {
                    request['withdrawal_note'] = params['withdrawal_note']; // a 10-character user-specified withdrawal note (PLN only)
                } else {
                    if (currency == 'PLN') throw new ExchangeError(_this8.id + ' requires withdrawal_note parameter to withdraw PLN');
                }
            } else {
                method = 'privatePostWithdraw';
                request['address'] = address;
            }
            let response = yield _this8[method](_this8.extend(request, params));
            return {
                'info': response,
                'id': response
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        if (api == 'public') {
            url += '/' + this.implodeParams(path + '.json', params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let query = this.extend({
                'tonce': nonce,
                'method': path
            }, params);
            body = this.urlencode(query);
            headers = {
                'API-Key': this.apiKey,
                'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],23:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bitmex extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitmex',
            'name': 'BitMEX',
            'countries': 'SC', // Seychelles
            'version': 'v1',
            'userAgent': undefined,
            'rateLimit': 1500,
            'hasCORS': false,
            'hasFetchOHLCV': true,
            'hasWithdraw': true,
            'timeframes': {
                '1m': '1m',
                '5m': '5m',
                '1h': '1h',
                '1d': '1d'
            },
            'urls': {
                'test': 'https://testnet.bitmex.com',
                'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',
                'api': 'https://www.bitmex.com',
                'www': 'https://www.bitmex.com',
                'doc': ['https://www.bitmex.com/app/apiOverview', 'https://github.com/BitMEX/api-connectors/tree/master/official-http']
            },
            'api': {
                'public': {
                    'get': ['announcement', 'announcement/urgent', 'funding', 'instrument', 'instrument/active', 'instrument/activeAndIndices', 'instrument/activeIntervals', 'instrument/compositeIndex', 'instrument/indices', 'insurance', 'leaderboard', 'liquidation', 'orderBook', 'orderBook/L2', 'quote', 'quote/bucketed', 'schema', 'schema/websocketHelp', 'settlement', 'stats', 'stats/history', 'trade', 'trade/bucketed']
                },
                'private': {
                    'get': ['apiKey', 'chat', 'chat/channels', 'chat/connected', 'execution', 'execution/tradeHistory', 'notification', 'order', 'position', 'user', 'user/affiliateStatus', 'user/checkReferralCode', 'user/commission', 'user/depositAddress', 'user/margin', 'user/minWithdrawalFee', 'user/wallet', 'user/walletHistory', 'user/walletSummary'],
                    'post': ['apiKey', 'apiKey/disable', 'apiKey/enable', 'chat', 'order', 'order/bulk', 'order/cancelAllAfter', 'order/closePosition', 'position/isolate', 'position/leverage', 'position/riskLimit', 'position/transferMargin', 'user/cancelWithdrawal', 'user/confirmEmail', 'user/confirmEnableTFA', 'user/confirmWithdrawal', 'user/disableTFA', 'user/logout', 'user/logoutAll', 'user/preferences', 'user/requestEnableTFA', 'user/requestWithdrawal'],
                    'put': ['order', 'order/bulk', 'user'],
                    'delete': ['apiKey', 'order', 'order/all']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetInstrumentActiveAndIndices();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let active = market['state'] != 'Unlisted';
                let id = market['symbol'];
                let base = market['underlying'];
                let quote = market['quoteCurrency'];
                let type = undefined;
                let future = false;
                let prediction = false;
                let basequote = base + quote;
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let swap = id == basequote;
                let symbol = id;
                if (swap) {
                    type = 'swap';
                    symbol = base + '/' + quote;
                } else if (id.indexOf('B_') >= 0) {
                    prediction = true;
                    type = 'prediction';
                } else {
                    future = true;
                    type = 'future';
                }
                let maker = market['makerFee'];
                let taker = market['takerFee'];
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'active': active,
                    'taker': taker,
                    'maker': maker,
                    'type': type,
                    'spot': false,
                    'swap': swap,
                    'future': future,
                    'prediction': prediction,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetUserMargin({ 'currency': 'all' });
            let result = { 'info': response };
            for (let b = 0; b < response.length; b++) {
                let balance = response[b];
                let currency = balance['currency'].toUpperCase();
                currency = _this2.commonCurrencyCode(currency);
                let account = {
                    'free': balance['availableMargin'],
                    'used': 0.0,
                    'total': balance['amount']
                };
                if (currency == 'BTC') {
                    account['free'] = account['free'] * 0.00000001;
                    account['total'] = account['total'] * 0.00000001;
                }
                account['used'] = account['total'] - account['free'];
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetOrderBookL2(_this3.extend({
                'symbol': _this3.marketId(symbol)
            }, params));
            let timestamp = _this3.milliseconds();
            let result = {
                'bids': [],
                'asks': [],
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp)
            };
            for (let o = 0; o < orderbook.length; o++) {
                let order = orderbook[o];
                let side = order['side'] == 'Sell' ? 'asks' : 'bids';
                let amount = order['size'];
                let price = order['price'];
                result[side].push([price, amount]);
            }
            result['bids'] = _this3.sortBy(result['bids'], 0, true);
            result['asks'] = _this3.sortBy(result['asks'], 0);
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            if (!market['active']) throw new ExchangeError(_this4.id + ': symbol ' + symbol + ' is delisted');
            let request = _this4.extend({
                'symbol': market['id'],
                'binSize': '1d',
                'partial': true,
                'count': 1,
                'reverse': true
            }, params);
            let quotes = yield _this4.publicGetQuoteBucketed(request);
            let quotesLength = quotes.length;
            let quote = quotes[quotesLength - 1];
            let tickers = yield _this4.publicGetTradeBucketed(request);
            let ticker = tickers[0];
            let timestamp = _this4.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(quote['bidPrice']),
                'ask': parseFloat(quote['askPrice']),
                'vwap': parseFloat(ticker['vwap']),
                'open': undefined,
                'close': parseFloat(ticker['close']),
                'first': undefined,
                'last': undefined,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['homeNotional']),
                'quoteVolume': parseFloat(ticker['foreignNotional']),
                'info': ticker
            };
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        let timestamp = this.parse8601(ohlcv['timestamp']);
        return [timestamp, ohlcv['open'], ohlcv['high'], ohlcv['low'], ohlcv['close'], ohlcv['volume']];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            // send JSON key/value pairs, such as {"key": "value"}
            // filter by individual fields and do advanced queries on timestamps
            // let filter = { 'key': 'value' };
            // send a bare series (e.g. XBU) to nearest expiring contract in that series
            // you can also send a timeframe, e.g. XBU:monthly
            // timeframes: daily, weekly, monthly, quarterly, and biquarterly
            let market = _this5.market(symbol);
            let request = {
                'symbol': market['id'],
                'binSize': _this5.timeframes[timeframe],
                'partial': true // true == include yet-incomplete current bins
                // 'filter': filter, // filter by individual fields and do advanced queries
                // 'columns': [],    // will return all columns if omitted
                // 'start': 0,       // starting point for results (wtf?)
                // 'reverse': false, // true == newest first
                // 'endTime': '',    // ending date filter for results
            };
            if (since) {
                let ymdhms = _this5.YmdHMS(since);
                let ymdhm = ymdhms.slice(0, 16);
                request['startTime'] = ymdhm; // starting date filter for results
            }
            if (limit) request['count'] = limit; // default 100
            let response = yield _this5.publicGetTradeBucketed(_this5.extend(request, params));
            return _this5.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = this.parse8601(trade['timestamp']);
        let symbol = undefined;
        if (!market) {
            if ('symbol' in trade) market = this.markets_by_id[trade['symbol']];
        }
        if (market) symbol = market['symbol'];
        return {
            'id': trade['trdMatchID'],
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'order': undefined,
            'type': undefined,
            'side': trade['side'].toLowerCase(),
            'price': trade['price'],
            'amount': trade['size']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetTrade(_this6.extend({
                'symbol': market['id']
            }, params));
            return _this6.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let order = {
                'symbol': _this7.marketId(symbol),
                'side': _this7.capitalize(side),
                'orderQty': amount,
                'ordType': _this7.capitalize(type)
            };
            if (type == 'limit') order['price'] = price;
            let response = yield _this7.privatePostOrder(_this7.extend(order, params));
            return {
                'info': response,
                'id': response['orderID']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            return yield _this8.privateDeleteOrder({ 'orderID': id });
        })();
    }

    isFiat(currency) {
        if (currency == 'EUR') return true;
        if (currency == 'PLN') return true;
        return false;
    }

    withdraw(currency, amount, address, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            if (currency != 'BTC') throw new ExchangeError(_this9.id + ' supoprts BTC withdrawals only, other currencies coming soon...');
            let request = {
                'currency': 'XBt', // temporarily
                'amount': amount,
                'address': address
                // 'otpToken': '123456', // requires if two-factor auth (OTP) is enabled
                // 'fee': 0.001, // bitcoin network fee
            };
            let response = yield _this9.privatePostUserRequestWithdrawal(_this9.extend(request, params));
            return {
                'info': response,
                'id': response['transactID']
            };
        })();
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code >= 400) {
            if (body) {
                if (body[0] == "{") {
                    let response = JSON.parse(body);
                    if ('error' in response) {
                        if ('message' in response['error']) {
                            throw new ExchangeError(this.id + ' ' + this.json(response));
                        }
                    }
                }
                throw new ExchangeError(this.id + ' ' + body);
            }
            throw new ExchangeError(this.id + ' returned an empty response');
        }
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let query = '/api' + '/' + this.version + '/' + path;
        if (Object.keys(params).length) query += '?' + this.urlencode(params);
        let url = this.urls['api'] + query;
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let auth = method + query + nonce;
            if (method == 'POST') {
                if (Object.keys(params).length) {
                    body = this.json(params);
                    auth += body;
                }
            }
            headers = {
                'Content-Type': 'application/json',
                'api-nonce': nonce,
                'api-key': this.apiKey,
                'api-signature': this.hmac(this.encode(auth), this.encode(this.secret))
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],24:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bitso extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitso',
            'name': 'Bitso',
            'countries': 'MX', // Mexico
            'rateLimit': 2000, // 30 requests per minute
            'version': 'v3',
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766335-715ce7aa-5ed5-11e7-88a8-173a27bb30fe.jpg',
                'api': 'https://api.bitso.com',
                'www': 'https://bitso.com',
                'doc': 'https://bitso.com/api_info'
            },
            'api': {
                'public': {
                    'get': ['available_books', 'ticker', 'order_book', 'trades']
                },
                'private': {
                    'get': ['account_status', 'balance', 'fees', 'fundings', 'fundings/{fid}', 'funding_destination', 'kyc_documents', 'ledger', 'ledger/trades', 'ledger/fees', 'ledger/fundings', 'ledger/withdrawals', 'mx_bank_codes', 'open_orders', 'order_trades/{oid}', 'orders/{oid}', 'user_trades', 'user_trades/{tid}', 'withdrawals/', 'withdrawals/{wid}'],
                    'post': ['bitcoin_withdrawal', 'debit_card_withdrawal', 'ether_withdrawal', 'orders', 'phone_number', 'phone_verification', 'phone_withdrawal', 'spei_withdrawal'],
                    'delete': ['orders/{oid}', 'orders/all']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetAvailableBooks();
            let result = [];
            for (let i = 0; i < markets['payload'].length; i++) {
                let market = markets['payload'][i];
                let id = market['book'];
                let symbol = id.toUpperCase().replace('_', '/');
                let [base, quote] = symbol.split('/');
                let limits = {
                    'amount': {
                        'min': parseFloat(market['minimum_amount']),
                        'max': parseFloat(market['maximum_amount'])
                    },
                    'price': {
                        'min': parseFloat(market['minimum_price']),
                        'max': parseFloat(market['maximum_price'])
                    },
                    'cost': {
                        'min': parseFloat(market['minimum_value']),
                        'max': parseFloat(market['maximum_value'])
                    }
                };
                let precision = {
                    'amount': _this.precisionFromString(market['minimum_amount']),
                    'price': _this.precisionFromString(market['minimum_price'])
                };
                let lot = limits['amount']['min'];
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market,
                    'lot': lot,
                    'limits': limits,
                    'precision': precision
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetBalance();
            let balances = response['payload']['balances'];
            let result = { 'info': response };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'].toUpperCase();
                let account = {
                    'free': parseFloat(balance['available']),
                    'used': parseFloat(balance['locked']),
                    'total': parseFloat(balance['total'])
                };
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let response = yield _this3.publicGetOrderBook(_this3.extend({
                'book': _this3.marketId(symbol)
            }, params));
            let orderbook = response['payload'];
            let timestamp = _this3.parse8601(orderbook['updated_at']);
            return _this3.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.publicGetTicker(_this4.extend({
                'book': _this4.marketId(symbol)
            }, params));
            let ticker = response['payload'];
            let timestamp = _this4.parse8601(ticker['created_at']);
            let vwap = parseFloat(ticker['vwap']);
            let baseVolume = parseFloat(ticker['volume']);
            let quoteVolume = baseVolume * vwap;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': vwap,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = this.parse8601(trade['created_at']);
        let symbol = undefined;
        if (!market) {
            if ('book' in trade) market = this.markets_by_id[trade['book']];
        }
        if (market) symbol = market['symbol'];
        return {
            'id': trade['tid'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'order': undefined,
            'type': undefined,
            'side': trade['maker_side'],
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetTrades(_this5.extend({
                'book': market['id']
            }, params));
            return _this5.parseTrades(response['payload'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let order = {
                'book': _this6.marketId(symbol),
                'side': side,
                'type': type,
                'major': _this6.amountToPrecision(symbol, amount)
            };
            if (type == 'limit') order['price'] = _this6.priceToPrecision(symbol, price);
            let response = yield _this6.privatePostOrders(_this6.extend(order, params));
            return {
                'info': response,
                'id': response['payload']['oid']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            return yield _this7.privateDeleteOrders({ 'oid': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let query = '/' + this.version + '/' + this.implodeParams(path, params);
        let url = this.urls['api'] + query;
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let request = [nonce, method, query].join('');
            if (Object.keys(params).length) {
                body = this.json(params);
                request += body;
            }
            let signature = this.hmac(this.encode(request), this.encode(this.secret));
            let auth = this.apiKey + ':' + nonce + ':' + signature;
            headers = {
                'Authorization': "Bitso " + auth,
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if ('success' in response) if (response['success']) return response;
            throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],25:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bitstamp extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitstamp',
            'name': 'Bitstamp',
            'countries': 'GB',
            'rateLimit': 1000,
            'version': 'v2',
            'hasCORS': false,
            'hasFetchOrder': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',
                'api': 'https://www.bitstamp.net/api',
                'www': 'https://www.bitstamp.net',
                'doc': 'https://www.bitstamp.net/api'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true
            },
            'api': {
                'public': {
                    'get': ['order_book/{pair}/', 'ticker_hour/{pair}/', 'ticker/{pair}/', 'transactions/{pair}/', 'trading-pairs-info/']
                },
                'private': {
                    'post': ['balance/', 'balance/{pair}/', 'user_transactions/', 'user_transactions/{pair}/', 'open_orders/all/', 'open_orders/{pair}', 'order_status/', 'cancel_order/', 'buy/{pair}/', 'buy/market/{pair}/', 'sell/{pair}/', 'sell/market/{pair}/', 'ltc_withdrawal/', 'ltc_address/', 'eth_withdrawal/', 'eth_address/', 'transfer-to-main/', 'transfer-from-main/', 'xrp_withdrawal/', 'xrp_address/', 'withdrawal/open/', 'withdrawal/status/', 'withdrawal/cancel/', 'liquidation_address/new/', 'liquidation_address/info/']
                },
                'v1': {
                    'post': ['bitcoin_deposit_address/', 'unconfirmed_btc/', 'bitcoin_withdrawal/']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': true,
                    'percentage': true,
                    'taker': 0.25 / 100,
                    'maker': 0.25 / 100,
                    'tiers': {
                        'taker': [[0, 0.25 / 100], [20000, 0.24 / 100], [100000, 0.22 / 100], [400000, 0.20 / 100], [600000, 0.15 / 100], [1000000, 0.14 / 100], [2000000, 0.13 / 100], [4000000, 0.12 / 100], [20000000, 0.11 / 100], [20000001, 0.10 / 100]],
                        'maker': [[0, 0.25 / 100], [20000, 0.24 / 100], [100000, 0.22 / 100], [400000, 0.20 / 100], [600000, 0.15 / 100], [1000000, 0.14 / 100], [2000000, 0.13 / 100], [4000000, 0.12 / 100], [20000000, 0.11 / 100], [20000001, 0.10 / 100]]
                    }
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BTC': 0,
                        'LTC': 0,
                        'ETH': 0,
                        'XRP': 0,
                        'USD': 25,
                        'EUR': 0.90
                    },
                    'deposit': {
                        'BTC': 0,
                        'LTC': 0,
                        'ETH': 0,
                        'XRP': 0,
                        'USD': 25,
                        'EUR': 0
                    }
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetTradingPairsInfo();
            let result = [];
            for (let i = 0; i < markets.length; i++) {
                let market = markets[i];
                let symbol = market['name'];
                let [base, quote] = symbol.split('/');
                let id = market['url_symbol'];
                let precision = {
                    'amount': market['base_decimals'],
                    'price': market['counter_decimals']
                };
                let [cost, currency] = market['minimum_order'].split(' ');
                let active = market['trading'] == 'Enabled';
                let lot = Math.pow(10, -precision['amount']);
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market,
                    'lot': lot,
                    'active': active,
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': lot,
                            'max': undefined
                        },
                        'price': {
                            'min': Math.pow(10, -precision['price']),
                            'max': undefined
                        },
                        'cost': {
                            'min': parseFloat(cost),
                            'max': undefined
                        }
                    }
                });
            }
            return result;
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let orderbook = yield _this2.publicGetOrderBookPair(_this2.extend({
                'pair': _this2.marketId(symbol)
            }, params));
            let timestamp = parseInt(orderbook['timestamp']) * 1000;
            return _this2.parseOrderBook(orderbook, timestamp);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let ticker = yield _this3.publicGetTickerPair(_this3.extend({
                'pair': _this3.marketId(symbol)
            }, params));
            let timestamp = parseInt(ticker['timestamp']) * 1000;
            let vwap = parseFloat(ticker['vwap']);
            let baseVolume = parseFloat(ticker['volume']);
            let quoteVolume = baseVolume * vwap;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': vwap,
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = undefined;
        if ('date' in trade) {
            timestamp = parseInt(trade['date']) * 1000;
        } else if ('datetime' in trade) {
            // timestamp = this.parse8601 (trade['datetime']);
            timestamp = parseInt(trade['datetime']) * 1000;
        }
        let side = trade['type'] == 0 ? 'buy' : 'sell';
        let order = undefined;
        if ('order_id' in trade) order = trade['order_id'].toString();
        if ('currency_pair' in trade) {
            if (trade['currency_pair'] in this.markets_by_id) market = this.markets_by_id[trade['currency_pair']];
        }
        return {
            'id': trade['tid'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'order': order,
            'type': undefined,
            'side': side,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTransactionsPair(_this4.extend({
                'pair': market['id'],
                'time': 'minute'
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    fetchBalance(params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let balance = yield _this5.privatePostBalance();
            let result = { 'info': balance };
            let currencies = Object.keys(_this5.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let total = lowercase + '_balance';
                let free = lowercase + '_available';
                let used = lowercase + '_reserved';
                let account = _this5.account();
                if (free in balance) account['free'] = parseFloat(balance[free]);
                if (used in balance) account['used'] = parseFloat(balance[used]);
                if (total in balance) account['total'] = parseFloat(balance[total]);
                result[currency] = account;
            }
            return _this5.parseBalance(result);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let method = 'privatePost' + _this6.capitalize(side);
            let order = {
                'pair': _this6.marketId(symbol),
                'amount': amount
            };
            if (type == 'market') method += 'Market';else order['price'] = price;
            method += 'Pair';
            let response = yield _this6[method](_this6.extend(order, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            return yield _this7.privatePostCancelOrder({ 'id': id });
        })();
    }

    parseOrderStatus(order) {
        if (order['status'] == 'Queue' || order['status'] == 'Open') return 'open';
        if (order['status'] == 'Finished') return 'closed';
        return order['status'];
    }

    fetchOrderStatus(id, symbol = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let response = yield _this8.privatePostOrderStatus({ 'id': id });
            return _this8.parseOrderStatus(response);
        })();
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let market = undefined;
            if (symbol) market = _this9.market(symbol);
            let pair = market ? market['id'] : 'all';
            let request = _this9.extend({ 'pair': pair }, params);
            let response = yield _this9.privatePostOpenOrdersPair(request);
            return _this9.parseTrades(response, market, since, limit);
        })();
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            return yield _this10.privatePostOrderStatus({ 'id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/';
        if (api != 'v1') url += this.version + '/';
        url += this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let auth = nonce + this.uid + this.apiKey;
            let signature = this.encode(this.hmac(this.encode(auth), this.encode(this.secret)));
            query = this.extend({
                'key': this.apiKey,
                'signature': signature.toUpperCase(),
                'nonce': nonce
            }, query);
            body = this.urlencode(query);
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this11.fetch2(path, api, method, params, headers, body);
            if ('status' in response) if (response['status'] == 'error') throw new ExchangeError(_this11.id + ' ' + _this11.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],26:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, NotSupported, AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bitstamp1 extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bitstamp1',
            'name': 'Bitstamp v1',
            'countries': 'GB',
            'rateLimit': 1000,
            'version': 'v1',
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',
                'api': 'https://www.bitstamp.net/api',
                'www': 'https://www.bitstamp.net',
                'doc': 'https://www.bitstamp.net/api'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true
            },
            'api': {
                'public': {
                    'get': ['ticker', 'ticker_hour', 'order_book', 'transactions', 'eur_usd']
                },
                'private': {
                    'post': ['balance', 'user_transactions', 'open_orders', 'order_status', 'cancel_order', 'cancel_all_orders', 'buy', 'sell', 'bitcoin_deposit_address', 'unconfirmed_btc', 'ripple_withdrawal', 'ripple_address', 'withdrawal_requests', 'bitcoin_withdrawal']
                }
            },
            'markets': {
                'BTC/USD': { 'id': 'btcusd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },
                'BTC/EUR': { 'id': 'btceur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },
                'EUR/USD': { 'id': 'eurusd', 'symbol': 'EUR/USD', 'base': 'EUR', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },
                'XRP/USD': { 'id': 'xrpusd', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },
                'XRP/EUR': { 'id': 'xrpeur', 'symbol': 'XRP/EUR', 'base': 'XRP', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },
                'XRP/BTC': { 'id': 'xrpbtc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'maker': 0.0025, 'taker': 0.0025 },
                'LTC/USD': { 'id': 'ltcusd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },
                'LTC/EUR': { 'id': 'ltceur', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },
                'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'maker': 0.0025, 'taker': 0.0025 },
                'ETH/USD': { 'id': 'ethusd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },
                'ETH/EUR': { 'id': 'etheur', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },
                'ETH/BTC': { 'id': 'ethbtc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.0025, 'taker': 0.0025 }
            }
        });
    }

    fetchOrderBook(symbol, params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            if (symbol != 'BTC/USD') throw new ExchangeError(_this.id + ' ' + _this.version + " fetchOrderBook doesn't support " + symbol + ', use it for BTC/USD only');
            let orderbook = yield _this.publicGetOrderBook(params);
            let timestamp = parseInt(orderbook['timestamp']) * 1000;
            return _this.parseOrderBook(orderbook, timestamp);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            if (symbol != 'BTC/USD') throw new ExchangeError(_this2.id + ' ' + _this2.version + " fetchTicker doesn't support " + symbol + ', use it for BTC/USD only');
            let ticker = yield _this2.publicGetTicker(params);
            let timestamp = parseInt(ticker['timestamp']) * 1000;
            let vwap = parseFloat(ticker['vwap']);
            let baseVolume = parseFloat(ticker['volume']);
            let quoteVolume = baseVolume * vwap;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this2.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': vwap,
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = undefined;
        if ('date' in trade) {
            timestamp = parseInt(trade['date']) * 1000;
        } else if ('datetime' in trade) {
            // timestamp = this.parse8601 (trade['datetime']);
            timestamp = parseInt(trade['datetime']) * 1000;
        }
        let side = trade['type'] == 0 ? 'buy' : 'sell';
        let order = undefined;
        if ('order_id' in trade) order = trade['order_id'].toString();
        if ('currency_pair' in trade) {
            if (trade['currency_pair'] in this.markets_by_id) market = this.markets_by_id[trade['currency_pair']];
        }
        return {
            'id': trade['tid'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'order': order,
            'type': undefined,
            'side': side,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            if (symbol != 'BTC/USD') throw new ExchangeError(_this3.id + ' ' + _this3.version + " fetchTrades doesn't support " + symbol + ', use it for BTC/USD only');
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetTransactions(_this3.extend({
                'time': 'minute'
            }, params));
            return _this3.parseTrades(response, market, since, limit);
        })();
    }

    fetchBalance(params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let balance = yield _this4.privatePostBalance();
            let result = { 'info': balance };
            let currencies = Object.keys(_this4.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let total = lowercase + '_balance';
                let free = lowercase + '_available';
                let used = lowercase + '_reserved';
                let account = _this4.account();
                account['free'] = _this4.safeFloat(balance, free, 0.0);
                account['used'] = _this4.safeFloat(balance, used, 0.0);
                account['total'] = _this4.safeFloat(balance, total, 0.0);
                result[currency] = account;
            }
            return _this4.parseBalance(result);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            if (type != 'limit') throw new ExchangeError(_this5.id + ' ' + _this5.version + ' accepts limit orders only');
            if (symbol != 'BTC/USD') throw new ExchangeError(_this5.id + ' v1 supports BTC/USD orders only');
            let method = 'privatePost' + _this5.capitalize(side);
            let order = {
                'amount': amount,
                'price': price
            };
            let response = yield _this5[method](_this5.extend(order, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCancelOrder({ 'id': id });
        })();
    }

    parseOrderStatus(order) {
        if (order['status'] == 'Queue' || order['status'] == 'Open') return 'open';
        if (order['status'] == 'Finished') return 'closed';
        return order['status'];
    }

    fetchOrderStatus(id, symbol = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let response = yield _this7.privatePostOrderStatus({ 'id': id });
            return _this7.parseOrderStatus(response);
        })();
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let market = undefined;
            if (symbol) market = _this8.market(symbol);
            let pair = market ? market['id'] : 'all';
            let request = _this8.extend({ 'id': pair }, params);
            let response = yield _this8.privatePostOpenOrdersId(request);
            return _this8.parseTrades(response, market, since, limit);
        })();
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            throw new NotSupported(_this9.id + ' fetchOrder is not implemented yet');
            yield _this9.loadMarkets();
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let auth = nonce + this.uid + this.apiKey;
            let signature = this.encode(this.hmac(this.encode(auth), this.encode(this.secret)));
            query = this.extend({
                'key': this.apiKey,
                'signature': signature.toUpperCase(),
                'nonce': nonce
            }, query);
            body = this.urlencode(query);
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this10.fetch2(path, api, method, params, headers, body);
            if ('status' in response) if (response['status'] == 'error') throw new ExchangeError(_this10.id + ' ' + _this10.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],27:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, InvalidOrder, InsufficientFunds, OrderNotFound, DDoSProtection } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bittrex extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bittrex',
            'name': 'Bittrex',
            'countries': 'US',
            'version': 'v1.1',
            'rateLimit': 1500,
            'hasAlreadyAuthenticatedSuccessfully': false, // a workaround for APIKEY_INVALID
            'hasCORS': false,
            // obsolete metainfo interface
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'hasFetchOrder': true,
            'hasFetchOrders': true,
            'hasFetchClosedOrders': true,
            'hasFetchOpenOrders': true,
            'hasFetchMyTrades': false,
            'hasFetchCurrencies': true,
            'hasWithdraw': true,
            // new metainfo interface
            'has': {
                'fetchTickers': true,
                'fetchOHLCV': true,
                'fetchOrder': true,
                'fetchOrders': true,
                'fetchClosedOrders': 'emulated',
                'fetchOpenOrders': true,
                'fetchMyTrades': false,
                'fetchCurrencies': true,
                'withdraw': true
            },
            'timeframes': {
                '1m': 'oneMin',
                '5m': 'fiveMin',
                '30m': 'thirtyMin',
                '1h': 'hour',
                '1d': 'day'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766352-cf0b3c26-5ed5-11e7-82b7-f3826b7a97d8.jpg',
                'api': {
                    'public': 'https://bittrex.com/api',
                    'account': 'https://bittrex.com/api',
                    'market': 'https://bittrex.com/api',
                    'v2': 'https://bittrex.com/api/v2.0/pub'
                },
                'www': 'https://bittrex.com',
                'doc': ['https://bittrex.com/Home/Api', 'https://www.npmjs.org/package/node.bittrex.api'],
                'fees': ['https://bittrex.com/Fees', 'https://support.bittrex.com/hc/en-us/articles/115000199651-What-fees-does-Bittrex-charge-']
            },
            'api': {
                'v2': {
                    'get': ['currencies/GetBTCPrice', 'market/GetTicks', 'market/GetLatestTick', 'Markets/GetMarketSummaries', 'market/GetLatestTick']
                },
                'public': {
                    'get': ['currencies', 'markethistory', 'markets', 'marketsummaries', 'marketsummary', 'orderbook', 'ticker']
                },
                'account': {
                    'get': ['balance', 'balances', 'depositaddress', 'deposithistory', 'order', 'orderhistory', 'withdrawalhistory', 'withdraw']
                },
                'market': {
                    'get': ['buylimit', 'buymarket', 'cancel', 'openorders', 'selllimit', 'sellmarket']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'maker': 0.0025,
                    'taker': 0.0025
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BTC': 0.001,
                        'LTC': 0.01,
                        'DOGE': 2,
                        'VTC': 0.02,
                        'PPC': 0.02,
                        'FTC': 0.2,
                        'RDD': 2,
                        'NXT': 2,
                        'DASH': 0.002,
                        'POT': 0.002
                    },
                    'deposit': {
                        'BTC': 0,
                        'LTC': 0,
                        'DOGE': 0,
                        'VTC': 0,
                        'PPC': 0,
                        'FTC': 0,
                        'RDD': 0,
                        'NXT': 0,
                        'DASH': 0,
                        'POT': 0
                    }
                }
            }
        });
    }

    costToPrecision(symbol, cost) {
        return this.truncate(parseFloat(cost), this.markets[symbol]['precision']['price']);
    }

    feeToPrecision(symbol, fee) {
        return this.truncate(parseFloat(fee), this.markets[symbol]['precision']['price']);
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.v2GetMarketsGetMarketSummaries();
            let result = [];
            for (let i = 0; i < response['result'].length; i++) {
                let market = response['result'][i]['Market'];
                let id = market['MarketName'];
                let base = market['MarketCurrency'];
                let quote = market['BaseCurrency'];
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                let precision = {
                    'amount': 8,
                    'price': 8
                };
                let active = market['IsActive'];
                result.push(_this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'active': active,
                    'info': market,
                    'lot': Math.pow(10, -precision['amount']),
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': market['MinTradeSize'],
                            'max': undefined
                        },
                        'price': {
                            'min': undefined,
                            'max': undefined
                        }
                    }
                }));
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.accountGetBalances();
            let balances = response['result'];
            let result = { 'info': balances };
            let indexed = _this2.indexBy(balances, 'Currency');
            let keys = Object.keys(indexed);
            for (let i = 0; i < keys.length; i++) {
                let id = keys[i];
                let currency = _this2.commonCurrencyCode(id);
                let account = _this2.account();
                let balance = indexed[id];
                let free = parseFloat(balance['Available']);
                let total = parseFloat(balance['Balance']);
                let used = total - free;
                account['free'] = free;
                account['used'] = used;
                account['total'] = total;
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let response = yield _this3.publicGetOrderbook(_this3.extend({
                'market': _this3.marketId(symbol),
                'type': 'both'
            }, params));
            let orderbook = response['result'];
            if ('type' in params) {
                if (params['type'] == 'buy') {
                    orderbook = {
                        'buy': response['result'],
                        'sell': []
                    };
                } else if (params['type'] == 'sell') {
                    orderbook = {
                        'buy': [],
                        'sell': response['result']
                    };
                }
            }
            return _this3.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.parse8601(ticker['TimeStamp']);
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'High'),
            'low': this.safeFloat(ticker, 'Low'),
            'bid': this.safeFloat(ticker, 'Bid'),
            'ask': this.safeFloat(ticker, 'Ask'),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': this.safeFloat(ticker, 'Last'),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'Volume'),
            'quoteVolume': this.safeFloat(ticker, 'BaseVolume'),
            'info': ticker
        };
    }

    fetchCurrencies(params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this4.publicGetCurrencies(params);
            let currencies = response['result'];
            let result = {};
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let id = currency['Currency'];
                // todo: will need to rethink the fees
                // to add support for multiple withdrawal/deposit methods and
                // differentiated fees for each particular method
                let code = _this4.commonCurrencyCode(id);
                let precision = 8; // default precision, todo: fix "magic constants"
                result[code] = {
                    'id': id,
                    'code': code,
                    'info': currency,
                    'name': currency['CurrencyLong'],
                    'active': currency['IsActive'],
                    'status': 'ok',
                    'fee': currency['TxFee'], // todo: redesign
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'price': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        },
                        'withdraw': {
                            'min': currency['TxFee'],
                            'max': Math.pow(10, precision)
                        }
                    }
                };
            }
            return result;
        })();
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let response = yield _this5.publicGetMarketsummaries(params);
            let tickers = response['result'];
            let result = {};
            for (let t = 0; t < tickers.length; t++) {
                let ticker = tickers[t];
                let id = ticker['MarketName'];
                let market = undefined;
                let symbol = id;
                if (id in _this5.markets_by_id) {
                    market = _this5.markets_by_id[id];
                    symbol = market['symbol'];
                } else {
                    let [quote, base] = id.split('-');
                    base = _this5.commonCurrencyCode(base);
                    quote = _this5.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;
                }
                result[symbol] = _this5.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetMarketsummary(_this6.extend({
                'market': market['id']
            }, params));
            let ticker = response['result'][0];
            return _this6.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = this.parse8601(trade['TimeStamp']);
        let side = undefined;
        if (trade['OrderType'] == 'BUY') {
            side = 'buy';
        } else if (trade['OrderType'] == 'SELL') {
            side = 'sell';
        }
        let id = undefined;
        if ('Id' in trade) id = trade['Id'].toString();
        return {
            'id': id,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': 'limit',
            'side': side,
            'price': parseFloat(trade['Price']),
            'amount': parseFloat(trade['Quantity'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let response = yield _this7.publicGetMarkethistory(_this7.extend({
                'market': market['id']
            }, params));
            if ('result' in response) {
                if (typeof response['result'] != 'undefined') return _this7.parseTrades(response['result'], market, since, limit);
            }
            throw new ExchangeError(_this7.id + ' fetchTrades() returned undefined response');
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {
        let timestamp = this.parse8601(ohlcv['T']);
        return [timestamp, ohlcv['O'], ohlcv['H'], ohlcv['L'], ohlcv['C'], ohlcv['V']];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let market = _this8.market(symbol);
            let request = {
                'tickInterval': _this8.timeframes[timeframe],
                'marketName': market['id']
            };
            let response = yield _this8.v2GetMarketGetTicks(_this8.extend(request, params));
            if ('result' in response) {
                if (response['result']) return _this8.parseOHLCVs(response['result'], market, timeframe, since, limit);
            }
            throw new ExchangeError(_this8.id + ' returned an empty or unrecognized response: ' + _this8.json(response));
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let request = {};
            let market = undefined;
            if (symbol) {
                market = _this9.market(symbol);
                request['market'] = market['id'];
            }
            let response = yield _this9.marketGetOpenorders(_this9.extend(request, params));
            let orders = _this9.parseOrders(response['result'], market, since, limit);
            return _this9.filterOrdersBySymbol(orders, symbol);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let market = _this10.market(symbol);
            let method = 'marketGet' + _this10.capitalize(side) + type;
            let order = {
                'market': market['id'],
                'quantity': _this10.amountToPrecision(symbol, amount)
            };
            if (type == 'limit') order['rate'] = _this10.priceToPrecision(symbol, price);
            let response = yield _this10[method](_this10.extend(order, params));
            let result = {
                'info': response,
                'id': response['result']['uuid']
            };
            return result;
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            let response = undefined;
            try {
                response = yield _this11.marketGetCancel(_this11.extend({
                    'uuid': id
                }, params));
            } catch (e) {
                if (_this11.last_json_response) {
                    let message = _this11.safeString(_this11.last_json_response, 'message');
                    if (message == 'ORDER_NOT_OPEN') throw new InvalidOrder(_this11.id + ' cancelOrder() error: ' + _this11.last_http_response);
                    if (message == 'UUID_INVALID') throw new OrderNotFound(_this11.id + ' cancelOrder() error: ' + _this11.last_http_response);
                }
                throw e;
            }
            return response;
        })();
    }

    parseOrder(order, market = undefined) {
        let side = undefined;
        if ('OrderType' in order) side = order['OrderType'] == 'LIMIT_BUY' ? 'buy' : 'sell';
        if ('Type' in order) side = order['Type'] == 'LIMIT_BUY' ? 'buy' : 'sell';
        let status = 'open';
        if (order['Closed']) {
            status = 'closed';
        } else if (order['CancelInitiated']) {
            status = 'canceled';
        }
        let symbol = undefined;
        if (!market) {
            if ('Exchange' in order) if (order['Exchange'] in this.markets_by_id) market = this.markets_by_id[order['Exchange']];
        }
        if (market) symbol = market['symbol'];
        let timestamp = undefined;
        if ('Opened' in order) timestamp = this.parse8601(order['Opened']);
        if ('TimeStamp' in order) timestamp = this.parse8601(order['TimeStamp']);
        let fee = undefined;
        let commission = undefined;
        if ('Commission' in order) {
            commission = 'Commission';
        } else if ('CommissionPaid' in order) {
            commission = 'CommissionPaid';
        }
        if (commission) {
            fee = {
                'cost': parseFloat(order[commission]),
                'currency': market['quote']
            };
        }
        let price = this.safeFloat(order, 'Limit');
        let cost = this.safeFloat(order, 'Price');
        let amount = this.safeFloat(order, 'Quantity');
        let remaining = this.safeFloat(order, 'QuantityRemaining', 0.0);
        let filled = amount - remaining;
        if (!cost) {
            if (price && amount) cost = price * amount;
        }
        if (!price) {
            if (cost && filled) price = cost / filled;
        }
        let average = this.safeFloat(order, 'PricePerUnit');
        let result = {
            'info': order,
            'id': order['OrderUuid'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': 'limit',
            'side': side,
            'price': price,
            'cost': cost,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': fee
        };
        return result;
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            yield _this12.loadMarkets();
            let response = undefined;
            try {
                response = yield _this12.accountGetOrder(_this12.extend({ 'uuid': id }, params));
            } catch (e) {
                if (_this12.last_json_response) {
                    let message = _this12.safeString(_this12.last_json_response, 'message');
                    if (message == 'UUID_INVALID') throw new OrderNotFound(_this12.id + ' fetchOrder() error: ' + _this12.last_http_response);
                }
                throw e;
            }
            return _this12.parseOrder(response['result']);
        })();
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            yield _this13.loadMarkets();
            let request = {};
            let market = undefined;
            if (symbol) {
                market = _this13.market(symbol);
                request['market'] = market['id'];
            }
            let response = yield _this13.accountGetOrderhistory(_this13.extend(request, params));
            let orders = _this13.parseOrders(response['result'], market, since, limit);
            return _this13.filterOrdersBySymbol(orders, symbol);
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            let orders = yield _this14.fetchOrders(symbol, params);
            return _this14.filterBy(orders, 'status', 'closed');
        })();
    }

    currencyId(currency) {
        if (currency == 'BCH') return 'BCC';
        return currency;
    }

    fetchDepositAddress(currency, params = {}) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            let currencyId = _this15.currencyId(currency);
            let response = yield _this15.accountGetDepositaddress(_this15.extend({
                'currency': currencyId
            }, params));
            let address = _this15.safeString(response['result'], 'Address');
            let message = _this15.safeString(response, 'message');
            let status = 'ok';
            if (!address || message == 'ADDRESS_GENERATING') status = 'pending';
            return {
                'currency': currency,
                'address': address,
                'status': status,
                'info': response
            };
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this16 = this;

        return _asyncToGenerator(function* () {
            let currencyId = _this16.currencyId(currency);
            let response = yield _this16.accountGetWithdraw(_this16.extend({
                'currency': currencyId,
                'quantity': amount,
                'address': address
            }, params));
            let id = undefined;
            if ('result' in response) {
                if ('uuid' in response['result']) id = response['result']['uuid'];
            }
            return {
                'info': response,
                'id': id
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api] + '/';
        if (api != 'v2') url += this.version + '/';
        if (api == 'public') {
            url += api + '/' + method.toLowerCase() + path;
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else if (api == 'v2') {
            url += path;
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            url += api + '/';
            if (api == 'account' && path != 'withdraw' || path == 'openorders') url += method.toLowerCase();
            url += path + '?' + this.urlencode(this.extend({
                'nonce': nonce,
                'apikey': this.apiKey
            }, params));
            let signature = this.hmac(this.encode(url), this.encode(this.secret), 'sha512');
            headers = { 'apisign': signature };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code >= 400) {
            if (body[0] == "{") {
                let response = JSON.parse(body);
                if ('success' in response) {
                    if (!response['success']) {
                        if ('message' in response) {
                            if (response['message'] == 'MIN_TRADE_REQUIREMENT_NOT_MET') throw new InvalidOrder(this.id + ' ' + this.json(response));
                            if (response['message'] == 'APIKEY_INVALID') {
                                if (this.hasAlreadyAuthenticatedSuccessfully) {
                                    throw new DDoSProtection(this.id + ' ' + this.json(response));
                                } else {
                                    throw new AuthenticationError(this.id + ' ' + this.json(response));
                                }
                            }
                            if (response['message'] == 'DUST_TRADE_DISALLOWED_MIN_VALUE_50K_SAT') throw new InvalidOrder(this.id + ' order cost should be over 50k satoshi ' + this.json(response));
                        }
                        throw new ExchangeError(this.id + ' ' + this.json(response));
                    }
                }
            }
        }
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this17 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this17.fetch2(path, api, method, params, headers, body);
            if ('success' in response) {
                if (response['success']) {
                    // a workaround for APIKEY_INVALID
                    if (api == 'account' || api == 'market') _this17.hasAlreadyAuthenticatedSuccessfully = true;
                    return response;
                }
            }
            if ('message' in response) {
                if (response['message'] == 'ADDRESS_GENERATING') return response;
                if (response['message'] == "INSUFFICIENT_FUNDS") throw new InsufficientFunds(_this17.id + ' ' + _this17.json(response));
            }
            throw new ExchangeError(_this17.id + ' ' + _this17.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],28:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');

// ---------------------------------------------------------------------------

module.exports = class bl3p extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bl3p',
            'name': 'BL3P',
            'countries': ['NL', 'EU'], // Netherlands, EU
            'rateLimit': 1000,
            'version': '1',
            'comment': 'An exchange market by BitonicNL',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg',
                'api': 'https://api.bl3p.eu',
                'www': ['https://bl3p.eu', 'https://bitonic.nl'],
                'doc': ['https://github.com/BitonicNL/bl3p-api/tree/master/docs', 'https://bl3p.eu/api', 'https://bitonic.nl/en/api']
            },
            'api': {
                'public': {
                    'get': ['{market}/ticker', '{market}/orderbook', '{market}/trades']
                },
                'private': {
                    'post': ['{market}/money/depth/full', '{market}/money/order/add', '{market}/money/order/cancel', '{market}/money/order/result', '{market}/money/orders', '{market}/money/orders/history', '{market}/money/trades/fetch', 'GENMKT/money/info', 'GENMKT/money/deposit_address', 'GENMKT/money/new_deposit_address', 'GENMKT/money/wallet/history', 'GENMKT/money/withdraw']
                }
            },
            'markets': {
                'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 }
                // 'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostGENMKTMoneyInfo();
            let data = response['data'];
            let balance = data['wallets'];
            let result = { 'info': data };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this.account();
                if (currency in balance) {
                    if ('available' in balance[currency]) {
                        account['free'] = parseFloat(balance[currency]['available']['value']);
                    }
                }
                if (currency in balance) {
                    if ('balance' in balance[currency]) {
                        account['total'] = parseFloat(balance[currency]['balance']['value']);
                    }
                }
                if (account['total']) {
                    if (account['free']) {
                        account['used'] = account['total'] - account['free'];
                    }
                }
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    parseBidAsk(bidask, priceKey = 0, amountKey = 0) {
        return [bidask['price_int'] / 100000.0, bidask['amount_int'] / 100000000.0];
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let market = _this2.market(symbol);
            let response = yield _this2.publicGetMarketOrderbook(_this2.extend({
                'market': market['id']
            }, params));
            let orderbook = response['data'];
            return _this2.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let ticker = yield _this3.publicGetMarketTicker(_this3.extend({
                'market': _this3.marketId(symbol)
            }, params));
            let timestamp = ticker['timestamp'] * 1000;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume']['24h']),
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        return {
            'id': trade['trade_id'],
            'info': trade,
            'timestamp': trade['date'],
            'datetime': this.iso8601(trade['date']),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined,
            'price': trade['price_int'] / 100000.0,
            'amount': trade['amount_int'] / 100000000.0
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetMarketTrades(_this4.extend({
                'market': market['id']
            }, params));
            let result = _this4.parseTrades(response['data']['trades'], market, since, limit);
            return result;
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let market = _this5.market(symbol);
            let order = {
                'market': market['id'],
                'amount_int': amount,
                'fee_currency': market['quote'],
                'type': side == 'buy' ? 'bid' : 'ask'
            };
            if (type == 'limit') order['price_int'] = price;
            let response = yield _this5.privatePostMarketMoneyOrderAdd(_this5.extend(order, params));
            return {
                'info': response,
                'id': response['order_id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostMarketMoneyOrderCancel({ 'order_id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let request = this.implodeParams(path, params);
        let url = this.urls['api'] + '/' + this.version + '/' + request;
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            body = this.urlencode(this.extend({ 'nonce': nonce }, query));
            let secret = this.base64ToBinary(this.secret);
            let auth = request + "\0" + body;
            let signature = this.hmac(this.encode(auth), secret, 'sha512', 'base64');
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Rest-Key': this.apiKey,
                'Rest-Sign': signature
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8}],29:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const bittrex = require('./bittrex.js');

// ---------------------------------------------------------------------------

module.exports = class bleutrade extends bittrex {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bleutrade',
            'name': 'Bleutrade',
            'countries': 'BR', // Brazil
            'rateLimit': 1000,
            'version': 'v2',
            'hasCORS': true,
            'hasFetchTickers': true,
            'hasFetchOHLCV': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/30303000-b602dbe6-976d-11e7-956d-36c5049c01e7.jpg',
                'api': {
                    'public': 'https://bleutrade.com/api',
                    'account': 'https://bleutrade.com/api',
                    'market': 'https://bleutrade.com/api'
                },
                'www': 'https://bleutrade.com',
                'doc': 'https://bleutrade.com/help/API'
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetMarkets();
            let result = [];
            for (let p = 0; p < markets['result'].length; p++) {
                let market = markets['result'][p];
                let id = market['MarketName'];
                let base = market['MarketCurrency'];
                let quote = market['BaseCurrency'];
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                let precision = {
                    'amount': 8,
                    'price': 8
                };
                let active = market['IsActive'];
                result.push(_this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'active': active,
                    'info': market,
                    'lot': Math.pow(10, -precision['amount']),
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': market['MinTradeSize'],
                            'max': undefined
                        },
                        'price': {
                            'min': undefined,
                            'max': undefined
                        },
                        'cost': {
                            'min': 0,
                            'max': undefined
                        }
                    }
                }));
            }
            return result;
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.publicGetOrderbook(_this2.extend({
                'market': _this2.marketId(symbol),
                'type': 'ALL',
                'depth': 50
            }, params));
            let orderbook = response['result'];
            return _this2.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');
        })();
    }
};
},{"./bittrex.js":27}],30:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class btcbox extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'btcbox',
            'name': 'BtcBox',
            'countries': 'JP',
            'rateLimit': 1000,
            'version': 'v1',
            'hasCORS': false,
            'hasFetchOHLCV': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/31275803-4df755a8-aaa1-11e7-9abb-11ec2fad9f2d.jpg',
                'api': 'https://www.btcbox.co.jp/api',
                'www': 'https://www.btcbox.co.jp/',
                'doc': 'https://www.btcbox.co.jp/help/asm'
            },
            'api': {
                'public': {
                    'get': ['depth', 'orders', 'ticker', 'allticker']
                },
                'private': {
                    'post': ['balance', 'trade_add', 'trade_cancel', 'trade_list', 'trade_view', 'wallet']
                }
            },
            'markets': {
                'BTC/JPY': { 'id': 'BTC/JPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            yield _this.loadMarkets();
            let balances = yield _this.privatePostBalance();
            let result = { 'info': balances };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                if (lowercase == 'dash') lowercase = 'drk';
                let account = _this.account();
                let free = lowercase + '_balance';
                let used = lowercase + '_lock';
                if (free in balances) account['free'] = parseFloat(balances[free]);
                if (used in balances) account['used'] = parseFloat(balances[used]);
                account['total'] = _this.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let market = _this2.market(symbol);
            let request = {};
            let numSymbols = _this2.symbols.length;
            if (numSymbols > 1) request['coin'] = market['id'];
            let orderbook = yield _this2.publicGetDepth(_this2.extend(request, params));
            let result = _this2.parseOrderBook(orderbook);
            result['asks'] = _this2.sortBy(result['asks'], 0);
            return result;
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'high'),
            'low': this.safeFloat(ticker, 'low'),
            'bid': this.safeFloat(ticker, 'buy'),
            'ask': this.safeFloat(ticker, 'sell'),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': this.safeFloat(ticker, 'last'),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'vol'),
            'quoteVolume': this.safeFloat(ticker, 'volume'),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let tickers = yield _this3.publicGetAllticker(params);
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = _this3.markets_by_id[id];
                let symbol = market['symbol'];
                let ticker = tickers[id];
                result[symbol] = _this3.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let request = {};
            let numSymbols = _this4.symbols.length;
            if (numSymbols > 1) request['coin'] = market['id'];
            let ticker = yield _this4.publicGetTicker(_this4.extend(request, params));
            return _this4.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(trade['date']) * 1000;
        return {
            'info': trade,
            'id': trade['tid'],
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['type'],
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let request = {};
            let numSymbols = _this5.symbols.length;
            if (numSymbols > 1) request['coin'] = market['id'];
            let response = yield _this5.publicGetOrders(_this5.extend(request, params));
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let request = {
                'amount': amount,
                'price': price,
                'type': side
            };
            let numSymbols = _this6.symbols.length;
            if (numSymbols > 1) request['coin'] = market['id'];
            let response = yield _this6.privatePostTradeAdd(_this6.extend(request, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            return yield _this7.privatePostTradeCancel(_this7.extend({
                'id': id
            }, params));
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + path;
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let query = this.extend({
                'key': this.apiKey,
                'nonce': nonce
            }, params);
            let request = this.urlencode(query);
            let secret = this.hash(this.encode(this.secret));
            query['signature'] = this.hmac(this.encode(request), this.encode(secret));
            body = this.urlencode(query);
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if ('result' in response) if (!response['result']) throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],31:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class btcchina extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'btcchina',
            'name': 'BTCChina',
            'countries': 'CN',
            'rateLimit': 1500,
            'version': 'v1',
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766368-465b3286-5ed6-11e7-9a11-0f6467e1d82b.jpg',
                'api': {
                    'plus': 'https://plus-api.btcchina.com/market',
                    'public': 'https://data.btcchina.com/data',
                    'private': 'https://api.btcchina.com/api_trade_v1.php'
                },
                'www': 'https://www.btcchina.com',
                'doc': 'https://www.btcchina.com/apidocs'
            },
            'api': {
                'plus': {
                    'get': ['orderbook', 'ticker', 'trade']
                },
                'public': {
                    'get': ['historydata', 'orderbook', 'ticker', 'trades']
                },
                'private': {
                    'post': ['BuyIcebergOrder', 'BuyOrder', 'BuyOrder2', 'BuyStopOrder', 'CancelIcebergOrder', 'CancelOrder', 'CancelStopOrder', 'GetAccountInfo', 'getArchivedOrder', 'getArchivedOrders', 'GetDeposits', 'GetIcebergOrder', 'GetIcebergOrders', 'GetMarketDepth', 'GetMarketDepth2', 'GetOrder', 'GetOrders', 'GetStopOrder', 'GetStopOrders', 'GetTransactions', 'GetWithdrawal', 'GetWithdrawals', 'RequestWithdrawal', 'SellIcebergOrder', 'SellOrder', 'SellOrder2', 'SellStopOrder']
                }
            },
            'markets': {
                'BTC/CNY': { 'id': 'btccny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'api': 'public', 'plus': false },
                'LTC/CNY': { 'id': 'ltccny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'api': 'public', 'plus': false },
                'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'api': 'public', 'plus': false },
                'BCH/CNY': { 'id': 'bcccny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY', 'api': 'plus', 'plus': true },
                'ETH/CNY': { 'id': 'ethcny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY', 'api': 'plus', 'plus': true }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetTicker({
                'market': 'all'
            });
            let result = [];
            let keys = Object.keys(markets);
            for (let p = 0; p < keys.length; p++) {
                let key = keys[p];
                let market = markets[key];
                let parts = key.split('_');
                let id = parts[1];
                let base = id.slice(0, 3);
                let quote = id.slice(3, 6);
                base = base.toUpperCase();
                quote = quote.toUpperCase();
                let symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostGetAccountInfo();
            let balances = response['result'];
            let result = { 'info': balances };
            let currencies = Object.keys(_this2.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let account = _this2.account();
                if (lowercase in balances['balance']) account['total'] = parseFloat(balances['balance'][lowercase]['amount']);
                if (lowercase in balances['frozen']) account['used'] = parseFloat(balances['frozen'][lowercase]['amount']);
                account['free'] = account['total'] - account['used'];
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    createMarketRequest(market) {
        let request = {};
        let field = market['plus'] ? 'symbol' : 'market';
        request[field] = market['id'];
        return request;
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let method = market['api'] + 'GetOrderbook';
            let request = _this3.createMarketRequest(market);
            let orderbook = yield _this3[method](_this3.extend(request, params));
            let timestamp = orderbook['date'] * 1000;
            let result = _this3.parseOrderBook(orderbook, timestamp);
            result['asks'] = _this3.sortBy(result['asks'], 0);
            return result;
        })();
    }

    parseTicker(ticker, market) {
        let timestamp = ticker['date'] * 1000;
        return {
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['buy']),
            'ask': parseFloat(ticker['sell']),
            'vwap': parseFloat(ticker['vwap']),
            'open': parseFloat(ticker['open']),
            'close': parseFloat(ticker['prev_close']),
            'first': undefined,
            'last': parseFloat(ticker['last']),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['vol']),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    parseTickerPlus(ticker, market) {
        let timestamp = ticker['Timestamp'];
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['High']),
            'low': parseFloat(ticker['Low']),
            'bid': parseFloat(ticker['BidPrice']),
            'ask': parseFloat(ticker['AskPrice']),
            'vwap': undefined,
            'open': parseFloat(ticker['Open']),
            'close': parseFloat(ticker['PrevCls']),
            'first': undefined,
            'last': parseFloat(ticker['Last']),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['Volume24H']),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let method = market['api'] + 'GetTicker';
            let request = _this4.createMarketRequest(market);
            let tickers = yield _this4[method](_this4.extend(request, params));
            let ticker = tickers['ticker'];
            if (market['plus']) return _this4.parseTickerPlus(ticker, market);
            return _this4.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(trade['date']) * 1000;
        return {
            'id': trade['tid'],
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    parseTradePlus(trade, market) {
        let timestamp = this.parse8601(trade['timestamp']);
        return {
            'id': undefined,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['side'].toLowerCase(),
            'price': trade['price'],
            'amount': trade['size']
        };
    }

    parseTradesPlus(trades, market = undefined) {
        let result = [];
        for (let i = 0; i < trades.length; i++) {
            result.push(this.parseTradePlus(trades[i], market));
        }
        return result;
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let method = market['api'] + 'GetTrade';
            let request = _this5.createMarketRequest(market);
            if (market['plus']) {
                let now = _this5.milliseconds();
                request['start_time'] = now - 86400 * 1000;
                request['end_time'] = now;
            } else {
                method += 's'; // trades vs trade
            }
            let response = yield _this5[method](_this5.extend(request, params));
            if (market['plus']) {
                return _this5.parseTradesPlus(response['trades'], market);
            }
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let method = 'privatePost' + _this6.capitalize(side) + 'Order2';
            let order = {};
            let id = market['id'].toUpperCase();
            if (type == 'market') {
                order['params'] = [undefined, amount, id];
            } else {
                order['params'] = [price, amount, id];
            }
            let response = yield _this6[method](_this6.extend(order, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = params['market']; // TODO fixme
            return yield _this7.privatePostCancelOrder(_this7.extend({
                'params': [id, market]
            }, params));
        })();
    }

    nonce() {
        return this.microseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api] + '/' + path;
        if (api == 'private') {
            this.checkRequiredCredentials();
            let p = [];
            if ('params' in params) p = params['params'];
            let nonce = this.nonce();
            let request = {
                'method': path,
                'id': nonce,
                'params': p
            };
            p = p.join(',');
            body = this.json(request);
            let query = 'tonce=' + nonce + '&accesskey=' + this.apiKey + '&requestmethod=' + method.toLowerCase() + '&id=' + nonce + '&method=' + path + '&params=' + p;
            let signature = this.hmac(this.encode(query), this.encode(this.secret), 'sha1');
            let auth = this.encode(this.apiKey + ':' + signature);
            headers = {
                'Authorization': 'Basic ' + this.stringToBase64(auth),
                'Json-Rpc-Tonce': nonce
            };
        } else {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],32:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const btcturk = require('./btcturk.js');

// ---------------------------------------------------------------------------

module.exports = class btcexchange extends btcturk {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'btcexchange',
            'name': 'BTCExchange',
            'countries': 'PH', // Philippines
            'rateLimit': 1500,
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27993052-4c92911a-64aa-11e7-96d8-ec6ac3435757.jpg',
                'api': 'https://www.btcexchange.ph/api',
                'www': 'https://www.btcexchange.ph',
                'doc': 'https://github.com/BTCTrader/broker-api-docs'
            },
            'markets': {
                'BTC/PHP': { 'id': 'BTC/PHP', 'symbol': 'BTC/PHP', 'base': 'BTC', 'quote': 'PHP' }
            }
        });
    }
};
},{"./btcturk.js":35}],33:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class btcmarkets extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'btcmarkets',
            'name': 'BTC Markets',
            'countries': 'AU', // Australia
            'rateLimit': 1000, // market data cached for 1 second (trades cached for 2 seconds)
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/29142911-0e1acfc2-7d5c-11e7-98c4-07d9532b29d7.jpg',
                'api': 'https://api.btcmarkets.net',
                'www': 'https://btcmarkets.net/',
                'doc': 'https://github.com/BTCMarkets/API'
            },
            'api': {
                'public': {
                    'get': ['market/{id}/tick', 'market/{id}/orderbook', 'market/{id}/trades']
                },
                'private': {
                    'get': ['account/balance', 'account/{id}/tradingfee'],
                    'post': ['fundtransfer/withdrawCrypto', 'fundtransfer/withdrawEFT', 'order/create', 'order/cancel', 'order/history', 'order/open', 'order/trade/history', 'order/createBatch', // they promise it's coming soon...
                    'order/detail']
                }
            },
            'markets': {
                'BTC/AUD': { 'id': 'BTC/AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },
                'LTC/AUD': { 'id': 'LTC/AUD', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },
                'ETH/AUD': { 'id': 'ETH/AUD', 'symbol': 'ETH/AUD', 'base': 'ETH', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },
                'ETC/AUD': { 'id': 'ETC/AUD', 'symbol': 'ETC/AUD', 'base': 'ETC', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },
                'XRP/AUD': { 'id': 'XRP/AUD', 'symbol': 'XRP/AUD', 'base': 'XRP', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },
                'BCH/AUD': { 'id': 'BCH/AUD', 'symbol': 'BCH/AUD', 'base': 'BCH', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },
                'LTC/BTC': { 'id': 'LTC/BTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 },
                'ETH/BTC': { 'id': 'ETH/BTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 },
                'ETC/BTC': { 'id': 'ETC/BTC', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 },
                'XRP/BTC': { 'id': 'XRP/BTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 },
                'BCH/BTC': { 'id': 'BCH/BTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            yield _this.loadMarkets();
            let balances = yield _this.privateGetAccountBalance();
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let multiplier = 100000000;
                let total = parseFloat(balance['balance'] / multiplier);
                let used = parseFloat(balance['pendingFunds'] / multiplier);
                let free = total - used;
                let account = {
                    'free': free,
                    'used': used,
                    'total': total
                };
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let market = _this2.market(symbol);
            let orderbook = yield _this2.publicGetMarketIdOrderbook(_this2.extend({
                'id': market['id']
            }, params));
            let timestamp = orderbook['timestamp'] * 1000;
            return _this2.parseOrderBook(orderbook, timestamp);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['timestamp'] * 1000;
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': undefined,
            'low': undefined,
            'bid': parseFloat(ticker['bestBid']),
            'ask': parseFloat(ticker['bestAsk']),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['lastPrice']),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['volume24h']),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let ticker = yield _this3.publicGetMarketIdTick(_this3.extend({
                'id': market['id']
            }, params));
            return _this3.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['date'] * 1000;
        return {
            'info': trade,
            'id': trade['tid'].toString(),
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetMarketIdTrades(_this4.extend({
                // 'since': 59868345231,
                'id': market['id']
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let multiplier = 100000000; // for price and volume
            // does BTC Markets support market orders at all?
            let orderSide = side == 'buy' ? 'Bid' : 'Ask';
            let order = _this5.ordered({
                'currency': market['quote'],
                'instrument': market['base'],
                'price': price * multiplier,
                'volume': amount * multiplier,
                'orderSide': orderSide,
                'ordertype': _this5.capitalize(type),
                'clientRequestId': _this5.nonce().toString()
            });
            let response = yield _this5.privatePostOrderCreate(_this5.extend(order, params));
            return {
                'info': response,
                'id': response['id'].toString()
            };
        })();
    }

    cancelOrders(ids) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            return yield _this6.privatePostOrderCancel({ 'order_ids': ids });
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            return yield _this7.cancelOrders([id]);
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let uri = '/' + this.implodeParams(path, params);
        let url = this.urls['api'] + uri;
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let auth = uri + "\n" + nonce + "\n";
            headers = {
                'Content-Type': 'application/json',
                'apikey': this.apiKey,
                'timestamp': nonce
            };
            if (method == 'POST') {
                body = this.urlencode(query);
                auth += body;
            }
            let secret = this.base64ToBinary(this.secret);
            let signature = this.hmac(this.encode(auth), secret, 'sha512', 'base64');
            headers['signature'] = this.decode(signature);
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if (api == 'private') {
                if ('success' in response) if (!response['success']) throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
                return response;
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],34:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class btctradeua extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'btctradeua',
            'name': 'BTC Trade UA',
            'countries': 'UA', // Ukraine,
            'rateLimit': 3000,
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg',
                'api': 'https://btc-trade.com.ua/api',
                'www': 'https://btc-trade.com.ua',
                'doc': 'https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit'
            },
            'api': {
                'public': {
                    'get': ['deals/{symbol}', 'trades/sell/{symbol}', 'trades/buy/{symbol}', 'japan_stat/high/{symbol}']
                },
                'private': {
                    'post': ['auth', 'ask/{symbol}', 'balance', 'bid/{symbol}', 'buy/{symbol}', 'my_orders/{symbol}', 'order/status/{id}', 'remove/order/{id}', 'sell/{symbol}']
                }
            },
            'markets': {
                'BTC/UAH': { 'id': 'btc_uah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH', 'precision': { 'price': 1 }, 'limits': { 'amount': { 'min': 0.0000000001 } } },
                'ETH/UAH': { 'id': 'eth_uah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH' },
                'LTC/UAH': { 'id': 'ltc_uah', 'symbol': 'LTC/UAH', 'base': 'LTC', 'quote': 'UAH' },
                'DOGE/UAH': { 'id': 'doge_uah', 'symbol': 'DOGE/UAH', 'base': 'DOGE', 'quote': 'UAH' },
                'DASH/UAH': { 'id': 'dash_uah', 'symbol': 'DASH/UAH', 'base': 'DASH', 'quote': 'UAH' },
                'SIB/UAH': { 'id': 'sib_uah', 'symbol': 'SIB/UAH', 'base': 'SIB', 'quote': 'UAH' },
                'KRB/UAH': { 'id': 'krb_uah', 'symbol': 'KRB/UAH', 'base': 'KRB', 'quote': 'UAH' },
                'NVC/UAH': { 'id': 'nvc_uah', 'symbol': 'NVC/UAH', 'base': 'NVC', 'quote': 'UAH' },
                'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
                'NVC/BTC': { 'id': 'nvc_btc', 'symbol': 'NVC/BTC', 'base': 'NVC', 'quote': 'BTC' },
                'ITI/UAH': { 'id': 'iti_uah', 'symbol': 'ITI/UAH', 'base': 'ITI', 'quote': 'UAH' },
                'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
                'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
            },
            'fees': {
                'trading': {
                    'maker': 0.1 / 100,
                    'taker': 0.1 / 100
                }
            }
        });
    }

    signIn() {
        return this.privatePostAuth();
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostBalance();
            let result = { 'info': response };
            if ('accounts' in response) {
                let accounts = response['accounts'];
                for (let b = 0; b < accounts.length; b++) {
                    let account = accounts[b];
                    let currency = account['currency'];
                    let balance = parseFloat(account['balance']);
                    result[currency] = {
                        'free': balance,
                        'used': 0.0,
                        'total': balance
                    };
                }
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let market = _this2.market(symbol);
            let bids = yield _this2.publicGetTradesBuySymbol(_this2.extend({
                'symbol': market['id']
            }, params));
            let asks = yield _this2.publicGetTradesSellSymbol(_this2.extend({
                'symbol': market['id']
            }, params));
            let orderbook = {
                'bids': [],
                'asks': []
            };
            if (bids) {
                if ('list' in bids) orderbook['bids'] = bids['list'];
            }
            if (asks) {
                if ('list' in asks) orderbook['asks'] = asks['list'];
            }
            return _this2.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'currency_trade');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this3.publicGetJapanStatHighSymbol(_this3.extend({
                'symbol': _this3.marketId(symbol)
            }, params));
            let orderbook = yield _this3.fetchOrderBook(symbol);
            let bid = undefined;
            let numBids = orderbook['bids'].length;
            if (numBids > 0) bid = orderbook['bids'][0][0];
            let ask = undefined;
            let numAsks = orderbook['asks'].length;
            if (numAsks > 0) ask = orderbook['asks'][0][0];
            let ticker = response['trades'];
            let timestamp = _this3.milliseconds();
            let result = {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': bid,
                'ask': ask,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': undefined,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': undefined,
                'info': ticker
            };
            let tickerLength = ticker.length;
            if (tickerLength > 0) {
                let start = Math.max(tickerLength - 48, 0);
                for (let t = start; t < ticker.length; t++) {
                    let candle = ticker[t];
                    if (typeof result['open'] == 'undefined') result['open'] = candle[1];
                    if (typeof result['high'] == 'undefined' || result['high'] < candle[2]) result['high'] = candle[2];
                    if (typeof result['low'] == 'undefined' || result['low'] > candle[3]) result['low'] = candle[3];
                    if (typeof result['baseVolume'] == 'undefined') result['baseVolume'] = -candle[5];else result['baseVolume'] -= candle[5];
                }
                let last = tickerLength - 1;
                result['close'] = ticker[last][4];
                result['baseVolume'] = -1 * result['baseVolume'];
            }
            return result;
        })();
    }

    convertCyrillicMonthNameToString(cyrillic) {
        let months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];
        let month = undefined;
        for (let i = 0; i < months.length; i++) {
            if (cyrillic == months[i]) {
                month = i + 1;
                month = month.toString();
                if (i < 9) month = '0' + month;
            }
        }
        return month;
    }

    parseCyrillicDatetime(cyrillic) {
        let parts = cyrillic.split(' ');
        let day = parts[0];
        let month = this.convertCyrillicMonthNameToString(parts[1]);
        if (!month) throw new ExchangeError(this.id + ' parseTrade() undefined month name: ' + cyrillic);
        let year = parts[2];
        let hms = parts[4];
        let hmsLength = hms.length;
        if (hmsLength == 7) {
            hms = '0' + hms;
        }
        let ymd = [year, month, day].join('-');
        let ymdhms = ymd + 'T' + hms;
        let timestamp = this.parse8601(ymdhms);
        timestamp = timestamp - 10800000; // server reports local GMT+3 time, adjust to UTC
        return timestamp;
    }

    parseTrade(trade, market) {
        let timestamp = this.parseCyrillicDatetime(trade['pub_date']);
        return {
            'id': trade['id'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amnt_trade'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetDealsSymbol(_this4.extend({
                'symbol': market['id']
            }, params));
            let trades = [];
            for (let i = 0; i < response.length; i++) {
                if (response[i]['id'] % 2) {
                    trades.push(response[i]);
                }
            }
            return _this4.parseTrades(trades, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            if (type == 'market') throw new ExchangeError(_this5.id + ' allows limit orders only');
            let market = _this5.market(symbol);
            let method = 'privatePost' + _this5.capitalize(side) + 'Id';
            let order = {
                'count': amount,
                'currency1': market['quote'],
                'currency': market['base'],
                'price': price
            };
            return _this5[method](_this5.extend(order, params));
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostRemoveOrderId({ 'id': id });
        })();
    }

    parseOrder(trade, market) {
        let timestamp = this.milliseconds;
        return {
            'id': trade['id'],
            'timestamp': timestamp, // until they fix their timestamp
            'datetime': this.iso8601(timestamp),
            'status': 'open',
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['type'],
            'price': trade['price'],
            'amount': trade['amnt_trade'],
            'filled': 0,
            'remaining': trade['amnt_trade'],
            'trades': undefined,
            'info': trade
        };
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this7.id + ' fetchOpenOrders requires a symbol param');
            let market = _this7.market(symbol);
            let response = yield _this7.privatePostMyOrdersSymbol(_this7.extend({
                'symbol': market['id']
            }, params));
            let orders = response['your_open_orders'];
            return _this7.parseOrders(orders, market, since, limit);
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += this.implodeParams(path, query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            body = this.urlencode(this.extend({
                'out_order_id': nonce,
                'nonce': nonce
            }, query));
            let auth = body + this.secret;
            headers = {
                'public-key': this.apiKey,
                'api-sign': this.hash(this.encode(auth), 'sha256'),
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],35:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class btcturk extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'btcturk',
            'name': 'BTCTurk',
            'countries': 'TR', // Turkey
            'rateLimit': 1000,
            'hasCORS': true,
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'timeframes': {
                '1d': '1d'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27992709-18e15646-64a3-11e7-9fa2-b0950ec7712f.jpg',
                'api': 'https://www.btcturk.com/api',
                'www': 'https://www.btcturk.com',
                'doc': 'https://github.com/BTCTrader/broker-api-docs'
            },
            'api': {
                'public': {
                    'get': ['ohlcdata', // ?last=COUNT
                    'orderbook', 'ticker', 'trades']
                },
                'private': {
                    'get': ['balance', 'openOrders', 'userTransactions'],
                    'post': ['buy', 'cancelOrder', 'sell']
                }
            },
            'markets': {
                'BTC/TRY': { 'id': 'BTCTRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY', 'maker': 0.002 * 1.18, 'taker': 0.0035 * 1.18 },
                'ETH/TRY': { 'id': 'ETHTRY', 'symbol': 'ETH/TRY', 'base': 'ETH', 'quote': 'TRY', 'maker': 0.002 * 1.18, 'taker': 0.0035 * 1.18 },
                'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.002 * 1.18, 'taker': 0.0035 * 1.18 }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privateGetBalance();
            let result = { 'info': response };
            let base = {
                'free': response['bitcoin_available'],
                'used': response['bitcoin_reserved'],
                'total': response['bitcoin_balance']
            };
            let quote = {
                'free': response['money_available'],
                'used': response['money_reserved'],
                'total': response['money_balance']
            };
            let symbol = _this.symbols[0];
            let market = _this.markets[symbol];
            result[market['base']] = base;
            result[market['quote']] = quote;
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let market = _this2.market(symbol);
            let orderbook = yield _this2.publicGetOrderbook(_this2.extend({
                'pairSymbol': market['id']
            }, params));
            let timestamp = parseInt(orderbook['timestamp'] * 1000);
            return _this2.parseOrderBook(orderbook, timestamp);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let timestamp = parseInt(ticker['timestamp']) * 1000;
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['bid']),
            'ask': parseFloat(ticker['ask']),
            'vwap': undefined,
            'open': parseFloat(ticker['open']),
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last']),
            'change': undefined,
            'percentage': undefined,
            'average': parseFloat(ticker['average']),
            'baseVolume': parseFloat(ticker['volume']),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let tickers = yield _this3.publicGetTicker(params);
            let result = {};
            for (let i = 0; i < tickers.length; i++) {
                let ticker = tickers[i];
                let symbol = ticker['pair'];
                let market = undefined;
                if (symbol in _this3.markets_by_id) {
                    market = _this3.markets_by_id[symbol];
                    symbol = market['symbol'];
                }
                result[symbol] = _this3.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let tickers = yield _this4.fetchTickers();
            let result = undefined;
            if (symbol in tickers) result = tickers[symbol];
            return result;
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['date'] * 1000;
        return {
            'id': trade['tid'],
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let market = _this5.market(symbol);
            // let maxCount = 50;
            let response = yield _this5.publicGetTrades(_this5.extend({
                'pairSymbol': market['id']
            }, params));
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {
        let timestamp = this.parse8601(ohlcv['Time']);
        return [timestamp, ohlcv['Open'], ohlcv['High'], ohlcv['Low'], ohlcv['Close'], ohlcv['Volume']];
    }

    fetchOHLCV(symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let request = {};
            if (limit) request['last'] = limit;
            let response = yield _this6.publicGetOhlcdata(_this6.extend(request, params));
            return _this6.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let method = 'privatePost' + _this7.capitalize(side);
            let order = {
                'Type': side == 'buy' ? 'BuyBtc' : 'SelBtc',
                'IsMarketOrder': type == 'market' ? 1 : 0
            };
            if (type == 'market') {
                if (side == 'buy') order['Total'] = amount;else order['Amount'] = amount;
            } else {
                order['Price'] = price;
                order['Amount'] = amount;
            }
            let response = yield _this7[method](_this7.extend(order, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            return yield _this8.privatePostCancelOrder({ 'id': id });
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        if (this.id == 'btctrader') throw new ExchangeError(this.id + ' is an abstract base API for BTCExchange, BTCTurk');
        let url = this.urls['api'] + '/' + path;
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            body = this.urlencode(params);
            let secret = this.base64ToBinary(this.secret);
            let auth = this.apiKey + nonce;
            headers = {
                'X-PCK': this.apiKey,
                'X-Stamp': nonce,
                'X-Signature': this.stringToBase64(this.hmac(this.encode(auth), secret, 'sha256', 'binary')),
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],36:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class btcx extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'btcx',
            'name': 'BTCX',
            'countries': ['IS', 'US', 'EU'],
            'rateLimit': 1500, // support in english is very poor, unable to tell rate limits
            'version': 'v1',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766385-9fdcc98c-5ed6-11e7-8f14-66d5e5cd47e6.jpg',
                'api': 'https://btc-x.is/api',
                'www': 'https://btc-x.is',
                'doc': 'https://btc-x.is/custom/api-document.html'
            },
            'api': {
                'public': {
                    'get': ['depth/{id}/{limit}', 'ticker/{id}', 'trade/{id}/{limit}']
                },
                'private': {
                    'post': ['balance', 'cancel', 'history', 'order', 'redeem', 'trade', 'withdraw']
                }
            },
            'markets': {
                'BTC/USD': { 'id': 'btc/usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
                'BTC/EUR': { 'id': 'btc/eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let balances = yield _this.privatePostBalance();
            let result = { 'info': balances };
            let currencies = Object.keys(balances);
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                let uppercase = currency.toUpperCase();
                let account = {
                    'free': balances[currency],
                    'used': 0.0,
                    'total': balances[currency]
                };
                result[uppercase] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this2.publicGetDepthIdLimit(_this2.extend({
                'id': _this2.marketId(symbol),
                'limit': 1000
            }, params));
            return _this2.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let ticker = yield _this3.publicGetTickerId(_this3.extend({
                'id': _this3.marketId(symbol)
            }, params));
            let timestamp = ticker['time'] * 1000;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['sell']),
                'ask': parseFloat(ticker['buy']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(trade['date']) * 1000;
        let side = trade['type'] == 'ask' ? 'sell' : 'buy';
        return {
            'id': trade['id'],
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': side,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTradeIdLimit(_this4.extend({
                'id': market['id'],
                'limit': 1000
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this5.privatePostTrade(_this5.extend({
                'type': side.toUpperCase(),
                'market': _this5.marketId(symbol),
                'amount': amount,
                'price': price
            }, params));
            return {
                'info': response,
                'id': response['order']['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCancel({ 'order': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/';
        if (api == 'public') {
            url += this.implodeParams(path, params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            url += api;
            body = this.urlencode(this.extend({
                'Method': path.toUpperCase(),
                'Nonce': nonce
            }, params));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Key': this.apiKey,
                'Signature': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.fetch2(path, api, method, params, headers, body);
            if ('error' in response) throw new ExchangeError(_this7.id + ' ' + _this7.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],37:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bter extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bter',
            'name': 'Bter',
            'countries': ['VG', 'CN'], // British Virgin Islands, China
            'version': '2',
            'hasCORS': false,
            'hasFetchTickers': true,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27980479-cfa3188c-6387-11e7-8191-93fc4184ba5c.jpg',
                'api': {
                    'public': 'https://data.bter.com/api',
                    'private': 'https://api.bter.com/api'
                },
                'www': 'https://bter.com',
                'doc': 'https://bter.com/api2'
            },
            'api': {
                'public': {
                    'get': ['pairs', 'marketinfo', 'marketlist', 'tickers', 'ticker/{id}', 'orderBook/{id}', 'trade/{id}', 'tradeHistory/{id}', 'tradeHistory/{id}/{tid}']
                },
                'private': {
                    'post': ['balances', 'depositAddress', 'newAddress', 'depositsWithdrawals', 'buy', 'sell', 'cancelOrder', 'cancelAllOrders', 'getOrder', 'openOrders', 'tradeHistory', 'withdraw']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.publicGetMarketinfo();
            let markets = _this.safeValue(response, 'pairs');
            if (!markets) throw new ExchangeError(_this.id + ' fetchMarkets got an unrecognized response');
            let result = [];
            for (let i = 0; i < markets.length; i++) {
                let market = markets[i];
                let keys = Object.keys(market);
                let id = keys[0];
                let details = market[id];
                let [base, quote] = id.split('_');
                base = base.toUpperCase();
                quote = quote.toUpperCase();
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                let precision = {
                    'amount': details['decimal_places'],
                    'price': details['decimal_places']
                };
                let amountLimits = {
                    'min': details['min_amount'],
                    'max': undefined
                };
                let priceLimits = {
                    'min': undefined,
                    'max': undefined
                };
                let limits = {
                    'amount': amountLimits,
                    'price': priceLimits
                };
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market,
                    'maker': details['fee'] / 100,
                    'taker': details['fee'] / 100,
                    'precision': precision,
                    'limits': limits
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let balance = yield _this2.privatePostBalances();
            let result = { 'info': balance };
            let currencies = Object.keys(_this2.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let code = _this2.commonCurrencyCode(currency);
                let account = _this2.account();
                if ('available' in balance) {
                    if (currency in balance['available']) {
                        account['free'] = parseFloat(balance['available'][currency]);
                    }
                }
                if ('locked' in balance) {
                    if (currency in balance['locked']) {
                        account['used'] = parseFloat(balance['locked'][currency]);
                    }
                }
                account['total'] = _this2.sum(account['free'], account['used']);
                result[code] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetOrderBookId(_this3.extend({
                'id': _this3.marketId(symbol)
            }, params));
            let result = _this3.parseOrderBook(orderbook);
            result['asks'] = _this3.sortBy(result['asks'], 0);
            return result;
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high24hr']),
            'low': parseFloat(ticker['low24hr']),
            'bid': parseFloat(ticker['highestBid']),
            'ask': parseFloat(ticker['lowestAsk']),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last']),
            'change': parseFloat(ticker['percentChange']),
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['quoteVolume']),
            'quoteVolume': parseFloat(ticker['baseVolume']),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let tickers = yield _this4.publicGetTickers(params);
            let result = {};
            let ids = Object.keys(tickers);
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let [baseId, quoteId] = id.split('_');
                let base = baseId.toUpperCase();
                let quote = quoteId.toUpperCase();
                base = _this4.commonCurrencyCode(base);
                quote = _this4.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                let ticker = tickers[id];
                let market = undefined;
                if (symbol in _this4.markets) market = _this4.markets[symbol];
                if (id in _this4.markets_by_id) market = _this4.markets_by_id[id];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let ticker = yield _this5.publicGetTickerId(_this5.extend({
                'id': market['id']
            }, params));
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = this.parse8601(trade['date']);
        return {
            'id': trade['tradeID'],
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['type'],
            'price': trade['rate'],
            'amount': this.safeFloat(trade, 'amount')
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetTradeHistoryId(_this6.extend({
                'id': market['id']
            }, params));
            return _this6.parseTrades(response['data'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            if (type == 'market') throw new ExchangeError(_this7.id + ' allows limit orders only');
            yield _this7.loadMarkets();
            let method = 'privatePost' + _this7.capitalize(side);
            let order = {
                'currencyPair': _this7.marketId(symbol),
                'rate': price,
                'amount': amount
            };
            let response = yield _this7[method](_this7.extend(order, params));
            return {
                'info': response,
                'id': response['orderNumber']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            return yield _this8.privatePostCancelOrder({ 'orderNumber': id });
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let response = yield _this9.privatePostWithdraw(_this9.extend({
                'currency': currency.toLowerCase(),
                'amount': amount,
                'address': address // Address must exist in you AddressBook in security settings
            }, params));
            return {
                'info': response,
                'id': undefined
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let prefix = api == 'private' ? api + '/' : '';
        let url = this.urls['api'][api] + this.version + '/1/' + prefix + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let request = { 'nonce': nonce };
            body = this.urlencode(this.extend(request, query));
            let signature = this.hmac(this.encode(body), this.encode(this.secret), 'sha512');
            headers = {
                'Key': this.apiKey,
                'Sign': signature,
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this10.fetch2(path, api, method, params, headers, body);
            if ('result' in response) if (response['result'] != 'true') throw new ExchangeError(_this10.id + ' ' + _this10.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],38:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class bxinth extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'bxinth',
            'name': 'BX.in.th',
            'countries': 'TH', // Thailand
            'rateLimit': 1500,
            'hasCORS': false,
            'hasFetchTickers': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766412-567b1eb4-5ed7-11e7-94a8-ff6a3884f6c5.jpg',
                'api': 'https://bx.in.th/api',
                'www': 'https://bx.in.th',
                'doc': 'https://bx.in.th/info/api'
            },
            'api': {
                'public': {
                    'get': ['', // ticker
                    'options', 'optionbook', 'orderbook', 'pairing', 'trade', 'tradehistory']
                },
                'private': {
                    'post': ['balance', 'biller', 'billgroup', 'billpay', 'cancel', 'deposit', 'getorders', 'history', 'option-issue', 'option-bid', 'option-sell', 'option-myissue', 'option-mybid', 'option-myoptions', 'option-exercise', 'option-cancel', 'option-history', 'order', 'withdrawal', 'withdrawal-history']
                }
            },
            'fees': {
                'trading': {
                    'taker': 0.25 / 100,
                    'maker': 0.25 / 100
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetPairing();
            let keys = Object.keys(markets);
            let result = [];
            for (let p = 0; p < keys.length; p++) {
                let market = markets[keys[p]];
                let id = market['pairing_id'].toString();
                let base = market['secondary_currency'];
                let quote = market['primary_currency'];
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    commonCurrencyCode(currency) {
        // why would they use three letters instead of four for currency codes
        if (currency == 'DAS') return 'DASH';
        if (currency == 'DOG') return 'DOGE';
        return currency;
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostBalance();
            let balance = response['balance'];
            let result = { 'info': balance };
            let currencies = Object.keys(balance);
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                let code = _this2.commonCurrencyCode(currency);
                let account = {
                    'free': parseFloat(balance[currency]['available']),
                    'used': 0.0,
                    'total': parseFloat(balance[currency]['total'])
                };
                account['used'] = account['total'] - account['free'];
                result[code] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetOrderbook(_this3.extend({
                'pairing': _this3.marketId(symbol)
            }, params));
            return _this3.parseOrderBook(orderbook);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': undefined,
            'low': undefined,
            'bid': parseFloat(ticker['orderbook']['bids']['highbid']),
            'ask': parseFloat(ticker['orderbook']['asks']['highbid']),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last_price']),
            'change': parseFloat(ticker['change']),
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['volume_24hours']),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let tickers = yield _this4.publicGet(params);
            let result = {};
            let ids = Object.keys(tickers);
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let ticker = tickers[id];
                let market = _this4.markets_by_id[id];
                let symbol = market['symbol'];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let tickers = yield _this5.publicGet(_this5.extend({
                'pairing': market['id']
            }, params));
            let id = market['id'].toString();
            let ticker = tickers[id];
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = this.parse8601(trade['trade_date']);
        return {
            'id': trade['trade_id'],
            'info': trade,
            'order': trade['order_id'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['trade_type'],
            'price': parseFloat(trade['rate']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetTrade(_this6.extend({
                'pairing': market['id']
            }, params));
            return _this6.parseTrades(response['trades'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let response = yield _this7.privatePostOrder(_this7.extend({
                'pairing': _this7.marketId(symbol),
                'type': side,
                'amount': amount,
                'rate': price
            }, params));
            return {
                'info': response,
                'id': response['order_id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let pairing = undefined; // TODO fixme
            return yield _this8.privatePostCancel({
                'order_id': id,
                'pairing': pairing
            });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/';
        if (path) url += path + '/';
        if (Object.keys(params).length) url += '?' + this.urlencode(params);
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let auth = this.apiKey + nonce.toString() + this.secret;
            let signature = this.hash(this.encode(auth), 'sha256');
            body = this.urlencode(this.extend({
                'key': this.apiKey,
                'nonce': nonce,
                'signature': signature
                // twofa: this.twofa,
            }, params));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.fetch2(path, api, method, params, headers, body);
            if (api == 'public') return response;
            if ('success' in response) if (response['success']) return response;
            throw new ExchangeError(_this9.id + ' ' + _this9.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],39:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class ccex extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'ccex',
            'name': 'C-CEX',
            'countries': ['DE', 'EU'],
            'rateLimit': 1500,
            'hasCORS': false,
            'hasFetchTickers': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766433-16881f90-5ed8-11e7-92f8-3d92cc747a6c.jpg',
                'api': {
                    'tickers': 'https://c-cex.com/t',
                    'public': 'https://c-cex.com/t/api_pub.html',
                    'private': 'https://c-cex.com/t/api.html'
                },
                'www': 'https://c-cex.com',
                'doc': 'https://c-cex.com/?id=api'
            },
            'api': {
                'tickers': {
                    'get': ['coinnames', '{market}', 'pairs', 'prices', 'volume_{coin}']
                },
                'public': {
                    'get': ['balancedistribution', 'markethistory', 'markets', 'marketsummaries', 'orderbook']
                },
                'private': {
                    'get': ['buylimit', 'cancel', 'getbalance', 'getbalances', 'getopenorders', 'getorder', 'getorderhistory', 'mytrades', 'selllimit']
                }
            },
            'fees': {
                'trading': {
                    'taker': 0.2 / 100,
                    'maker': 0.2 / 100
                }
            }
        });
    }

    commonCurrencyCode(currency) {
        if (currency == 'IOT') return 'IoTcoin';
        if (currency == 'BLC') return 'Cryptobullcoin';
        if (currency == 'XID') return 'InternationalDiamond';
        return currency;
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetMarkets();
            let result = [];
            for (let p = 0; p < markets['result'].length; p++) {
                let market = markets['result'][p];
                let id = market['MarketName'];
                let base = market['MarketCurrency'];
                let quote = market['BaseCurrency'];
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                result.push(_this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                }));
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetBalances();
            let balances = response['result'];
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let code = balance['Currency'];
                let currency = _this2.commonCurrencyCode(code);
                let account = {
                    'free': balance['Available'],
                    'used': balance['Pending'],
                    'total': balance['Balance']
                };
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let response = yield _this3.publicGetOrderbook(_this3.extend({
                'market': _this3.marketId(symbol),
                'type': 'both',
                'depth': 100
            }, params));
            let orderbook = response['result'];
            return _this3.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['updated'] * 1000;
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['buy']),
            'ask': parseFloat(ticker['sell']),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['lastprice']),
            'change': undefined,
            'percentage': undefined,
            'average': parseFloat(ticker['avg']),
            'baseVolume': undefined,
            'quoteVolume': this.safeFloat(ticker, 'buysupport'),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let tickers = yield _this4.tickersGetPrices(params);
            let result = { 'info': tickers };
            let ids = Object.keys(tickers);
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let ticker = tickers[id];
                let uppercase = id.toUpperCase();
                let market = undefined;
                let symbol = undefined;
                if (uppercase in _this4.markets_by_id) {
                    market = _this4.markets_by_id[uppercase];
                    symbol = market['symbol'];
                } else {
                    let [base, quote] = uppercase.split('-');
                    base = _this4.commonCurrencyCode(base);
                    quote = _this4.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;
                }
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.tickersGetMarket(_this5.extend({
                'market': market['id'].toLowerCase()
            }, params));
            let ticker = response['ticker'];
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = this.parse8601(trade['TimeStamp']);
        return {
            'id': trade['Id'],
            'info': trade,
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['OrderType'].toLowerCase(),
            'price': trade['Price'],
            'amount': trade['Quantity']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetMarkethistory(_this6.extend({
                'market': market['id'],
                'type': 'both',
                'depth': 100
            }, params));
            return _this6.parseTrades(response['result'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let method = 'privateGet' + _this7.capitalize(side) + type;
            let response = yield _this7[method](_this7.extend({
                'market': _this7.marketId(symbol),
                'quantity': amount,
                'rate': price
            }, params));
            return {
                'info': response,
                'id': response['result']['uuid']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            return yield _this8.privateGetCancel({ 'uuid': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let query = this.keysort(this.extend({
                'a': path,
                'apikey': this.apiKey,
                'nonce': nonce
            }, params));
            url += '?' + this.urlencode(query);
            headers = { 'apisign': this.hmac(this.encode(url), this.encode(this.secret), 'sha512') };
        } else if (api == 'public') {
            url += '?' + this.urlencode(this.extend({
                'a': 'get' + path
            }, params));
        } else {
            url += '/' + this.implodeParams(path, params) + '.json';
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.fetch2(path, api, method, params, headers, body);
            if (api == 'tickers') return response;
            if ('success' in response) if (response['success']) return response;
            throw new ExchangeError(_this9.id + ' ' + _this9.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],40:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class cex extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'cex',
            'name': 'CEX.IO',
            'countries': ['GB', 'EU', 'CY', 'RU'],
            'rateLimit': 1500,
            'hasCORS': true,
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'hasFetchOpenOrders': true,
            'timeframes': {
                '1m': '1m'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',
                'api': 'https://cex.io/api',
                'www': 'https://cex.io',
                'doc': 'https://cex.io/cex-api'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true
            },
            'api': {
                'public': {
                    'get': ['currency_limits/', 'last_price/{pair}/', 'last_prices/{currencies}/', 'ohlcv/hd/{yyyymmdd}/{pair}', 'order_book/{pair}/', 'ticker/{pair}/', 'tickers/{currencies}/', 'trade_history/{pair}/'],
                    'post': ['convert/{pair}', 'price_stats/{pair}']
                },
                'private': {
                    'post': ['active_orders_status/', 'archived_orders/{pair}/', 'balance/', 'cancel_order/', 'cancel_orders/{pair}/', 'cancel_replace_order/{pair}/', 'close_position/{pair}/', 'get_address/', 'get_myfee/', 'get_order/', 'get_order_tx/', 'open_orders/{pair}/', 'open_orders/', 'open_position/{pair}/', 'open_positions/{pair}/', 'place_order/{pair}/']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0,
                    'taker': 0.2 / 100
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetCurrencyLimits();
            let result = [];
            for (let p = 0; p < markets['data']['pairs'].length; p++) {
                let market = markets['data']['pairs'][p];
                let id = market['symbol1'] + '/' + market['symbol2'];
                let symbol = id;
                let [base, quote] = symbol.split('/');
                result.push({
                    'id': id,
                    'info': market,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'precision': {
                        'price': _this.precisionFromString(market['minPrice']),
                        'amount': -1 * Math.log10(market['minLotSize'])
                    },
                    'limits': {
                        'amount': {
                            'min': market['minLotSize'],
                            'max': market['maxLotSize']
                        },
                        'price': {
                            'min': parseFloat(market['minPrice']),
                            'max': parseFloat(market['maxPrice'])
                        },
                        'cost': {
                            'min': market['minLotSizeS2'],
                            'max': undefined
                        }
                    }
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostBalance();
            let result = { 'info': response };
            let ommited = ['username', 'timestamp'];
            let balances = _this2.omit(response, ommited);
            let currencies = Object.keys(balances);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                if (currency in balances) {
                    let account = {
                        'free': _this2.safeFloat(balances[currency], 'available', 0.0),
                        'used': _this2.safeFloat(balances[currency], 'orders', 0.0),
                        'total': 0.0
                    };
                    account['total'] = _this2.sum(account['free'], account['used']);
                    result[currency] = account;
                }
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetOrderBookPair(_this3.extend({
                'pair': _this3.marketId(symbol)
            }, params));
            let timestamp = orderbook['timestamp'] * 1000;
            return _this3.parseOrderBook(orderbook, timestamp);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [ohlcv[0] * 1000, ohlcv[1], ohlcv[2], ohlcv[3], ohlcv[4], ohlcv[5]];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            if (!since) since = _this4.milliseconds() - 86400000; // yesterday
            let ymd = _this4.Ymd(since);
            ymd = ymd.split('-');
            ymd = ymd.join('');
            let request = {
                'pair': market['id'],
                'yyyymmdd': ymd
            };
            let response = yield _this4.publicGetOhlcvHdYyyymmddPair(_this4.extend(request, params));
            let key = 'data' + _this4.timeframes[timeframe];
            let ohlcvs = JSON.parse(response[key]);
            return _this4.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = undefined;
        let iso8601 = undefined;
        if ('timestamp' in ticker) {
            timestamp = parseInt(ticker['timestamp']) * 1000;
            iso8601 = this.iso8601(timestamp);
        }
        let volume = this.safeFloat(ticker, 'volume');
        let high = this.safeFloat(ticker, 'high');
        let low = this.safeFloat(ticker, 'low');
        let bid = this.safeFloat(ticker, 'bid');
        let ask = this.safeFloat(ticker, 'ask');
        let last = this.safeFloat(ticker, 'last');
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': iso8601,
            'high': high,
            'low': low,
            'bid': bid,
            'ask': ask,
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': last,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': volume,
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let currencies = Object.keys(_this5.currencies);
            let response = yield _this5.publicGetTickersCurrencies(_this5.extend({
                'currencies': currencies.join('/')
            }, params));
            let tickers = response['data'];
            let result = {};
            for (let t = 0; t < tickers.length; t++) {
                let ticker = tickers[t];
                let symbol = ticker['pair'].replace(':', '/');
                let market = _this5.markets[symbol];
                result[symbol] = _this5.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let ticker = yield _this6.publicGetTickerPair(_this6.extend({
                'pair': market['id']
            }, params));
            return _this6.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = parseInt(trade['date']) * 1000;
        return {
            'info': trade,
            'id': trade['tid'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['type'],
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let response = yield _this7.publicGetTradeHistoryPair(_this7.extend({
                'pair': market['id']
            }, params));
            return _this7.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let order = {
                'pair': _this8.marketId(symbol),
                'type': side,
                'amount': amount
            };
            if (type == 'limit') {
                order['price'] = price;
            } else {
                // for market buy CEX.io requires the amount of quote currency to spend
                if (side == 'buy') {
                    if (!price) {
                        throw new InvalidOrder('For market buy orders ' + _this8.id + " requires the amount of quote currency to spend, to calculate proper costs call createOrder (symbol, 'market', 'buy', amount, price)");
                    }
                    order['amount'] = amount * price;
                }
                order['order_type'] = type;
            }
            let response = yield _this8.privatePostPlaceOrderPair(_this8.extend(order, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            return yield _this9.privatePostCancelOrder({ 'id': id });
        })();
    }

    parseOrder(order, market = undefined) {
        let timestamp = parseInt(order['time']);
        let symbol = undefined;
        if (!market) {
            let symbol = order['symbol1'] + '/' + order['symbol2'];
            if (symbol in this.markets) market = this.market(symbol);
        }
        let status = order['status'];
        if (status == 'a') {
            status = 'open'; // the unified status
        } else if (status == 'cd') {
            status = 'canceled';
        } else if (status == 'c') {
            status = 'canceled';
        } else if (status == 'd') {
            status = 'closed';
        }
        let price = this.safeFloat(order, 'price');
        let amount = this.safeFloat(order, 'amount');
        let remaining = this.safeFloat(order, 'pending');
        if (!remaining) remaining = this.safeFloat(order, 'remains');
        let filled = amount - remaining;
        let fee = undefined;
        let cost = undefined;
        if (market) {
            symbol = market['symbol'];
            cost = this.safeFloat(order, 'ta:' + market['quote']);
            let baseFee = 'fa:' + market['base'];
            let quoteFee = 'fa:' + market['quote'];
            let feeRate = this.safeFloat(order, 'tradingFeeMaker');
            if (!feeRate) feeRate = this.safeFloat(order, 'tradingFeeTaker', feeRate);
            if (feeRate) feeRate /= 100.0; // convert to mathematically-correct percentage coefficients: 1.0 = 100%
            if (baseFee in order) {
                fee = {
                    'currency': market['base'],
                    'rate': feeRate,
                    'cost': this.safeFloat(order, baseFee)
                };
            } else if (quoteFee in order) {
                fee = {
                    'currency': market['quote'],
                    'rate': feeRate,
                    'cost': this.safeFloat(order, quoteFee)
                };
            }
        }
        if (!cost) cost = price * filled;
        return {
            'id': order['id'],
            'datetime': this.iso8601(timestamp),
            'timestamp': timestamp,
            'status': status,
            'symbol': symbol,
            'type': undefined,
            'side': order['type'],
            'price': price,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'trades': undefined,
            'fee': fee,
            'info': order
        };
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let request = {};
            let method = 'privatePostOpenOrders';
            let market = undefined;
            if (symbol) {
                market = _this10.market(symbol);
                request['pair'] = market['id'];
                method += 'Pair';
            }
            let orders = yield _this10[method](_this10.extend(request, params));
            for (let i = 0; i < orders.length; i++) {
                orders[i] = _this10.extend(orders[i], { 'status': 'open' });
            }
            return _this10.parseOrders(orders, market, since, limit);
        })();
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            let response = yield _this11.privatePostGetOrder(_this11.extend({
                'id': id.toString()
            }, params));
            return _this11.parseOrder(response);
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let auth = nonce + this.uid + this.apiKey;
            let signature = this.hmac(this.encode(auth), this.encode(this.secret));
            body = this.urlencode(this.extend({
                'key': this.apiKey,
                'signature': signature.toUpperCase(),
                'nonce': nonce
            }, query));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this12.fetch2(path, api, method, params, headers, body);
            if (!response) {
                throw new ExchangeError(_this12.id + ' returned ' + _this12.json(response));
            } else if (response == true) {
                return response;
            } else if ('e' in response) {
                if ('ok' in response) if (response['ok'] == 'ok') return response;
                throw new ExchangeError(_this12.id + ' ' + _this12.json(response));
            } else if ('error' in response) {
                if (response['error']) throw new ExchangeError(_this12.id + ' ' + _this12.json(response));
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],41:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const zb = require('./zb.js');
const { ExchangeError, ExchangeNotAvailable } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class chbtc extends zb {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'chbtc',
            'name': 'CHBTC',
            'countries': 'CN',
            'rateLimit': 1000,
            'version': 'v1',
            'hasCORS': false,
            'hasFetchOrder': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28555659-f0040dc2-7109-11e7-9d99-688a438bf9f4.jpg',
                'api': {
                    'public': 'http://api.chbtc.com/data', // no https for public API
                    'private': 'https://trade.chbtc.com/api'
                },
                'www': 'https://trade.chbtc.com/api',
                'doc': 'https://www.chbtc.com/i/developer'
            }
        });
    }

    getMarketFieldName() {
        return 'currency';
    }

    fetchMarkets() {
        return _asyncToGenerator(function* () {
            return {
                'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
                'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' },
                'ETH/CNY': { 'id': 'eth_cny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY' },
                'ETC/CNY': { 'id': 'etc_cny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY' },
                'BTS/CNY': { 'id': 'bts_cny', 'symbol': 'BTS/CNY', 'base': 'BTS', 'quote': 'CNY' },
                // 'EOS/CNY': { 'id': 'eos_cny', 'symbol': 'EOS/CNY', 'base': 'EOS', 'quote': 'CNY' },
                'BCH/CNY': { 'id': 'bcc_cny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY' },
                'HSR/CNY': { 'id': 'hsr_cny', 'symbol': 'HSR/CNY', 'base': 'HSR', 'quote': 'CNY' },
                'QTUM/CNY': { 'id': 'qtum_cny', 'symbol': 'QTUM/CNY', 'base': 'QTUM', 'quote': 'CNY' }
            };
        })();
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.fetch2(path, api, method, params, headers, body);
            if (api == 'private') {
                if ('code' in response) throw new ExchangeError(_this.id + ' ' + _this.json(response));
            }
            if ('result' in response) {
                if (!response['result']) throw new ExchangeError(_this.id + ' ' + _this.json(response));
            }
            return response;
        })();
    }

};
},{"./base/errors":10,"./zb.js":101}],42:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const foxbit = require('./foxbit.js');

// ---------------------------------------------------------------------------

module.exports = class chilebit extends foxbit {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'chilebit',
            'name': 'ChileBit',
            'countries': 'CL',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27991414-1298f0d8-647f-11e7-9c40-d56409266336.jpg',
                'api': {
                    'public': 'https://api.blinktrade.com/api',
                    'private': 'https://api.blinktrade.com/tapi'
                },
                'www': 'https://chilebit.net',
                'doc': 'https://blinktrade.com/docs'
            }
        });
    }
};
},{"./foxbit.js":54}],43:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, NotSupported } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class coincheck extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'coincheck',
            'name': 'coincheck',
            'countries': ['JP', 'ID'],
            'rateLimit': 1500,
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766464-3b5c3c74-5ed9-11e7-840e-31b32968e1da.jpg',
                'api': 'https://coincheck.com/api',
                'www': 'https://coincheck.com',
                'doc': 'https://coincheck.com/documents/exchange/api'
            },
            'api': {
                'public': {
                    'get': ['exchange/orders/rate', 'order_books', 'rate/{pair}', 'ticker', 'trades']
                },
                'private': {
                    'get': ['accounts', 'accounts/balance', 'accounts/leverage_balance', 'bank_accounts', 'deposit_money', 'exchange/orders/opens', 'exchange/orders/transactions', 'exchange/orders/transactions_pagination', 'exchange/leverage/positions', 'lending/borrows/matches', 'send_money', 'withdraws'],
                    'post': ['bank_accounts', 'deposit_money/{id}/fast', 'exchange/orders', 'exchange/transfers/to_leverage', 'exchange/transfers/from_leverage', 'lending/borrows', 'lending/borrows/{id}/repay', 'send_money', 'withdraws'],
                    'delete': ['bank_accounts/{id}', 'exchange/orders/{id}', 'withdraws/{id}']
                }
            },
            'markets': {
                'BTC/JPY': { 'id': 'btc_jpy', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' } // the only real pair
                // 'ETH/JPY': { 'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY' },
                // 'ETC/JPY': { 'id': 'etc_jpy', 'symbol': 'ETC/JPY', 'base': 'ETC', 'quote': 'JPY' },
                // 'DAO/JPY': { 'id': 'dao_jpy', 'symbol': 'DAO/JPY', 'base': 'DAO', 'quote': 'JPY' },
                // 'LSK/JPY': { 'id': 'lsk_jpy', 'symbol': 'LSK/JPY', 'base': 'LSK', 'quote': 'JPY' },
                // 'FCT/JPY': { 'id': 'fct_jpy', 'symbol': 'FCT/JPY', 'base': 'FCT', 'quote': 'JPY' },
                // 'XMR/JPY': { 'id': 'xmr_jpy', 'symbol': 'XMR/JPY', 'base': 'XMR', 'quote': 'JPY' },
                // 'REP/JPY': { 'id': 'rep_jpy', 'symbol': 'REP/JPY', 'base': 'REP', 'quote': 'JPY' },
                // 'XRP/JPY': { 'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY' },
                // 'ZEC/JPY': { 'id': 'zec_jpy', 'symbol': 'ZEC/JPY', 'base': 'ZEC', 'quote': 'JPY' },
                // 'XEM/JPY': { 'id': 'xem_jpy', 'symbol': 'XEM/JPY', 'base': 'XEM', 'quote': 'JPY' },
                // 'LTC/JPY': { 'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY' },
                // 'DASH/JPY': { 'id': 'dash_jpy', 'symbol': 'DASH/JPY', 'base': 'DASH', 'quote': 'JPY' },
                // 'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
                // 'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
                // 'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },
                // 'FCT/BTC': { 'id': 'fct_btc', 'symbol': 'FCT/BTC', 'base': 'FCT', 'quote': 'BTC' },
                // 'XMR/BTC': { 'id': 'xmr_btc', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },
                // 'REP/BTC': { 'id': 'rep_btc', 'symbol': 'REP/BTC', 'base': 'REP', 'quote': 'BTC' },
                // 'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
                // 'ZEC/BTC': { 'id': 'zec_btc', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },
                // 'XEM/BTC': { 'id': 'xem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC' },
                // 'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
                // 'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' },
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let balances = yield _this.privateGetAccountsBalance();
            let result = { 'info': balances };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let account = _this.account();
                if (lowercase in balances) account['free'] = parseFloat(balances[lowercase]);
                let reserved = lowercase + '_reserved';
                if (reserved in balances) account['used'] = parseFloat(balances[reserved]);
                account['total'] = _this.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            if (symbol != 'BTC/JPY') throw new NotSupported(_this2.id + ' fetchOrderBook () supports BTC/JPY only');
            let orderbook = yield _this2.publicGetOrderBooks(params);
            return _this2.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            if (symbol != 'BTC/JPY') throw new NotSupported(_this3.id + ' fetchTicker () supports BTC/JPY only');
            let ticker = yield _this3.publicGetTicker(params);
            let timestamp = ticker['timestamp'] * 1000;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume']),
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = this.parse8601(trade['created_at']);
        return {
            'id': trade['id'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['order_type'],
            'price': parseFloat(trade['rate']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            if (symbol != 'BTC/JPY') throw new NotSupported(_this4.id + ' fetchTrades () supports BTC/JPY only');
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTrades(params);
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let prefix = '';
            let order = {
                'pair': _this5.marketId(symbol)
            };
            if (type == 'market') {
                let order_type = type + '_' + side;
                order['order_type'] = order_type;
                let prefix = side == 'buy' ? order_type + '_' : '';
                order[prefix + 'amount'] = amount;
            } else {
                order['order_type'] = side;
                order['rate'] = price;
                order['amount'] = amount;
            }
            let response = yield _this5.privatePostExchangeOrders(_this5.extend(order, params));
            return {
                'info': response,
                'id': response['id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privateDeleteExchangeOrdersId({ 'id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let queryString = '';
            if (method == 'GET') {
                if (Object.keys(query).length) url += '?' + this.urlencode(this.keysort(query));
            } else {
                if (Object.keys(query).length) {
                    body = this.urlencode(this.keysort(query));
                    queryString = body;
                }
            }
            let auth = nonce + url + queryString;
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'ACCESS-KEY': this.apiKey,
                'ACCESS-NONCE': nonce,
                'ACCESS-SIGNATURE': this.hmac(this.encode(auth), this.encode(this.secret))
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.fetch2(path, api, method, params, headers, body);
            if (api == 'public') return response;
            if ('success' in response) if (response['success']) return response;
            throw new ExchangeError(_this7.id + ' ' + _this7.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],44:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class coinfloor extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'coinfloor',
            'name': 'coinfloor',
            'rateLimit': 1000,
            'countries': 'UK',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28246081-623fc164-6a1c-11e7-913f-bac0d5576c90.jpg',
                'api': 'https://webapi.coinfloor.co.uk:8090/bist',
                'www': 'https://www.coinfloor.co.uk',
                'doc': ['https://github.com/coinfloor/api', 'https://www.coinfloor.co.uk/api']
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true
            },
            'api': {
                'public': {
                    'get': ['{id}/ticker/', '{id}/order_book/', '{id}/transactions/']
                },
                'private': {
                    'post': ['{id}/balance/', '{id}/user_transactions/', '{id}/open_orders/', '{id}/cancel_order/', '{id}/buy/', '{id}/sell/', '{id}/buy_market/', '{id}/sell_market/', '{id}/estimate_sell_market/', '{id}/estimate_buy_market/']
                }
            },
            'markets': {
                'BTC/GBP': { 'id': 'XBT/GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
                'BTC/EUR': { 'id': 'XBT/EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
                'BTC/USD': { 'id': 'XBT/USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
                'BTC/PLN': { 'id': 'XBT/PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
                'BCH/GBP': { 'id': 'BCH/GBP', 'symbol': 'BCH/GBP', 'base': 'BCH', 'quote': 'GBP' }
            }
        });
    }

    fetchBalance(params = {}) {
        let symbol = undefined;
        if ('symbol' in params) symbol = params['symbol'];
        if ('id' in params) symbol = params['id'];
        if (!symbol) throw new ExchangeError(this.id + ' fetchBalance requires a symbol param');
        // todo parse balance
        return this.privatePostIdBalance({
            'id': this.marketId(symbol)
        });
    }

    fetchOrderBook(symbol, params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this.publicGetIdOrderBook(_this.extend({
                'id': _this.marketId(symbol)
            }, params));
            return _this.parseOrderBook(orderbook);
        })();
    }

    parseTicker(ticker, market = undefined) {
        // rewrite to get the timestamp from HTTP headers
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let vwap = this.safeFloat(ticker, 'vwap');
        let baseVolume = parseFloat(ticker['volume']);
        let quoteVolume = undefined;
        if (typeof vwap != 'undefined') {
            quoteVolume = baseVolume * vwap;
        }
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['bid']),
            'ask': parseFloat(ticker['ask']),
            'vwap': vwap,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last']),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker
        };
    }

    fetchTicker(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let market = _this2.market(symbol);
            let ticker = yield _this2.publicGetIdTicker(_this2.extend({
                'id': market['id']
            }, params));
            return _this2.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['date'] * 1000;
        return {
            'info': trade,
            'id': trade['tid'].toString(),
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetIdTransactions(_this3.extend({
                'id': market['id']
            }, params));
            return _this3.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let order = { 'id': _this4.marketId(symbol) };
            let method = 'privatePostId' + _this4.capitalize(side);
            if (type == 'market') {
                order['quantity'] = amount;
                method += 'Market';
            } else {
                order['price'] = price;
                order['amount'] = amount;
            }
            return _this4[method](_this4.extend(order, params));
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            return yield _this5.privatePostIdCancelOrder({ 'id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        // curl -k -u '[User ID]/[API key]:[Passphrase]' https://webapi.coinfloor.co.uk:8090/bist/XBT/GBP/balance/
        let url = this.urls['api'] + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            body = this.urlencode(this.extend({ 'nonce': nonce }, query));
            let auth = this.uid + '/' + this.apiKey + ':' + this.password;
            let signature = this.stringToBase64(auth);
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': 'Basic ' + signature
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],45:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class coingi extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'coingi',
            'name': 'Coingi',
            'rateLimit': 1000,
            'countries': ['PA', 'BG', 'CN', 'US'], // Panama, Bulgaria, China, US
            'hasFetchTickers': true,
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg',
                'api': {
                    'www': 'https://coingi.com',
                    'current': 'https://api.coingi.com',
                    'user': 'https://api.coingi.com'
                },
                'www': 'https://coingi.com',
                'doc': 'http://docs.coingi.apiary.io/'
            },
            'api': {
                'www': {
                    'get': ['']
                },
                'current': {
                    'get': ['order-book/{pair}/{askCount}/{bidCount}/{depth}', 'transactions/{pair}/{maxCount}', '24hour-rolling-aggregation']
                },
                'user': {
                    'post': ['balance', 'add-order', 'cancel-order', 'orders', 'transactions', 'create-crypto-withdrawal']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'taker': 0.2 / 100,
                    'maker': 0.2 / 100
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BTC': 0.001,
                        'LTC': 0.01,
                        'DOGE': 2,
                        'PPC': 0.02,
                        'VTC': 0.2,
                        'NMC': 2,
                        'DASH': 0.002,
                        'USD': 10,
                        'EUR': 10
                    },
                    'deposit': {
                        'BTC': 0,
                        'LTC': 0,
                        'DOGE': 0,
                        'PPC': 0,
                        'VTC': 0,
                        'NMC': 0,
                        'DASH': 0,
                        'USD': 5,
                        'EUR': 1
                    }
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            _this.parseJsonResponse = false;
            let response = yield _this.wwwGet();
            _this.parseJsonResponse = true;
            let parts = response.split('do=currencyPairSelector-selectCurrencyPair" class="active">');
            let currencyParts = parts[1].split('<div class="currency-pair-label">');
            let result = [];
            for (let i = 1; i < currencyParts.length; i++) {
                let currencyPart = currencyParts[i];
                let idParts = currencyPart.split('</div>');
                let id = idParts[0];
                let symbol = id;
                id = id.replace('/', '-');
                id = id.toLowerCase();
                let [base, quote] = symbol.split('/');
                let precision = {
                    'amount': 8,
                    'price': 8
                };
                let lot = Math.pow(10, -precision['amount']);
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': id,
                    'lot': lot,
                    'active': true,
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': lot,
                            'max': Math.pow(10, precision['amount'])
                        },
                        'price': {
                            'min': Math.pow(10, -precision['price']),
                            'max': undefined
                        },
                        'cost': {
                            'min': 0,
                            'max': undefined
                        }
                    }
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let lowercaseCurrencies = [];
            let currencies = Object.keys(_this2.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                lowercaseCurrencies.push(currency.toLowerCase());
            }
            let balances = yield _this2.userPostBalance({
                'currencies': lowercaseCurrencies.join(',')
            });
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency']['name'];
                currency = currency.toUpperCase();
                let account = {
                    'free': balance['available'],
                    'used': balance['blocked'] + balance['inOrders'] + balance['withdrawing'],
                    'total': 0.0
                };
                account['total'] = _this2.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let orderbook = yield _this3.currentGetOrderBookPairAskCountBidCountDepth(_this3.extend({
                'pair': market['id'],
                'askCount': 512, // maximum returned number of asks 1-512
                'bidCount': 512, // maximum returned number of bids 1-512
                'depth': 32 // maximum number of depth range steps 1-32
            }, params));
            return _this3.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'baseAmount');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': ticker['high'],
            'low': ticker['low'],
            'bid': ticker['highestBid'],
            'ask': ticker['lowestAsk'],
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': undefined,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': ticker['baseVolume'],
            'quoteVolume': ticker['counterVolume'],
            'info': ticker
        };
        return ticker;
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.currentGet24hourRollingAggregation(params);
            let result = {};
            for (let t = 0; t < response.length; t++) {
                let ticker = response[t];
                let base = ticker['currencyPair']['base'].toUpperCase();
                let quote = ticker['currencyPair']['counter'].toUpperCase();
                let symbol = base + '/' + quote;
                let market = undefined;
                if (symbol in _this4.markets) {
                    market = _this4.markets[symbol];
                }
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let tickers = yield _this5.fetchTickers(undefined, params);
            if (symbol in tickers) return tickers[symbol];
            throw new ExchangeError(_this5.id + ' return did not contain ' + symbol);
        })();
    }

    parseTrade(trade, market = undefined) {
        if (!market) market = this.markets_by_id[trade['currencyPair']];
        return {
            'id': trade['id'],
            'info': trade,
            'timestamp': trade['timestamp'],
            'datetime': this.iso8601(trade['timestamp']),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined, // type
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.currentGetTransactionsPairMaxCount(_this6.extend({
                'pair': market['id'],
                'maxCount': 128
            }, params));
            return _this6.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let order = {
                'currencyPair': _this7.marketId(symbol),
                'volume': amount,
                'price': price,
                'orderType': side == 'buy' ? 0 : 1
            };
            let response = yield _this7.userPostAddOrder(_this7.extend(order, params));
            return {
                'info': response,
                'id': response['result']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            return yield _this8.userPostCancelOrder({ 'orderId': id });
        })();
    }

    sign(path, api = 'current', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        if (api != 'www') {
            url += '/' + api + '/' + this.implodeParams(path, params);
        }
        let query = this.omit(params, this.extractParams(path));
        if (api == 'current') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else if (api == 'user') {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let request = this.extend({
                'token': this.apiKey,
                'nonce': nonce
            }, query);
            let auth = nonce.toString() + '$' + this.apiKey;
            request['signature'] = this.hmac(this.encode(auth), this.encode(this.secret));
            body = this.json(request);
            headers = {
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'current', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.fetch2(path, api, method, params, headers, body);
            if (typeof response != 'string') {
                if ('errors' in response) throw new ExchangeError(_this9.id + ' ' + _this9.json(response));
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],46:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class coinmarketcap extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'coinmarketcap',
            'name': 'CoinMarketCap',
            'rateLimit': 10000,
            'version': 'v1',
            'countries': 'US',
            'hasCORS': true,
            'hasPrivateAPI': false,
            'hasCreateOrder': false,
            'hasCancelOrder': false,
            'hasFetchBalance': false,
            'hasFetchOrderBook': false,
            'hasFetchTrades': false,
            'hasFetchTickers': true,
            'hasFetchCurrencies': true,
            'has': {
                'fetchCurrencies': true
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg',
                'api': 'https://api.coinmarketcap.com',
                'www': 'https://coinmarketcap.com',
                'doc': 'https://coinmarketcap.com/api'
            },
            'requiredCredentials': {
                'apiKey': false,
                'secret': false
            },
            'api': {
                'public': {
                    'get': ['ticker/', 'ticker/{id}/', 'global/']
                }
            },
            'currencyCodes': ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'EUR', 'GBP', 'HKD', 'IDR', 'INR', 'JPY', 'KRW', 'MXN', 'RUB', 'USD']
        });
    }

    fetchOrderBook(symbol, params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            throw new ExchangeError('Fetching order books is not supported by the API of ' + _this.id);
        })();
    }

    fetchMarkets() {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this2.publicGetTicker({
                'limit': 0
            });
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let currencies = _this2.currencyCodes;
                for (let i = 0; i < currencies.length; i++) {
                    let quote = currencies[i];
                    let quoteId = quote.toLowerCase();
                    let base = market['symbol'];
                    let baseId = market['id'];
                    let symbol = base + '/' + quote;
                    let id = baseId + '/' + quote;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'baseId': baseId,
                        'quoteId': quoteId,
                        'info': market
                    });
                }
            }
            return result;
        })();
    }

    fetchGlobal(currency = 'USD') {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let request = {};
            if (currency) request['convert'] = currency;
            return yield _this3.publicGetGlobal(request);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        if ('last_updated' in ticker) if (ticker['last_updated']) timestamp = parseInt(ticker['last_updated']) * 1000;
        let change = undefined;
        if ('percent_change_24h' in ticker) if (ticker['percent_change_24h']) change = this.safeFloat(ticker, 'percent_change_24h');
        let last = undefined;
        let symbol = undefined;
        let volume = undefined;
        if (market) {
            let priceKey = 'price_' + market['quoteId'];
            if (priceKey in ticker) if (ticker[priceKey]) last = this.safeFloat(ticker, priceKey);
            symbol = market['symbol'];
            let volumeKey = '24h_volume_' + market['quoteId'];
            if (volumeKey in ticker) if (ticker[volumeKey]) volume = this.safeFloat(ticker, volumeKey);
        }
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': undefined,
            'low': undefined,
            'bid': undefined,
            'ask': undefined,
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': last,
            'change': change,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': undefined,
            'quoteVolume': volume,
            'info': ticker
        };
    }

    fetchTickers(currency = 'USD', params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let request = {
                'limit': 10000
            };
            if (currency) request['convert'] = currency;
            let response = yield _this4.publicGetTicker(_this4.extend(request, params));
            let tickers = {};
            for (let t = 0; t < response.length; t++) {
                let ticker = response[t];
                let id = ticker['id'] + '/' + currency;
                let symbol = id;
                let market = undefined;
                if (id in _this4.markets_by_id) {
                    market = _this4.markets_by_id[id];
                    symbol = market['symbol'];
                }
                tickers[symbol] = _this4.parseTicker(ticker, market);
            }
            return tickers;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let request = _this5.extend({
                'convert': market['quote'],
                'id': market['baseId']
            }, params);
            let response = yield _this5.publicGetTickerId(request);
            let ticker = response[0];
            return _this5.parseTicker(ticker, market);
        })();
    }

    fetchCurrencies(params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let currencies = yield _this6.publicGetTicker(_this6.extend({
                'limit': 0
            }, params));
            let result = {};
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let id = currency['symbol'];
                // todo: will need to rethink the fees
                // to add support for multiple withdrawal/deposit methods and
                // differentiated fees for each particular method
                let precision = 8; // default precision, todo: fix "magic constants"
                let code = _this6.commonCurrencyCode(id);
                result[code] = {
                    'id': id,
                    'code': code,
                    'info': currency,
                    'name': currency['name'],
                    'active': true,
                    'status': 'ok',
                    'fee': undefined, // todo: redesign
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'price': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        },
                        'withdraw': {
                            'min': undefined,
                            'max': undefined
                        }
                    }
                };
            }
            return result;
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (Object.keys(query).length) url += '?' + this.urlencode(query);
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.fetch2(path, api, method, params, headers, body);
            if ('error' in response) {
                if (response['error']) {
                    throw new ExchangeError(_this7.id + ' ' + _this7.json(response));
                }
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],47:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class coinmate extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'coinmate',
            'name': 'CoinMate',
            'countries': ['GB', 'CZ'], // UK, Czech Republic
            'rateLimit': 1000,
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27811229-c1efb510-606c-11e7-9a36-84ba2ce412d8.jpg',
                'api': 'https://coinmate.io/api',
                'www': 'https://coinmate.io',
                'doc': ['http://docs.coinmate.apiary.io', 'https://coinmate.io/developers']
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true
            },
            'api': {
                'public': {
                    'get': ['orderBook', 'ticker', 'transactions']
                },
                'private': {
                    'post': ['balances', 'bitcoinWithdrawal', 'bitcoinDepositAddresses', 'buyInstant', 'buyLimit', 'cancelOrder', 'cancelOrderWithInfo', 'createVoucher', 'openOrders', 'redeemVoucher', 'sellInstant', 'sellLimit', 'transactionHistory', 'unconfirmedBitcoinDeposits']
                }
            },
            'markets': {
                'BTC/EUR': { 'id': 'BTC_EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'precision': { 'amount': 4, 'price': 2 } },
                'BTC/CZK': { 'id': 'BTC_CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK', 'precision': { 'amount': 4, 'price': 2 } },
                'LTC/BTC': { 'id': 'LTC_BTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'precision': { 'amount': 4, 'price': 5 } }
            },
            'fees': {
                'trading': {
                    'maker': 0.0005,
                    'taker': 0.0035
                }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostBalances();
            let balances = response['data'];
            let result = { 'info': balances };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this.account();
                if (currency in balances) {
                    account['free'] = balances[currency]['available'];
                    account['used'] = balances[currency]['reserved'];
                    account['total'] = balances[currency]['balance'];
                }
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this2.publicGetOrderBook(_this2.extend({
                'currencyPair': _this2.marketId(symbol),
                'groupByPriceLimit': 'False'
            }, params));
            let orderbook = response['data'];
            let timestamp = orderbook['timestamp'] * 1000;
            return _this2.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this3.publicGetTicker(_this3.extend({
                'currencyPair': _this3.marketId(symbol)
            }, params));
            let ticker = response['data'];
            let timestamp = ticker['timestamp'] * 1000;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['amount']),
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        if (!market) market = this.markets_by_id[trade['currencyPair']];
        return {
            'id': trade['transactionId'],
            'info': trade,
            'timestamp': trade['timestamp'],
            'datetime': this.iso8601(trade['timestamp']),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTransactions(_this4.extend({
                'currencyPair': market['id'],
                'minutesIntoHistory': 10
            }, params));
            return _this4.parseTrades(response['data'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let method = 'privatePost' + _this5.capitalize(side);
            let order = {
                'currencyPair': _this5.marketId(symbol)
            };
            if (type == 'market') {
                if (side == 'buy') order['total'] = amount; // amount in fiat
                else order['amount'] = amount; // amount in fiat
                method += 'Instant';
            } else {
                order['amount'] = amount; // amount in crypto
                order['price'] = price;
                method += _this5.capitalize(type);
            }
            let response = yield _this5[method](self.extend(order, params));
            return {
                'info': response,
                'id': response['data'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCancelOrder({ 'orderId': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + path;
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let auth = nonce + this.uid + this.apiKey;
            let signature = this.hmac(this.encode(auth), this.encode(this.secret));
            body = this.urlencode(this.extend({
                'clientId': this.uid,
                'nonce': nonce,
                'publicKey': this.apiKey,
                'signature': signature.toUpperCase()
            }, params));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.fetch2(path, api, method, params, headers, body);
            if ('error' in response) if (response['error']) throw new ExchangeError(_this7.id + ' ' + _this7.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],48:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class coinsecure extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'coinsecure',
            'name': 'Coinsecure',
            'countries': 'IN', // India
            'rateLimit': 1000,
            'version': 'v1',
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766472-9cbd200a-5ed9-11e7-9551-2267ad7bac08.jpg',
                'api': 'https://api.coinsecure.in',
                'www': 'https://coinsecure.in',
                'doc': ['https://api.coinsecure.in', 'https://github.com/coinsecure/plugins']
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': false
            },
            'api': {
                'public': {
                    'get': ['bitcoin/search/confirmation/{txid}', 'exchange/ask/low', 'exchange/ask/orders', 'exchange/bid/high', 'exchange/bid/orders', 'exchange/lastTrade', 'exchange/max24Hr', 'exchange/min24Hr', 'exchange/ticker', 'exchange/trades']
                },
                'private': {
                    'get': ['mfa/authy/call', 'mfa/authy/sms', 'netki/search/{netkiName}', 'user/bank/otp/{number}', 'user/kyc/otp/{number}', 'user/profile/phone/otp/{number}', 'user/wallet/coin/address/{id}', 'user/wallet/coin/deposit/confirmed/all', 'user/wallet/coin/deposit/confirmed/{id}', 'user/wallet/coin/deposit/unconfirmed/all', 'user/wallet/coin/deposit/unconfirmed/{id}', 'user/wallet/coin/wallets', 'user/exchange/bank/fiat/accounts', 'user/exchange/bank/fiat/balance/available', 'user/exchange/bank/fiat/balance/pending', 'user/exchange/bank/fiat/balance/total', 'user/exchange/bank/fiat/deposit/cancelled', 'user/exchange/bank/fiat/deposit/unverified', 'user/exchange/bank/fiat/deposit/verified', 'user/exchange/bank/fiat/withdraw/cancelled', 'user/exchange/bank/fiat/withdraw/completed', 'user/exchange/bank/fiat/withdraw/unverified', 'user/exchange/bank/fiat/withdraw/verified', 'user/exchange/ask/cancelled', 'user/exchange/ask/completed', 'user/exchange/ask/pending', 'user/exchange/bid/cancelled', 'user/exchange/bid/completed', 'user/exchange/bid/pending', 'user/exchange/bank/coin/addresses', 'user/exchange/bank/coin/balance/available', 'user/exchange/bank/coin/balance/pending', 'user/exchange/bank/coin/balance/total', 'user/exchange/bank/coin/deposit/cancelled', 'user/exchange/bank/coin/deposit/unverified', 'user/exchange/bank/coin/deposit/verified', 'user/exchange/bank/coin/withdraw/cancelled', 'user/exchange/bank/coin/withdraw/completed', 'user/exchange/bank/coin/withdraw/unverified', 'user/exchange/bank/coin/withdraw/verified', 'user/exchange/bank/summary', 'user/exchange/coin/fee', 'user/exchange/fiat/fee', 'user/exchange/kycs', 'user/exchange/referral/coin/paid', 'user/exchange/referral/coin/successful', 'user/exchange/referral/fiat/paid', 'user/exchange/referrals', 'user/exchange/trade/summary', 'user/login/token/{token}', 'user/summary', 'user/wallet/summary', 'wallet/coin/withdraw/cancelled', 'wallet/coin/withdraw/completed', 'wallet/coin/withdraw/unverified', 'wallet/coin/withdraw/verified'],
                    'post': ['login', 'login/initiate', 'login/password/forgot', 'mfa/authy/initiate', 'mfa/ga/initiate', 'signup', 'user/netki/update', 'user/profile/image/update', 'user/exchange/bank/coin/withdraw/initiate', 'user/exchange/bank/coin/withdraw/newVerifycode', 'user/exchange/bank/fiat/withdraw/initiate', 'user/exchange/bank/fiat/withdraw/newVerifycode', 'user/password/change', 'user/password/reset', 'user/wallet/coin/withdraw/initiate', 'wallet/coin/withdraw/newVerifycode'],
                    'put': ['signup/verify/{token}', 'user/exchange/kyc', 'user/exchange/bank/fiat/deposit/new', 'user/exchange/ask/new', 'user/exchange/bid/new', 'user/exchange/instant/buy', 'user/exchange/instant/sell', 'user/exchange/bank/coin/withdraw/verify', 'user/exchange/bank/fiat/account/new', 'user/exchange/bank/fiat/withdraw/verify', 'user/mfa/authy/initiate/enable', 'user/mfa/ga/initiate/enable', 'user/netki/create', 'user/profile/phone/new', 'user/wallet/coin/address/new', 'user/wallet/coin/new', 'user/wallet/coin/withdraw/sendToExchange', 'user/wallet/coin/withdraw/verify'],
                    'delete': ['user/gcm/{code}', 'user/logout', 'user/exchange/bank/coin/withdraw/unverified/cancel/{withdrawID}', 'user/exchange/bank/fiat/deposit/cancel/{depositID}', 'user/exchange/ask/cancel/{orderID}', 'user/exchange/bid/cancel/{orderID}', 'user/exchange/bank/fiat/withdraw/unverified/cancel/{withdrawID}', 'user/mfa/authy/disable/{code}', 'user/mfa/ga/disable/{code}', 'user/profile/phone/delete', 'user/profile/image/delete/{netkiName}', 'user/wallet/coin/withdraw/unverified/cancel/{withdrawID}']
                }
            },
            'markets': {
                'BTC/INR': { 'id': 'BTC/INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' }
            },
            'fees': {
                'trading': {
                    'maker': 0.4 / 100,
                    'taker': 0.4 / 100
                }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privateGetUserExchangeBankSummary();
            let balance = response['message'];
            let coin = {
                'free': balance['availableCoinBalance'],
                'used': balance['pendingCoinBalance'],
                'total': balance['totalCoinBalance']
            };
            let fiat = {
                'free': balance['availableFiatBalance'],
                'used': balance['pendingFiatBalance'],
                'total': balance['totalFiatBalance']
            };
            let result = {
                'info': balance,
                'BTC': coin,
                'INR': fiat
            };
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let bids = yield _this2.publicGetExchangeBidOrders(params);
            let asks = yield _this2.publicGetExchangeAskOrders(params);
            let orderbook = {
                'bids': bids['message'],
                'asks': asks['message']
            };
            return _this2.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'rate', 'vol');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this3.publicGetExchangeTicker(params);
            let ticker = response['message'];
            let timestamp = ticker['timestamp'];
            let baseVolume = parseFloat(ticker['coinvolume']);
            if (symbol == 'BTC/INR') {
                let satoshi = 0.00000001;
                baseVolume = baseVolume * satoshi;
            }
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['lastPrice']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': baseVolume,
                'quoteVolume': parseFloat(ticker['fiatvolume']),
                'info': ticker
            };
        })();
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        return this.publicGetExchangeTrades(params);
    }

    createOrder(market, type, side, amount, price = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let method = 'privatePutUserExchange';
            let order = {};
            if (type == 'market') {
                method += 'Instant' + _this4.capitalize(side);
                if (side == 'buy') order['maxFiat'] = amount;else order['maxVol'] = amount;
            } else {
                let direction = side == 'buy' ? 'Bid' : 'Ask';
                method += direction + 'New';
                order['rate'] = price;
                order['vol'] = amount;
            }
            let response = yield _this4[method](self.extend(order, params));
            return {
                'info': response,
                'id': response['message']['orderID']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            throw new ExchangeError(_this5.id + ' cancelOrder () is not fully implemented yet');
            let method = 'privateDeleteUserExchangeAskCancelOrderId'; // TODO fixme, have to specify order side here
            return yield _this5[method]({ 'orderID': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'private') {
            this.checkRequiredCredentials();
            headers = { 'Authorization': this.apiKey };
            if (Object.keys(query).length) {
                body = this.json(query);
                headers['Content-Type'] = 'application/json';
            }
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this6.fetch2(path, api, method, params, headers, body);
            if ('success' in response) if (response['success']) return response;
            throw new ExchangeError(_this6.id + ' ' + _this6.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],49:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class coinspot extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'coinspot',
            'name': 'CoinSpot',
            'countries': 'AU', // Australia
            'rateLimit': 1000,
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg',
                'api': {
                    'public': 'https://www.coinspot.com.au/pubapi',
                    'private': 'https://www.coinspot.com.au/api'
                },
                'www': 'https://www.coinspot.com.au',
                'doc': 'https://www.coinspot.com.au/api'
            },
            'api': {
                'public': {
                    'get': ['latest']
                },
                'private': {
                    'post': ['orders', 'orders/history', 'my/coin/deposit', 'my/coin/send', 'quote/buy', 'quote/sell', 'my/balances', 'my/orders', 'my/buy', 'my/sell', 'my/buy/cancel', 'my/sell/cancel']
                }
            },
            'markets': {
                'BTC/AUD': { 'id': 'BTC', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
                'LTC/AUD': { 'id': 'LTC', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD' },
                'DOGE/AUD': { 'id': 'DOGE', 'symbol': 'DOGE/AUD', 'base': 'DOGE', 'quote': 'AUD' }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostMyBalances();
            let result = { 'info': response };
            if ('balance' in response) {
                let balances = response['balance'];
                let currencies = Object.keys(balances);
                for (let c = 0; c < currencies.length; c++) {
                    let currency = currencies[c];
                    let uppercase = currency.toUpperCase();
                    let account = {
                        'free': balances[currency],
                        'used': 0.0,
                        'total': balances[currency]
                    };
                    if (uppercase == 'DRK') uppercase = 'DASH';
                    result[uppercase] = account;
                }
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let market = _this2.market(symbol);
            let orderbook = yield _this2.privatePostOrders(_this2.extend({
                'cointype': market['id']
            }, params));
            let result = _this2.parseOrderBook(orderbook, undefined, 'buyorders', 'sellorders', 'rate', 'amount');
            result['bids'] = _this2.sortBy(result['bids'], 0, true);
            result['asks'] = _this2.sortBy(result['asks'], 0);
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this3.publicGetLatest(params);
            let id = _this3.marketId(symbol);
            id = id.toLowerCase();
            let ticker = response['prices'][id];
            let timestamp = _this3.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        return this.privatePostOrdersHistory(this.extend({
            'cointype': this.marketId(symbol)
        }, params));
    }

    createOrder(market, type, side, amount, price = undefined, params = {}) {
        let method = 'privatePostMy' + this.capitalize(side);
        if (type == 'market') throw new ExchangeError(this.id + ' allows limit orders only');
        let order = {
            'cointype': this.marketId(market),
            'amount': amount,
            'rate': price
        };
        return this[method](this.extend(order, params));
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            throw new ExchangeError(_this4.id + ' cancelOrder () is not fully implemented yet');
            let method = 'privatePostMyBuy';
            return yield _this4[method]({ 'id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        if (!this.apiKey) throw new AuthenticationError(this.id + ' requires apiKey for all requests');
        let url = this.urls['api'][api] + '/' + path;
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            body = this.json(this.extend({ 'nonce': nonce }, params));
            headers = {
                'Content-Type': 'application/json',
                'key': this.apiKey,
                'sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],50:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, InsufficientFunds, OrderNotFound, OrderNotCached } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class cryptopia extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'cryptopia',
            'name': 'Cryptopia',
            'rateLimit': 1500,
            'countries': 'NZ', // New Zealand
            'hasCORS': false,
            // obsolete metainfo interface
            'hasFetchTickers': true,
            'hasFetchOrder': true,
            'hasFetchOrders': true,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'hasFetchMyTrades': true,
            'hasFetchCurrencies': true,
            'hasDeposit': true,
            'hasWithdraw': true,
            // new metainfo interface
            'has': {
                'fetchTickers': true,
                'fetchOrder': 'emulated',
                'fetchOrders': 'emulated',
                'fetchOpenOrders': true,
                'fetchClosedOrders': 'emulated',
                'fetchMyTrades': true,
                'fetchCurrencies': true,
                'deposit': true,
                'withdraw': true
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/29484394-7b4ea6e2-84c6-11e7-83e5-1fccf4b2dc81.jpg',
                'api': 'https://www.cryptopia.co.nz/api',
                'www': 'https://www.cryptopia.co.nz',
                'doc': ['https://www.cryptopia.co.nz/Forum/Category/45', 'https://www.cryptopia.co.nz/Forum/Thread/255', 'https://www.cryptopia.co.nz/Forum/Thread/256']
            },
            'api': {
                'public': {
                    'get': ['GetCurrencies', 'GetTradePairs', 'GetMarkets', 'GetMarkets/{id}', 'GetMarkets/{hours}', 'GetMarkets/{id}/{hours}', 'GetMarket/{id}', 'GetMarket/{id}/{hours}', 'GetMarketHistory/{id}', 'GetMarketHistory/{id}/{hours}', 'GetMarketOrders/{id}', 'GetMarketOrders/{id}/{count}', 'GetMarketOrderGroups/{ids}/{count}']
                },
                'private': {
                    'post': ['CancelTrade', 'GetBalance', 'GetDepositAddress', 'GetOpenOrders', 'GetTradeHistory', 'GetTransactions', 'SubmitTip', 'SubmitTrade', 'SubmitTransfer', 'SubmitWithdraw']
                }
            }
        });
    }

    commonCurrencyCode(currency) {
        if (currency == 'CC') return 'CCX';
        if (currency == 'FCN') return 'Facilecoin';
        if (currency == 'NET') return 'NetCoin';
        if (currency == 'BTG') return 'Bitgem';
        if (currency == 'FUEL') return 'FC2'; // FuelCoin != FUEL
        if (currency == 'WRC') return 'WarCoin';
        return currency;
    }

    currencyId(currency) {
        if (currency == 'CCX') return 'CC';
        if (currency == 'Facilecoin') return 'FCN';
        if (currency == 'NetCoin') return 'NET';
        if (currency == 'Bitgem') return 'BTG';
        if (currency == 'FC2') return 'FUEL'; // FuelCoin != FUEL
        return currency;
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.publicGetTradePairs();
            let result = [];
            let markets = response['Data'];
            for (let i = 0; i < markets.length; i++) {
                let market = markets[i];
                let id = market['Id'];
                let symbol = market['Label'];
                let [base, quote] = symbol.split('/');
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                symbol = base + '/' + quote;
                let precision = {
                    'amount': 8,
                    'price': 8
                };
                let amountLimits = {
                    'min': market['MinimumTrade'],
                    'max': market['MaximumTrade']
                };
                let priceLimits = {
                    'min': market['MinimumPrice'],
                    'max': market['MaximumPrice']
                };
                let limits = {
                    'amount': amountLimits,
                    'price': priceLimits
                };
                let active = market['Status'] == 'OK';
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market,
                    'maker': market['TradeFee'] / 100,
                    'taker': market['TradeFee'] / 100,
                    'lot': amountLimits['min'],
                    'active': active,
                    'precision': precision,
                    'limits': limits
                });
            }
            return result;
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.publicGetMarketOrdersId(_this2.extend({
                'id': _this2.marketId(symbol)
            }, params));
            let orderbook = response['Data'];
            return _this2.parseOrderBook(orderbook, undefined, 'Buy', 'Sell', 'Price', 'Volume');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'info': ticker,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['High']),
            'low': parseFloat(ticker['Low']),
            'bid': parseFloat(ticker['BidPrice']),
            'ask': parseFloat(ticker['AskPrice']),
            'vwap': undefined,
            'open': parseFloat(ticker['Open']),
            'close': parseFloat(ticker['Close']),
            'first': undefined,
            'last': parseFloat(ticker['LastPrice']),
            'change': parseFloat(ticker['Change']),
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['Volume']),
            'quoteVolume': parseFloat(ticker['BaseVolume'])
        };
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetMarketId(_this3.extend({
                'id': market['id']
            }, params));
            let ticker = response['Data'];
            return _this3.parseTicker(ticker, market);
        })();
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.publicGetMarkets(params);
            let result = {};
            let tickers = response['Data'];
            for (let i = 0; i < tickers.length; i++) {
                let ticker = tickers[i];
                let id = ticker['TradePairId'];
                let recognized = id in _this4.markets_by_id;
                if (!recognized) throw new ExchangeError(_this4.id + ' fetchTickers() returned unrecognized pair id ' + id);
                let market = _this4.markets_by_id[id];
                let symbol = market['symbol'];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = undefined;
        if ('Timestamp' in trade) {
            timestamp = trade['Timestamp'] * 1000;
        } else if ('TimeStamp' in trade) {
            timestamp = this.parse8601(trade['TimeStamp']);
        }
        let price = this.safeFloat(trade, 'Price');
        if (!price) price = this.safeFloat(trade, 'Rate');
        let cost = this.safeFloat(trade, 'Total');
        let id = this.safeString(trade, 'TradeId');
        if (!market) {
            if ('TradePairId' in trade) if (trade['TradePairId'] in this.markets_by_id) market = this.markets_by_id[trade['TradePairId']];
        }
        let symbol = undefined;
        let fee = undefined;
        if (market) {
            symbol = market['symbol'];
            if ('Fee' in trade) {
                fee = {
                    'currency': market['quote'],
                    'cost': trade['Fee']
                };
            }
        }
        return {
            'id': id,
            'info': trade,
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': 'limit',
            'side': trade['Type'].toLowerCase(),
            'price': price,
            'cost': cost,
            'amount': trade['Amount'],
            'fee': fee
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetMarketHistoryIdHours(_this5.extend({
                'id': market['id'],
                'hours': 24 // default
            }, params));
            let trades = response['Data'];
            return _this5.parseTrades(trades, market, since, limit);
        })();
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let request = {};
            let market = undefined;
            if (symbol) {
                market = _this6.market(symbol);
                request['TradePairId'] = market['id'];
            }
            let response = yield _this6.privatePostGetTradeHistory(_this6.extend(request, params));
            return _this6.parseTrades(response['Data'], market, since, limit);
        })();
    }

    fetchCurrencies(params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.publicGetCurrencies(params);
            let currencies = response['Data'];
            let result = {};
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let id = currency['Symbol'];
                // todo: will need to rethink the fees
                // to add support for multiple withdrawal/deposit methods and
                // differentiated fees for each particular method
                let precision = 8; // default precision, todo: fix "magic constants"
                let code = _this7.commonCurrencyCode(id);
                let active = currency['ListingStatus'] == 'Active';
                let status = currency['Status'].toLowerCase();
                if (status != 'ok') active = false;
                result[code] = {
                    'id': id,
                    'code': code,
                    'info': currency,
                    'name': currency['Name'],
                    'active': active,
                    'status': status,
                    'fee': currency['WithdrawFee'],
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': currency['MinBaseTrade'],
                            'max': Math.pow(10, precision)
                        },
                        'price': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        },
                        'withdraw': {
                            'min': currency['MinWithdraw'],
                            'max': currency['MaxWithdraw']
                        }
                    }
                };
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let response = yield _this8.privatePostGetBalance();
            let balances = response['Data'];
            let result = { 'info': response };
            for (let i = 0; i < balances.length; i++) {
                let balance = balances[i];
                let code = balance['Symbol'];
                let currency = _this8.commonCurrencyCode(code);
                let account = {
                    'free': balance['Available'],
                    'used': 0.0,
                    'total': balance['Total']
                };
                account['used'] = account['total'] - account['free'];
                result[currency] = account;
            }
            return _this8.parseBalance(result);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            if (type == 'market') throw new ExchangeError(_this9.id + ' allows limit orders only');
            yield _this9.loadMarkets();
            let market = _this9.market(symbol);
            price = parseFloat(price);
            amount = parseFloat(amount);
            let request = {
                'TradePairId': market['id'],
                'Type': _this9.capitalize(side),
                'Rate': _this9.priceToPrecision(symbol, price),
                'Amount': _this9.amountToPrecision(symbol, amount)
            };
            let response = yield _this9.privatePostSubmitTrade(_this9.extend(request, params));
            if (!response) throw new ExchangeError(_this9.id + ' createOrder returned unknown error: ' + _this9.json(response));
            let id = undefined;
            let filled = 0.0;
            if ('Data' in response) {
                if ('OrderId' in response['Data']) {
                    if (response['Data']['OrderId']) {
                        id = response['Data']['OrderId'].toString();
                    }
                }
                if ('FilledOrders' in response['Data']) {
                    let filledOrders = response['Data']['FilledOrders'];
                    let filledOrdersLength = filledOrders.length;
                    if (filledOrdersLength) {
                        filled = undefined;
                    }
                }
            }
            let timestamp = _this9.milliseconds();
            let order = {
                'id': id,
                'timestamp': timestamp,
                'datetime': _this9.iso8601(timestamp),
                'status': 'open',
                'symbol': symbol,
                'type': type,
                'side': side,
                'price': price,
                'cost': price * amount,
                'amount': amount,
                'remaining': amount,
                'filled': filled,
                'fee': undefined
                // 'trades': this.parseTrades (order['trades'], market),
            };
            if (id) _this9.orders[id] = order;
            return _this9.extend({ 'info': response }, order);
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let response = undefined;
            try {
                response = yield _this10.privatePostCancelTrade(_this10.extend({
                    'Type': 'Trade',
                    'OrderId': id
                }, params));
                if (id in _this10.orders) _this10.orders[id]['status'] = 'canceled';
            } catch (e) {
                if (_this10.last_json_response) {
                    let message = _this10.safeString(_this10.last_json_response, 'Error');
                    if (message) {
                        if (message.indexOf('does not exist') >= 0) throw new OrderNotFound(_this10.id + ' cancelOrder() error: ' + _this10.last_http_response);
                    }
                }
                throw e;
            }
            return response;
        })();
    }

    parseOrder(order, market = undefined) {
        let symbol = undefined;
        if (market) {
            symbol = market['symbol'];
        } else if ('Market' in order) {
            let id = order['Market'];
            if (id in this.markets_by_id) {
                market = this.markets_by_id[id];
                symbol = market['symbol'];
            }
        }
        let timestamp = this.parse8601(order['TimeStamp']);
        let amount = this.safeFloat(order, 'Amount');
        let remaining = this.safeFloat(order, 'Remaining');
        let filled = amount - remaining;
        return {
            'id': order['OrderId'].toString(),
            'info': this.omit(order, 'status'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'status': order['status'],
            'symbol': symbol,
            'type': 'limit',
            'side': order['Type'].toLowerCase(),
            'price': this.safeFloat(order, 'Rate'),
            'cost': this.safeFloat(order, 'Total'),
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'fee': undefined
            // 'trades': this.parseTrades (order['trades'], market),
        };
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this11.id + ' fetchOrders requires a symbol param');
            yield _this11.loadMarkets();
            let market = _this11.market(symbol);
            let response = yield _this11.privatePostGetOpenOrders({
                // 'Market': market['id'],
                'TradePairId': market['id'] // Cryptopia identifier (not required if 'Market' supplied)
                // 'Count': 100, // default = 100
            }, params);
            let orders = [];
            for (let i = 0; i < response['Data'].length; i++) {
                orders.push(_this11.extend(response['Data'][i], { 'status': 'open' }));
            }
            let openOrders = _this11.parseOrders(orders, market);
            for (let j = 0; j < openOrders.length; j++) {
                _this11.orders[openOrders[j]['id']] = openOrders[j];
            }
            let openOrdersIndexedById = _this11.indexBy(openOrders, 'id');
            let cachedOrderIds = Object.keys(_this11.orders);
            let result = [];
            for (let k = 0; k < cachedOrderIds.length; k++) {
                let id = cachedOrderIds[k];
                if (id in openOrdersIndexedById) {
                    _this11.orders[id] = _this11.extend(_this11.orders[id], openOrdersIndexedById[id]);
                } else {
                    let order = _this11.orders[id];
                    if (order['status'] == 'open') {
                        _this11.orders[id] = _this11.extend(order, {
                            'status': 'closed',
                            'cost': order['amount'] * order['price'],
                            'filled': order['amount'],
                            'remaining': 0.0
                        });
                    }
                }
                let order = _this11.orders[id];
                if (order['symbol'] == symbol) result.push(order);
            }
            return _this11.filterBySinceLimit(result, since, limit);
        })();
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            id = id.toString();
            let orders = yield _this12.fetchOrders(symbol, params);
            for (let i = 0; i < orders.length; i++) {
                if (orders[i]['id'] == id) return orders[i];
            }
            throw new OrderNotCached(_this12.id + ' order ' + id + ' not found in cached .orders, fetchOrder requires .orders (de)serialization implemented for this method to work properly');
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            let orders = yield _this13.fetchOrders(symbol, params);
            let result = [];
            for (let i = 0; i < orders.length; i++) {
                if (orders[i]['status'] == 'open') result.push(orders[i]);
            }
            return result;
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            let orders = yield _this14.fetchOrders(symbol, params);
            let result = [];
            for (let i = 0; i < orders.length; i++) {
                if (orders[i]['status'] == 'closed') result.push(orders[i]);
            }
            return result;
        })();
    }

    fetchDepositAddress(currency, params = {}) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            let currencyId = _this15.currencyId(currency);
            let response = yield _this15.privatePostGetDepositAddress(_this15.extend({
                'Currency': currencyId
            }, params));
            let address = _this15.safeString(response['Data'], 'BaseAddress');
            if (!address) address = _this15.safeString(response['Data'], 'Address');
            return {
                'currency': currency,
                'address': address,
                'status': 'ok',
                'info': response
            };
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this16 = this;

        return _asyncToGenerator(function* () {
            let currencyId = _this16.currencyId(currency);
            let response = yield _this16.privatePostSubmitWithdraw(_this16.extend({
                'Currency': currencyId,
                'Amount': amount,
                'Address': address // Address must exist in you AddressBook in security settings
            }, params));
            return {
                'info': response,
                'id': response['Data']
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            body = this.json(query);
            let hash = this.hash(this.encode(body), 'md5', 'base64');
            let secret = this.base64ToBinary(this.secret);
            let uri = this.encodeURIComponent(url);
            let lowercase = uri.toLowerCase();
            let payload = this.apiKey + method + lowercase + nonce + this.binaryToString(hash);
            let signature = this.hmac(this.encode(payload), secret, 'sha256', 'base64');
            let auth = 'amx ' + this.apiKey + ':' + this.binaryToString(signature) + ':' + nonce;
            headers = {
                'Content-Type': 'application/json',
                'Authorization': auth
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this17 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this17.fetch2(path, api, method, params, headers, body);
            if (response) {
                if ('Success' in response) if (response['Success']) {
                    return response;
                } else if ('Error' in response) {
                    if (response['Error'] == 'Insufficient Funds.') throw new InsufficientFunds(_this17.id + ' ' + _this17.json(response));
                }
            }
            throw new ExchangeError(_this17.id + ' ' + _this17.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],51:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const liqui = require('./liqui.js');

// ---------------------------------------------------------------------------

module.exports = class dsx extends liqui {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'dsx',
            'name': 'DSX',
            'countries': 'UK',
            'rateLimit': 1500,
            'hasCORS': false,
            'hasFetchOrder': true,
            'hasFetchOrders': true,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'hasFetchTickers': true,
            'hasFetchMyTrades': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27990275-1413158a-645a-11e7-931c-94717f7510e3.jpg',
                'api': {
                    'public': 'https://dsx.uk/mapi', // market data
                    'private': 'https://dsx.uk/tapi', // trading
                    'dwapi': 'https://dsx.uk/dwapi' // deposit/withdraw
                },
                'www': 'https://dsx.uk',
                'doc': ['https://api.dsx.uk', 'https://dsx.uk/api_docs/public', 'https://dsx.uk/api_docs/private', '']
            },
            'api': {
                // market data (public)
                'public': {
                    'get': ['barsFromMoment/{id}/{period}/{start}', // empty reply :\
                    'depth/{pair}', 'info', 'lastBars/{id}/{period}/{amount}', // period is (m, h or d)
                    'periodBars/{id}/{period}/{start}/{end}', 'ticker/{pair}', 'trades/{pair}']
                },
                // trading (private)
                'private': {
                    'post': ['getInfo', 'TransHistory', 'TradeHistory', 'OrderHistory', 'ActiveOrders', 'Trade', 'CancelOrder']
                },
                // deposit / withdraw (private)
                'dwapi': {
                    'post': ['getCryptoDepositAddress', 'cryptoWithdraw', 'fiatWithdraw', 'getTransactionStatus', 'getTransactions']
                }
            }
        });
    }

    getBaseQuoteFromMarketId(id) {
        let uppercase = id.toUpperCase();
        let base = uppercase.slice(0, 3);
        let quote = uppercase.slice(3, 6);
        base = this.commonCurrencyCode(base);
        quote = this.commonCurrencyCode(quote);
        return [base, quote];
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            yield _this.loadMarkets();
            let response = yield _this.privatePostGetInfo();
            let balances = response['return'];
            let result = { 'info': balances };
            let funds = balances['funds'];
            let currencies = Object.keys(funds);
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                let uppercase = currency.toUpperCase();
                uppercase = _this.commonCurrencyCode(uppercase);
                let account = {
                    'free': funds[currency],
                    'used': 0.0,
                    'total': balances['total'][currency]
                };
                account['used'] = account['total'] - account['free'];
                result[uppercase] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['updated'] * 1000;
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'high'),
            'low': this.safeFloat(ticker, 'low'),
            'bid': this.safeFloat(ticker, 'buy'),
            'ask': this.safeFloat(ticker, 'sell'),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': this.safeFloat(ticker, 'last'),
            'change': undefined,
            'percentage': undefined,
            'average': 1 / this.safeFloat(ticker, 'avg'),
            'baseVolume': this.safeFloat(ticker, 'vol'),
            'quoteVolume': this.safeFloat(ticker, 'vol_cur'),
            'info': ticker
        };
    }

    getOrderIdKey() {
        return 'orderId';
    }

    signBodyWithSecret(body) {
        return this.decode(this.hmac(this.encode(body), this.encode(this.secret), 'sha512', 'base64'));
    }

    getVersionString() {
        return ''; // they don't prepend version number to public URLs as other BTC-e clones do
    }
};
},{"./liqui.js":74}],52:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class exmo extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'exmo',
            'name': 'EXMO',
            'countries': ['ES', 'RU'], // Spain, Russia
            'rateLimit': 1000, // once every 350 ms ≈ 180 requests per minute ≈ 3 requests per second
            'version': 'v1',
            'hasCORS': false,
            'hasFetchTickers': true,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg',
                'api': 'https://api.exmo.com',
                'www': 'https://exmo.me',
                'doc': ['https://exmo.me/en/api_doc', 'https://github.com/exmo-dev/exmo_api_lib/tree/master/nodejs']
            },
            'api': {
                'public': {
                    'get': ['currency', 'order_book', 'pair_settings', 'ticker', 'trades']
                },
                'private': {
                    'post': ['user_info', 'order_create', 'order_cancel', 'user_open_orders', 'user_trades', 'user_cancelled_orders', 'order_trades', 'required_amount', 'deposit_address', 'withdraw_crypt', 'withdraw_get_txid', 'excode_create', 'excode_load', 'wallet_history']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.2 / 100,
                    'taker': 0.2 / 100
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetPairSettings();
            let keys = Object.keys(markets);
            let result = [];
            for (let p = 0; p < keys.length; p++) {
                let id = keys[p];
                let market = markets[id];
                let symbol = id.replace('_', '/');
                let [base, quote] = symbol.split('/');
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'limits': {
                        'amount': {
                            'min': market['min_quantity'],
                            'max': market['max_quantity']
                        },
                        'price': {
                            'min': market['min_price'],
                            'max': market['max_price']
                        },
                        'cost': {
                            'min': market['min_amount'],
                            'max': market['max_amount']
                        }
                    },
                    'precision': {
                        'amount': 8,
                        'price': 8
                    },
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostUserInfo();
            let result = { 'info': response };
            let currencies = Object.keys(_this2.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this2.account();
                if (currency in response['balances']) account['free'] = parseFloat(response['balances'][currency]);
                if (currency in response['reserved']) account['used'] = parseFloat(response['reserved'][currency]);
                account['total'] = _this2.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetOrderBook(_this3.extend({
                'pair': market['id']
            }, params));
            let orderbook = response[market['id']];
            return _this3.parseOrderBook(orderbook, undefined, 'bid', 'ask');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['updated'] * 1000;
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['buy_price']),
            'ask': parseFloat(ticker['sell_price']),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last_trade']),
            'change': undefined,
            'percentage': undefined,
            'average': parseFloat(ticker['avg']),
            'baseVolume': parseFloat(ticker['vol']),
            'quoteVolume': parseFloat(ticker['vol_curr']),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.publicGetTicker(params);
            let result = {};
            let ids = Object.keys(response);
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = _this4.markets_by_id[id];
                let symbol = market['symbol'];
                let ticker = response[id];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let response = yield _this5.publicGetTicker(params);
            let market = _this5.market(symbol);
            return _this5.parseTicker(response[market['id']], market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['date'] * 1000;
        return {
            'id': trade['trade_id'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'order': undefined,
            'type': undefined,
            'side': trade['type'],
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['quantity'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetTrades(_this6.extend({
                'pair': market['id']
            }, params));
            return _this6.parseTrades(response[market['id']], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let prefix = '';
            if (type == 'market') prefix = 'market_';
            if (typeof price == 'undefined') price = 0;
            let order = {
                'pair': _this7.marketId(symbol),
                'quantity': amount,
                'price': price,
                'type': prefix + side
            };
            let response = yield _this7.privatePostOrderCreate(_this7.extend(order, params));
            return {
                'info': response,
                'id': response['order_id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            return yield _this8.privatePostOrderCancel({ 'order_id': id });
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let result = yield _this9.privatePostWithdrawCrypt(_this9.extend({
                'amount': amount,
                'currency': currency,
                'address': address
            }, params));
            return {
                'info': result,
                'id': result['task_id']
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + path;
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            body = this.urlencode(this.extend({ 'nonce': nonce }, params));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Key': this.apiKey,
                'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this10.fetch2(path, api, method, params, headers, body);
            if ('result' in response) {
                if (response['result']) return response;
                throw new ExchangeError(_this10.id + ' ' + _this10.json(response));
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],53:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class flowbtc extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'flowbtc',
            'name': 'flowBTC',
            'countries': 'BR', // Brazil
            'version': 'v1',
            'rateLimit': 1000,
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28162465-cd815d4c-67cf-11e7-8e57-438bea0523a2.jpg',
                'api': 'https://api.flowbtc.com:8400/ajax',
                'www': 'https://trader.flowbtc.com',
                'doc': 'http://www.flowbtc.com.br/api/'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true
            },
            'api': {
                'public': {
                    'post': ['GetTicker', 'GetTrades', 'GetTradesByDate', 'GetOrderBook', 'GetProductPairs', 'GetProducts']
                },
                'private': {
                    'post': ['CreateAccount', 'GetUserInfo', 'SetUserInfo', 'GetAccountInfo', 'GetAccountTrades', 'GetDepositAddresses', 'Withdraw', 'CreateOrder', 'ModifyOrder', 'CancelOrder', 'CancelAllOrders', 'GetAccountOpenOrders', 'GetOrderFee']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.publicPostGetProductPairs();
            let markets = response['productPairs'];
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['name'];
                let base = market['product1Label'];
                let quote = market['product2Label'];
                let symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostGetAccountInfo();
            let balances = response['currencies'];
            let result = { 'info': response };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['name'];
                let account = {
                    'free': balance['balance'],
                    'used': balance['hold'],
                    'total': 0.0
                };
                account['total'] = _this2.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let orderbook = yield _this3.publicPostGetOrderBook(_this3.extend({
                'productPair': market['id']
            }, params));
            return _this3.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'px', 'qty');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let ticker = yield _this4.publicPostGetTicker(_this4.extend({
                'productPair': market['id']
            }, params));
            let timestamp = _this4.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume24hr']),
                'quoteVolume': parseFloat(ticker['volume24hrProduct2']),
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['unixtime'] * 1000;
        let side = trade['incomingOrderSide'] == 0 ? 'buy' : 'sell';
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': trade['tid'].toString(),
            'order': undefined,
            'type': undefined,
            'side': side,
            'price': trade['px'],
            'amount': trade['qty']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicPostGetTrades(_this5.extend({
                'ins': market['id'],
                'startIndex': -1
            }, params));
            return _this5.parseTrades(response['trades'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let orderType = type == 'market' ? 1 : 0;
            let order = {
                'ins': _this6.marketId(symbol),
                'side': side,
                'orderType': orderType,
                'qty': amount,
                'px': price
            };
            let response = yield _this6.privatePostCreateOrder(_this6.extend(order, params));
            return {
                'info': response,
                'id': response['serverOrderId']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            if ('ins' in params) {
                return yield _this7.privatePostCancelOrder(_this7.extend({
                    'serverOrderId': id
                }, params));
            }
            throw new ExchangeError(_this7.id + ' requires `ins` symbol parameter for cancelling an order');
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + path;
        if (api == 'public') {
            if (Object.keys(params).length) {
                body = this.json(params);
            }
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let auth = nonce.toString() + this.uid + this.apiKey;
            let signature = this.hmac(this.encode(auth), this.encode(this.secret));
            body = this.json(this.extend({
                'apiKey': this.apiKey,
                'apiNonce': nonce,
                'apiSig': signature.toUpperCase()
            }, params));
            headers = {
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if ('isAccepted' in response) if (response['isAccepted']) return response;
            throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],54:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class foxbit extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'foxbit',
            'name': 'FoxBit',
            'countries': 'BR',
            'hasCORS': false,
            'rateLimit': 1000,
            'version': 'v1',
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27991413-11b40d42-647f-11e7-91ee-78ced874dd09.jpg',
                'api': {
                    'public': 'https://api.blinktrade.com/api',
                    'private': 'https://api.blinktrade.com/tapi'
                },
                'www': 'https://foxbit.exchange',
                'doc': 'https://blinktrade.com/docs'
            },
            'comment': 'Blinktrade API',
            'api': {
                'public': {
                    'get': ['{currency}/ticker', // ?crypto_currency=BTC
                    '{currency}/orderbook', // ?crypto_currency=BTC
                    '{currency}/trades']
                },
                'private': {
                    'post': ['D', // order
                    'F', // cancel order
                    'U2', // balance
                    'U4', // my orders
                    'U6', // withdraw
                    'U18', // deposit
                    'U24', // confirm withdrawal
                    'U26', // list withdrawals
                    'U30', // list deposits
                    'U34', // ledger
                    'U70']
                }
            },
            'markets': {
                'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' },
                'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' },
                'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' },
                'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' },
                'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' }
            }
        });
    }

    fetchBalance(params = {}) {
        // todo parse balance
        return this.privatePostU2({
            'BalanceReqID': this.nonce()
        });
    }

    fetchOrderBook(symbol, params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let market = _this.market(symbol);
            let orderbook = yield _this.publicGetCurrencyOrderbook(_this.extend({
                'currency': market['quote'],
                'crypto_currency': market['base']
            }, params));
            return _this.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let market = _this2.market(symbol);
            let ticker = yield _this2.publicGetCurrencyTicker(_this2.extend({
                'currency': market['quote'],
                'crypto_currency': market['base']
            }, params));
            let timestamp = _this2.milliseconds();
            let lowercaseQuote = market['quote'].toLowerCase();
            let quoteVolume = 'vol_' + lowercaseQuote;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this2.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': parseFloat(ticker[quoteVolume]),
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['date'] * 1000;
        return {
            'id': trade['tid'],
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['side'],
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetCurrencyTrades(_this3.extend({
                'currency': market['quote'],
                'crypto_currency': market['base']
            }, params));
            return _this3.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            if (type == 'market') throw new ExchangeError(_this4.id + ' allows limit orders only');
            let market = _this4.market(symbol);
            let orderSide = side == 'buy' ? '1' : '2';
            let order = {
                'ClOrdID': _this4.nonce(),
                'Symbol': market['id'],
                'Side': orderSide,
                'OrdType': '2',
                'Price': price,
                'OrderQty': amount,
                'BrokerID': market['brokerId']
            };
            let response = yield _this4.privatePostD(_this4.extend(order, params));
            let indexed = _this4.indexBy(response['Responses'], 'MsgType');
            let execution = indexed['8'];
            return {
                'info': response,
                'id': execution['OrderID']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            return yield _this5.privatePostF(_this5.extend({
                'ClOrdID': id
            }, params));
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let request = this.extend({ 'MsgType': path }, query);
            body = this.json(request);
            headers = {
                'APIKey': this.apiKey,
                'Nonce': nonce,
                'Signature': this.hmac(this.encode(nonce), this.encode(this.secret)),
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this6.fetch2(path, api, method, params, headers, body);
            if ('Status' in response) if (response['Status'] != 200) throw new ExchangeError(_this6.id + ' ' + _this6.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],55:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class fybse extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'fybse',
            'name': 'FYB-SE',
            'countries': 'SE', // Sweden
            'hasCORS': false,
            'rateLimit': 1500,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766512-31019772-5edb-11e7-8241-2e675e6797f1.jpg',
                'api': 'https://www.fybse.se/api/SEK',
                'www': 'https://www.fybse.se',
                'doc': 'http://docs.fyb.apiary.io'
            },
            'api': {
                'public': {
                    'get': ['ticker', 'tickerdetailed', 'orderbook', 'trades']
                },
                'private': {
                    'post': ['test', 'getaccinfo', 'getpendingorders', 'getorderhistory', 'cancelpendingorder', 'placeorder', 'withdraw']
                }
            },
            'markets': {
                'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let balance = yield _this.privatePostGetaccinfo();
            let btc = parseFloat(balance['btcBal']);
            let symbol = _this.symbols[0];
            let quote = _this.markets[symbol]['quote'];
            let lowercase = quote.toLowerCase() + 'Bal';
            let fiat = parseFloat(balance[lowercase]);
            let crypto = {
                'free': btc,
                'used': 0.0,
                'total': btc
            };
            let result = { 'BTC': crypto };
            result[quote] = {
                'free': fiat,
                'used': 0.0,
                'total': fiat
            };
            result['info'] = balance;
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this2.publicGetOrderbook(params);
            return _this2.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let ticker = yield _this3.publicGetTickerdetailed(params);
            let timestamp = _this3.milliseconds();
            let last = undefined;
            let volume = undefined;
            if ('last' in ticker) last = parseFloat(ticker['last']);
            if ('vol' in ticker) volume = parseFloat(ticker['vol']);
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': volume,
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(trade['date']) * 1000;
        return {
            'info': trade,
            'id': trade['tid'].toString(),
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTrades(params);
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this5.privatePostPlaceorder(_this5.extend({
                'qty': amount,
                'price': price,
                'type': side[0].toUpperCase()
            }, params));
            return {
                'info': response,
                'id': response['pending_oid']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCancelpendingorder({ 'orderNo': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + path;
        if (api == 'public') {
            url += '.json';
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            body = this.urlencode(this.extend({ 'timestamp': nonce }, params));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'key': this.apiKey,
                'sig': this.hmac(this.encode(body), this.encode(this.secret), 'sha1')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.fetch2(path, api, method, params, headers, body);
            if (api == 'private') if ('error' in response) if (response['error']) throw new ExchangeError(_this7.id + ' ' + _this7.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],56:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const fybse = require('./fybse.js');

// ---------------------------------------------------------------------------

module.exports = class fybsg extends fybse {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'fybsg',
            'name': 'FYB-SG',
            'countries': 'SG', // Singapore
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766513-3364d56a-5edb-11e7-9e6b-d5898bb89c81.jpg',
                'api': 'https://www.fybsg.com/api/SGD',
                'www': 'https://www.fybsg.com',
                'doc': 'http://docs.fyb.apiary.io'
            },
            'markets': {
                'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' }
            }
        });
    }
};
},{"./fybse.js":55}],57:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class gatecoin extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'gatecoin',
            'name': 'Gatecoin',
            'rateLimit': 2000,
            'countries': 'HK', // Hong Kong
            'comment': 'a regulated/licensed exchange',
            'hasCORS': false,
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'timeframes': {
                '1m': '1m',
                '15m': '15m',
                '1h': '1h',
                '6h': '6h',
                '1d': '24h'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28646817-508457f2-726c-11e7-9eeb-3528d2413a58.jpg',
                'api': 'https://api.gatecoin.com',
                'www': 'https://gatecoin.com',
                'doc': ['https://gatecoin.com/api', 'https://github.com/Gatecoin/RESTful-API-Implementation', 'https://api.gatecoin.com/swagger-ui/index.html']
            },
            'api': {
                'public': {
                    'get': ['Public/ExchangeRate', // Get the exchange rates
                    'Public/LiveTicker', // Get live ticker for all currency
                    'Public/LiveTicker/{CurrencyPair}', // Get live ticker by currency
                    'Public/LiveTickers', // Get live ticker for all currency
                    'Public/MarketDepth/{CurrencyPair}', // Gets prices and market depth for the currency pair.
                    'Public/NetworkStatistics/{DigiCurrency}', // Get the network status of a specific digital currency
                    'Public/StatisticHistory/{DigiCurrency}/{Typeofdata}', // Get the historical data of a specific digital currency
                    'Public/TickerHistory/{CurrencyPair}/{Timeframe}', // Get ticker history
                    'Public/Transactions/{CurrencyPair}', // Gets recent transactions
                    'Public/TransactionsHistory/{CurrencyPair}', // Gets all transactions
                    'Reference/BusinessNatureList', // Get the business nature list.
                    'Reference/Countries', // Get the country list.
                    'Reference/Currencies', // Get the currency list.
                    'Reference/CurrencyPairs', // Get the currency pair list.
                    'Reference/CurrentStatusList', // Get the current status list.
                    'Reference/IdentydocumentTypes', // Get the different types of identity documents possible.
                    'Reference/IncomeRangeList', // Get the income range list.
                    'Reference/IncomeSourceList', // Get the income source list.
                    'Reference/VerificationLevelList', // Get the verif level list.
                    'Stream/PublicChannel'],
                    'post': ['Export/Transactions', // Request a export of all trades from based on currencypair, start date and end date
                    'Ping', // Post a string, then get it back.
                    'Public/Unsubscribe/{EmailCode}', // Lets the user unsubscribe from emails
                    'RegisterUser']
                },
                'private': {
                    'get': ['Account/CorporateData', // Get corporate account data
                    'Account/DocumentAddress', // Check if residence proof uploaded
                    'Account/DocumentCorporation', // Check if registered document uploaded
                    'Account/DocumentID', // Check if ID document copy uploaded
                    'Account/DocumentInformation', // Get Step3 Data
                    'Account/Email', // Get user email
                    'Account/FeeRate', // Get fee rate of logged in user
                    'Account/Level', // Get verif level of logged in user
                    'Account/PersonalInformation', // Get Step1 Data
                    'Account/Phone', // Get user phone number
                    'Account/Profile', // Get trader profile
                    'Account/Questionnaire', // Fill the questionnaire
                    'Account/Referral', // Get referral information
                    'Account/ReferralCode', // Get the referral code of the logged in user
                    'Account/ReferralNames', // Get names of referred traders
                    'Account/ReferralReward', // Get referral reward information
                    'Account/ReferredCode', // Get referral code
                    'Account/ResidentInformation', // Get Step2 Data
                    'Account/SecuritySettings', // Get verif details of logged in user
                    'Account/User', // Get all user info
                    'APIKey/APIKey', // Get API Key for logged in user
                    'Auth/ConnectionHistory', // Gets connection history of logged in user
                    'Balance/Balances', // Gets the available balance for each currency for the logged in account.
                    'Balance/Balances/{Currency}', // Gets the available balance for s currency for the logged in account.
                    'Balance/Deposits', // Get all account deposits, including wire and digital currency, of the logged in user
                    'Balance/Withdrawals', // Get all account withdrawals, including wire and digital currency, of the logged in user
                    'Bank/Accounts/{Currency}/{Location}', // Get internal bank account for deposit
                    'Bank/Transactions', // Get all account transactions of the logged in user
                    'Bank/UserAccounts', // Gets all the bank accounts related to the logged in user.
                    'Bank/UserAccounts/{Currency}', // Gets all the bank accounts related to the logged in user.
                    'ElectronicWallet/DepositWallets', // Gets all crypto currency addresses related deposits to the logged in user.
                    'ElectronicWallet/DepositWallets/{DigiCurrency}', // Gets all crypto currency addresses related deposits to the logged in user by currency.
                    'ElectronicWallet/Transactions', // Get all digital currency transactions of the logged in user
                    'ElectronicWallet/Transactions/{DigiCurrency}', // Get all digital currency transactions of the logged in user
                    'ElectronicWallet/UserWallets', // Gets all external digital currency addresses related to the logged in user.
                    'ElectronicWallet/UserWallets/{DigiCurrency}', // Gets all external digital currency addresses related to the logged in user by currency.
                    'Info/ReferenceCurrency', // Get user's reference currency
                    'Info/ReferenceLanguage', // Get user's reference language
                    'Notification/Messages', // Get from oldest unread + 3 read message to newest messages
                    'Trade/Orders', // Gets open orders for the logged in trader.
                    'Trade/Orders/{OrderID}', // Gets an order for the logged in trader.
                    'Trade/StopOrders', // Gets all stop orders for the logged in trader. Max 1000 record.
                    'Trade/StopOrdersHistory', // Gets all stop orders for the logged in trader. Max 1000 record.
                    'Trade/Trades', // Gets all transactions of logged in user
                    'Trade/UserTrades'],
                    'post': ['Account/DocumentAddress', // Upload address proof document
                    'Account/DocumentCorporation', // Upload registered document document
                    'Account/DocumentID', // Upload ID document copy
                    'Account/Email/RequestVerify', // Request for verification email
                    'Account/Email/Verify', // Verification email
                    'Account/GoogleAuth', // Enable google auth
                    'Account/Level', // Request verif level of logged in user
                    'Account/Questionnaire', // Fill the questionnaire
                    'Account/Referral', // Post a referral email
                    'APIKey/APIKey', // Create a new API key for logged in user
                    'Auth/ChangePassword', // Change password.
                    'Auth/ForgotPassword', // Request reset password
                    'Auth/ForgotUserID', // Request user id
                    'Auth/Login', // Trader session log in.
                    'Auth/Logout', // Logout from the current session.
                    'Auth/LogoutOtherSessions', // Logout other sessions.
                    'Auth/ResetPassword', // Reset password
                    'Bank/Transactions', // Request a transfer from the traders account of the logged in user. This is only available for bank account
                    'Bank/UserAccounts', // Add an account the logged in user
                    'ElectronicWallet/DepositWallets/{DigiCurrency}', // Add an digital currency addresses to the logged in user.
                    'ElectronicWallet/Transactions/Deposits/{DigiCurrency}', // Get all internal digital currency transactions of the logged in user
                    'ElectronicWallet/Transactions/Withdrawals/{DigiCurrency}', // Get all external digital currency transactions of the logged in user
                    'ElectronicWallet/UserWallets/{DigiCurrency}', // Add an external digital currency addresses to the logged in user.
                    'ElectronicWallet/Withdrawals/{DigiCurrency}', // Request a transfer from the traders account to an external address. This is only available for crypto currencies.
                    'Notification/Messages', // Mark all as read
                    'Notification/Messages/{ID}', // Mark as read
                    'Trade/Orders', // Place an order at the exchange.
                    'Trade/StopOrders'],
                    'put': ['Account/CorporateData', // Update user company data for corporate account
                    'Account/DocumentID', // Update ID document meta data
                    'Account/DocumentInformation', // Update Step3 Data
                    'Account/Email', // Update user email
                    'Account/PersonalInformation', // Update Step1 Data
                    'Account/Phone', // Update user phone number
                    'Account/Questionnaire', // update the questionnaire
                    'Account/ReferredCode', // Update referral code
                    'Account/ResidentInformation', // Update Step2 Data
                    'Account/SecuritySettings', // Update verif details of logged in user
                    'Account/User', // Update all user info
                    'Bank/UserAccounts', // Update the label of existing user bank accounnt
                    'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Update the name of an address
                    'ElectronicWallet/UserWallets/{DigiCurrency}', // Update the name of an external address
                    'Info/ReferenceCurrency', // User's reference currency
                    'Info/ReferenceLanguage'],
                    'delete': ['APIKey/APIKey/{PublicKey}', // Remove an API key
                    'Bank/Transactions/{RequestID}', // Delete pending account withdraw of the logged in user
                    'Bank/UserAccounts/{Currency}/{Label}', // Delete an account of the logged in user
                    'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Delete an digital currency addresses related to the logged in user.
                    'ElectronicWallet/UserWallets/{DigiCurrency}/{AddressName}', // Delete an external digital currency addresses related to the logged in user.
                    'Trade/Orders', // Cancels all existing order
                    'Trade/Orders/{OrderID}', // Cancels an existing order
                    'Trade/StopOrders', // Cancels all existing stop orders
                    'Trade/StopOrders/{ID}']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.0025,
                    'taker': 0.0035
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.publicGetPublicLiveTickers();
            let markets = response['tickers'];
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['currencyPair'];
                let base = id.slice(0, 3);
                let quote = id.slice(3, 6);
                let symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetBalanceBalances();
            let balances = response['balances'];
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let account = {
                    'free': balance['availableBalance'],
                    'used': _this2.sum(balance['pendingIncoming'], balance['pendingOutgoing'], balance['openOrder']),
                    'total': balance['balance']
                };
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let orderbook = yield _this3.publicGetPublicMarketDepthCurrencyPair(_this3.extend({
                'CurrencyPair': market['id']
            }, params));
            return _this3.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'volume');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = parseInt(ticker['createDateTime']) * 1000;
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let baseVolume = parseFloat(ticker['volume']);
        let vwap = parseFloat(ticker['vwap']);
        let quoteVolume = baseVolume * vwap;
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['bid']),
            'ask': parseFloat(ticker['ask']),
            'vwap': vwap,
            'open': parseFloat(ticker['open']),
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last']),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.publicGetPublicLiveTickers(params);
            let tickers = response['tickers'];
            let result = {};
            for (let t = 0; t < tickers.length; t++) {
                let ticker = tickers[t];
                let id = ticker['currencyPair'];
                let market = _this4.markets_by_id[id];
                let symbol = market['symbol'];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetPublicLiveTickerCurrencyPair(_this5.extend({
                'CurrencyPair': market['id']
            }, params));
            let ticker = response['ticker'];
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        let side = undefined;
        let order = undefined;
        if ('way' in trade) {
            side = trade['way'] == 'bid' ? 'buy' : 'sell';
            let orderId = trade['way'] + 'OrderId';
            order = trade[orderId];
        }
        let timestamp = parseInt(trade['transactionTime']) * 1000;
        if (!market) market = this.markets_by_id[trade['currencyPair']];
        return {
            'info': trade,
            'id': trade['transactionId'].toString(),
            'order': order,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': side,
            'price': trade['price'],
            'amount': trade['quantity']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetPublicTransactionsCurrencyPair(_this6.extend({
                'CurrencyPair': market['id']
            }, params));
            return _this6.parseTrades(response['transactions'], market, since, limit);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [parseInt(ohlcv['createDateTime']) * 1000, ohlcv['open'], ohlcv['high'], ohlcv['low'], undefined, ohlcv['volume']];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let request = {
                'CurrencyPair': market['id'],
                'Timeframe': _this7.timeframes[timeframe]
            };
            if (limit) request['Count'] = limit;
            request = _this7.extend(request, params);
            let response = yield _this7.publicGetPublicTickerHistoryCurrencyPairTimeframe(request);
            return _this7.parseOHLCVs(response['tickers'], market, timeframe, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let order = {
                'Code': _this8.marketId(symbol),
                'Way': side == 'buy' ? 'Bid' : 'Ask',
                'Amount': amount
            };
            if (type == 'limit') order['Price'] = price;
            if (_this8.twofa) {
                if ('ValidationCode' in params) order['ValidationCode'] = params['ValidationCode'];else throw new AuthenticationError(_this8.id + ' two-factor authentication requires a missing ValidationCode parameter');
            }
            let response = yield _this8.privatePostTradeOrders(_this8.extend(order, params));
            return {
                'info': response,
                'id': response['clOrderId']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            return yield _this9.privateDeleteTradeOrdersOrderID({ 'OrderID': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let contentType = method == 'GET' ? '' : 'application/json';
            let auth = method + url + contentType + nonce.toString();
            auth = auth.toLowerCase();
            let signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
            headers = {
                'API_PUBLIC_KEY': this.apiKey,
                'API_REQUEST_SIGNATURE': signature,
                'API_REQUEST_DATE': nonce
            };
            if (method != 'GET') {
                headers['Content-Type'] = contentType;
                body = this.json(this.extend({ 'nonce': nonce }, params));
            }
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this10.fetch2(path, api, method, params, headers, body);
            if ('responseStatus' in response) if ('message' in response['responseStatus']) if (response['responseStatus']['message'] == 'OK') return response;
            throw new ExchangeError(_this10.id + ' ' + _this10.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],58:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const bter = require('./bter.js');

// ---------------------------------------------------------------------------

module.exports = class gateio extends bter {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'gateio',
            'name': 'Gate.io',
            'countries': 'CN',
            'rateLimit': 1000,
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg',
                'api': {
                    'public': 'https://data.gate.io/api',
                    'private': 'https://data.gate.io/api'
                },
                'www': 'https://gate.io/',
                'doc': 'https://gate.io/api2'
            }
        });
    }
};
},{"./bter.js":37}],59:[function(require,module,exports){
"use strict";

// ----------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, InvalidOrder, AuthenticationError, NotSupported } = require('./base/errors');

// ----------------------------------------------------------------------------

module.exports = class gdax extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'gdax',
            'name': 'GDAX',
            'countries': 'US',
            'rateLimit': 1000,
            'userAgent': this.userAgents['chrome'],
            'hasCORS': true,
            'hasFetchOHLCV': true,
            'hasDeposit': true,
            'hasWithdraw': true,
            'hasFetchOrder': true,
            'hasFetchOrders': true,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'timeframes': {
                '1m': 60,
                '5m': 300,
                '15m': 900,
                '30m': 1800,
                '1h': 3600,
                '2h': 7200,
                '4h': 14400,
                '12h': 43200,
                '1d': 86400,
                '1w': 604800,
                '1M': 2592000,
                '1y': 31536000
            },
            'urls': {
                'test': 'https://api-public.sandbox.gdax.com',
                'logo': 'https://user-images.githubusercontent.com/1294454/27766527-b1be41c6-5edb-11e7-95f6-5b496c469e2c.jpg',
                'api': 'https://api.gdax.com',
                'www': 'https://www.gdax.com',
                'doc': 'https://docs.gdax.com'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'password': true
            },
            'api': {
                'public': {
                    'get': ['currencies', 'products', 'products/{id}/book', 'products/{id}/candles', 'products/{id}/stats', 'products/{id}/ticker', 'products/{id}/trades', 'time']
                },
                'private': {
                    'get': ['accounts', 'accounts/{id}', 'accounts/{id}/holds', 'accounts/{id}/ledger', 'coinbase-accounts', 'fills', 'funding', 'orders', 'orders/{id}', 'payment-methods', 'position', 'reports/{id}', 'users/self/trailing-volume'],
                    'post': ['deposits/coinbase-account', 'deposits/payment-method', 'funding/repay', 'orders', 'position/close', 'profiles/margin-transfer', 'reports', 'withdrawals/coinbase', 'withdrawals/crypto', 'withdrawals/payment-method'],
                    'delete': ['orders', 'orders/{id}']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': true, // complicated tier system per coin
                    'percentage': true,
                    'maker': 0.0,
                    'taker': 0.30 / 100 // worst-case scenario: https://www.gdax.com/fees/BTC-USD
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BCH': 0,
                        'BTC': 0,
                        'LTC': 0,
                        'ETH': 0,
                        'EUR': 0.15,
                        'USD': 25
                    },
                    'deposit': {
                        'BCH': 0,
                        'BTC': 0,
                        'LTC': 0,
                        'ETH': 0,
                        'EUR': 0.15,
                        'USD': 10
                    }
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetProducts();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['id'];
                let base = market['base_currency'];
                let quote = market['quote_currency'];
                let symbol = base + '/' + quote;
                let amountLimits = {
                    'min': market['base_min_size'],
                    'max': market['base_max_size']
                };
                let priceLimits = {
                    'min': market['quote_increment'],
                    'max': undefined
                };
                let costLimits = {
                    'min': priceLimits['min'],
                    'max': undefined
                };
                let limits = {
                    'amount': amountLimits,
                    'price': priceLimits,
                    'cost': costLimits
                };
                let precision = {
                    'amount': -Math.log10(parseFloat(amountLimits['min'])),
                    'price': -Math.log10(parseFloat(priceLimits['min']))
                };
                let taker = _this.fees['trading']['taker'];
                if (base == 'ETH' || base == 'LTC') {
                    taker = 0.003;
                }
                result.push(_this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market,
                    'precision': precision,
                    'limits': limits,
                    'taker': taker
                }));
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let balances = yield _this2.privateGetAccounts();
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let account = {
                    'free': parseFloat(balance['available']),
                    'used': parseFloat(balance['hold']),
                    'total': parseFloat(balance['balance'])
                };
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetProductsIdBook(_this3.extend({
                'id': _this3.marketId(symbol),
                'level': 2 // 1 best bidask, 2 aggregated, 3 full
            }, params));
            return _this3.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let request = _this4.extend({
                'id': market['id']
            }, params);
            let ticker = yield _this4.publicGetProductsIdTicker(request);
            let timestamp = _this4.parse8601(ticker['time']);
            let bid = undefined;
            let ask = undefined;
            if ('bid' in ticker) bid = parseFloat(ticker['bid']);
            if ('ask' in ticker) ask = parseFloat(ticker['ask']);
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': bid,
                'ask': ask,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': _this4.safeFloat(ticker, 'price'),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume']),
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = this.parse8601(trade['time']);
        let side = trade['side'] == 'buy' ? 'sell' : 'buy';
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let fee = undefined;
        if ('fill_fees' in trade) {
            fee = {
                'cost': parseFloat(trade['fill_fees']),
                'currency': market['quote']
            };
        }
        return {
            'id': trade['trade_id'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': undefined,
            'side': side,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['size']),
            'fee': fee
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetProductsIdTrades(_this5.extend({
                'id': market['id'] // fixes issue #2
            }, params));
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [ohlcv[0] * 1000, ohlcv[3], ohlcv[2], ohlcv[1], ohlcv[4], ohlcv[5]];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let granularity = _this6.timeframes[timeframe];
            let request = {
                'id': market['id'],
                'granularity': granularity
            };
            if (since) {
                request['start'] = _this6.iso8601(since);
                if (!limit) limit = 200; // max = 200
                request['end'] = _this6.iso8601(limit * granularity * 1000 + since);
            }
            let response = yield _this6.publicGetProductsIdCandles(_this6.extend(request, params));
            return _this6.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    fetchTime() {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = _this7.publicGetTime();
            return _this7.parse8601(response['iso']);
        })();
    }

    parseOrderStatus(status) {
        let statuses = {
            'pending': 'open',
            'active': 'open',
            'open': 'open',
            'done': 'closed',
            'canceled': 'canceled'
        };
        return this.safeString(statuses, status, status);
    }

    parseOrder(order, market = undefined) {
        let timestamp = this.parse8601(order['created_at']);
        let symbol = undefined;
        if (!market) {
            if (order['product_id'] in this.markets_by_id) market = this.markets_by_id[order['product_id']];
        }
        let status = this.parseOrderStatus(order['status']);
        let price = this.safeFloat(order, 'price');
        let amount = this.safeFloat(order, 'size');
        let filled = this.safeFloat(order, 'filled_size');
        let remaining = amount - filled;
        let cost = this.safeFloat(order, 'executed_value');
        if (market) symbol = market['symbol'];
        return {
            'id': order['id'],
            'info': order,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'status': status,
            'symbol': symbol,
            'type': order['type'],
            'side': order['side'],
            'price': price,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'fee': undefined
        };
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let response = yield _this8.privateGetOrdersId(_this8.extend({
                'id': id
            }, params));
            return _this8.parseOrder(response);
        })();
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let request = {
                'status': 'all'
            };
            let market = undefined;
            if (symbol) {
                market = _this9.market(symbol);
                request['product_id'] = market['id'];
            }
            let response = yield _this9.privateGetOrders(_this9.extend(request, params));
            return _this9.parseOrders(response, market, since, limit);
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let request = {};
            let market = undefined;
            if (symbol) {
                market = _this10.market(symbol);
                request['product_id'] = market['id'];
            }
            let response = yield _this10.privateGetOrders(_this10.extend(request, params));
            return _this10.parseOrders(response, market, since, limit);
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            let request = {
                'status': 'done'
            };
            let market = undefined;
            if (symbol) {
                market = _this11.market(symbol);
                request['product_id'] = market['id'];
            }
            let response = yield _this11.privateGetOrders(_this11.extend(request, params));
            return _this11.parseOrders(response, market, since, limit);
        })();
    }

    createOrder(market, type, side, amount, price = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            yield _this12.loadMarkets();
            // let oid = this.nonce ().toString ();
            let order = {
                'product_id': _this12.marketId(market),
                'side': side,
                'size': amount,
                'type': type
            };
            if (type == 'limit') order['price'] = price;
            let response = yield _this12.privatePostOrders(_this12.extend(order, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            yield _this13.loadMarkets();
            return yield _this13.privateDeleteOrdersId({ 'id': id });
        })();
    }

    getPaymentMethods() {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this14.privateGetPaymentMethods();
            return response;
        })();
    }

    deposit(currency, amount, address, params = {}) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            yield _this15.loadMarkets();
            let request = {
                'currency': currency,
                'amount': amount
            };
            let method = 'privatePostDeposits';
            if ('payment_method_id' in params) {
                // deposit from a payment_method, like a bank account
                method += 'PaymentMethod';
            } else if ('coinbase_account_id' in params) {
                // deposit into GDAX account from a Coinbase account
                method += 'CoinbaseAccount';
            } else {
                // deposit methodotherwise we did not receive a supported deposit location
                // relevant docs link for the Googlers
                // https://docs.gdax.com/#deposits
                throw new NotSupported(_this15.id + ' deposit() requires one of `coinbase_account_id` or `payment_method_id` extra params');
            }
            let response = yield _this15[method](_this15.extend(request, params));
            if (!response) throw new ExchangeError(_this15.id + ' deposit() error: ' + _this15.json(response));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this16 = this;

        return _asyncToGenerator(function* () {
            yield _this16.loadMarkets();
            let request = {
                'currency': currency,
                'amount': amount
            };
            let method = 'privatePostWithdrawals';
            if ('payment_method_id' in params) {
                method += 'PaymentMethod';
            } else if ('coinbase_account_id' in params) {
                method += 'CoinbaseAccount';
            } else {
                method += 'Crypto';
                request['crypto_address'] = address;
            }
            let response = yield _this16[method](_this16.extend(request, params));
            if (!response) throw new ExchangeError(_this16.id + ' withdraw() error: ' + _this16.json(response));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let request = '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (method == 'GET') {
            if (Object.keys(query).length) request += '?' + this.urlencode(query);
        }
        let url = this.urls['api'] + request;
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let payload = '';
            if (method != 'GET') {
                if (Object.keys(query).length) {
                    body = this.json(query);
                    payload = body;
                }
            }
            // let payload = (body) ? body : '';
            let what = nonce + method + request + payload;
            let secret = this.base64ToBinary(this.secret);
            let signature = this.hmac(this.encode(what), secret, 'sha256', 'base64');
            headers = {
                'CB-ACCESS-KEY': this.apiKey,
                'CB-ACCESS-SIGN': this.decode(signature),
                'CB-ACCESS-TIMESTAMP': nonce,
                'CB-ACCESS-PASSPHRASE': this.password,
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code == 400) {
            if (body[0] == "{") {
                let response = JSON.parse(body);
                let message = response['message'];
                if (message.indexOf('price too small') >= 0) {
                    throw new InvalidOrder(this.id + ' ' + message);
                } else if (message.indexOf('price too precise') >= 0) {
                    throw new InvalidOrder(this.id + ' ' + message);
                } else if (message == 'Invalid API Key') {
                    throw new AuthenticationError(this.id + ' ' + message);
                }
                throw new ExchangeError(this.id + ' ' + this.json(response));
            }
            throw new ExchangeError(this.id + ' ' + body);
        }
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this17 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this17.fetch2(path, api, method, params, headers, body);
            if ('message' in response) {
                throw new ExchangeError(_this17.id + ' ' + _this17.json(response));
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],60:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class gemini extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'gemini',
            'name': 'Gemini',
            'countries': 'US',
            'rateLimit': 1500, // 200 for private API
            'version': 'v1',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',
                'api': 'https://api.gemini.com',
                'www': 'https://gemini.com',
                'doc': 'https://docs.gemini.com/rest-api'
            },
            'api': {
                'public': {
                    'get': ['symbols', 'pubticker/{symbol}', 'book/{symbol}', 'trades/{symbol}', 'auction/{symbol}', 'auction/{symbol}/history']
                },
                'private': {
                    'post': ['order/new', 'order/cancel', 'order/cancel/session', 'order/cancel/all', 'order/status', 'orders', 'mytrades', 'tradevolume', 'balances', 'deposit/{currency}/newAddress', 'withdraw/{currency}', 'heartbeat']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetSymbols();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let id = markets[p];
                let market = id;
                let uppercase = market.toUpperCase();
                let base = uppercase.slice(0, 3);
                let quote = uppercase.slice(3, 6);
                let symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market,
                    'taker': 0.0025
                });
            }
            return result;
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let orderbook = yield _this2.publicGetBookSymbol(_this2.extend({
                'symbol': _this2.marketId(symbol)
            }, params));
            return _this2.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let ticker = yield _this3.publicGetPubtickerSymbol(_this3.extend({
                'symbol': market['id']
            }, params));
            let timestamp = ticker['volume']['timestamp'];
            let baseVolume = market['base'];
            let quoteVolume = market['quote'];
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume'][baseVolume]),
                'quoteVolume': parseFloat(ticker['volume'][quoteVolume]),
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['timestampms'];
        return {
            'id': trade['tid'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['type'],
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTradesSymbol(_this4.extend({
                'symbol': market['id']
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    fetchBalance(params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let balances = yield _this5.privatePostBalances();
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let account = {
                    'free': parseFloat(balance['available']),
                    'used': 0.0,
                    'total': parseFloat(balance['amount'])
                };
                account['used'] = account['total'] - account['free'];
                result[currency] = account;
            }
            return _this5.parseBalance(result);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            if (type == 'market') throw new ExchangeError(_this6.id + ' allows limit orders only');
            let nonce = _this6.nonce();
            let order = {
                'client_order_id': nonce.toString(),
                'symbol': _this6.marketId(symbol),
                'amount': amount.toString(),
                'price': price.toString(),
                'side': side,
                'type': 'exchange limit' // gemini allows limit orders only
            };
            let response = yield _this6.privatePostOrderNew(_this6.extend(order, params));
            return {
                'info': response,
                'id': response['order_id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            return yield _this7.privatePostCancelOrder({ 'order_id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = '/' + this.version + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let request = this.extend({
                'request': url,
                'nonce': nonce
            }, query);
            let payload = this.json(request);
            payload = this.stringToBase64(this.encode(payload));
            let signature = this.hmac(payload, this.encode(this.secret), 'sha384');
            headers = {
                'Content-Type': 'text/plain',
                'X-GEMINI-APIKEY': this.apiKey,
                'X-GEMINI-PAYLOAD': this.decode(payload),
                'X-GEMINI-SIGNATURE': signature
            };
        }
        url = this.urls['api'] + url;
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if ('result' in response) if (response['result'] == 'error') throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],61:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const _1btcxe = require('./_1btcxe.js');

// ---------------------------------------------------------------------------

module.exports = class getbtc extends _1btcxe {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'getbtc',
            'name': 'GetBTC',
            'countries': ['VC', 'RU'], // Saint Vincent and the Grenadines, Russia, CIS
            'rateLimit': 1000,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/33801902-03c43462-dd7b-11e7-992e-077e4cd015b9.jpg',
                'api': 'https://getbtc.org/api',
                'www': 'https://getbtc.org',
                'doc': 'https://getbtc.org/api-docs.php'
            },
            'markets': {
                'BTC/EUR': { 'id': 'EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'precision': { 'amount': 8, 'price': 8 }, 'lot': 0.00000001, 'limits': { 'amount': { 'min': 0.00000001, 'max': undefined }, 'price': { 'min': 0.00000001, 'max': undefined } } },
                'BTC/RUB': { 'id': 'RUB', 'symbol': 'BTC/RUB', 'base': 'BTC', 'quote': 'RUB', 'precision': { 'amount': 8, 'price': 8 }, 'lot': 0.00000001, 'limits': { 'amount': { 'min': 0.00000001, 'max': undefined }, 'price': { 'min': 0.00000001, 'max': undefined } } },
                'BTC/USD': { 'id': 'USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'precision': { 'amount': 8, 'price': 8 }, 'lot': 0.00000001, 'limits': { 'amount': { 'min': 0.00000001, 'max': undefined }, 'price': { 'min': 0.00000001, 'max': undefined } } }
            },
            'fees': {
                'trading': {
                    'taker': 0.20 / 100,
                    'maker': 0.20 / 100
                }
            }
        });
    }
};
},{"./_1btcxe.js":4}],62:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, InsufficientFunds } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class hitbtc extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'hitbtc',
            'name': 'HitBTC',
            'countries': 'HK', // Hong Kong
            'rateLimit': 1500,
            'version': '1',
            'hasCORS': false,
            'hasFetchTickers': true,
            'hasFetchOrder': true,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
                'api': 'http://api.hitbtc.com',
                'www': 'https://hitbtc.com',
                'doc': 'https://github.com/hitbtc-com/hitbtc-api/blob/master/APIv1.md'
            },
            'api': {
                'public': {
                    'get': ['{symbol}/orderbook', '{symbol}/ticker', '{symbol}/trades', '{symbol}/trades/recent', 'symbols', 'ticker', 'time,']
                },
                'trading': {
                    'get': ['balance', 'orders/active', 'orders/recent', 'order', 'trades/by/order', 'trades'],
                    'post': ['new_order', 'cancel_order', 'cancel_orders']
                },
                'payment': {
                    'get': ['balance', 'address/{currency}', 'transactions', 'transactions/{transaction}'],
                    'post': ['transfer_to_trading', 'transfer_to_main', 'address/{currency}', 'payout']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'maker': -0.01 / 100,
                    'taker': 0.1 / 100
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BTC': 0.0007,
                        'ETH': 0.00958,
                        'BCH': 0.0018,
                        'USDT': 5,
                        'BTG': 0.0005,
                        'LTC': 0.003,
                        'ZEC': 0.0001,
                        'XMR': 0.09,
                        '1ST': 0.84,
                        'ADX': 5.7,
                        'AE': 6.7,
                        'AEON': 0.01006,
                        'AIR': 565,
                        'AMP': 9,
                        'ANT': 6.7,
                        'ARDR': 2,
                        'ARN': 18.5,
                        'ART': 26,
                        'ATB': 0.0004,
                        'ATL': 27,
                        'ATM': 504,
                        'ATS': 860,
                        'AVT': 1.9,
                        'BAS': 113,
                        'BCN': 0.1,
                        'BET': 124,
                        'BKB': 46,
                        'BMC': 32,
                        'BMT': 100,
                        'BNT': 2.57,
                        'BQX': 4.7,
                        'BTM': 40,
                        'BTX': 0.04,
                        'BUS': 0.004,
                        'CCT': 115,
                        'CDT': 100,
                        'CDX': 30,
                        'CFI': 61,
                        'CLD': 0.88,
                        'CND': 574,
                        'CNX': 0.04,
                        'COSS': 65,
                        'CSNO': 16,
                        'CTR': 15,
                        'CTX': 146,
                        'CVC': 8.46,
                        'DBIX': 0.0168,
                        'DCN': 120000,
                        'DCT': 0.02,
                        'DDF': 342,
                        'DENT': 6240,
                        'DGB': 0.4,
                        'DGD': 0.01,
                        'DICE': 0.32,
                        'DLT': 0.26,
                        'DNT': 0.21,
                        'DOGE': 2,
                        'DOV': 34,
                        'DRPU': 24,
                        'DRT': 240,
                        'DSH': 0.017,
                        'EBET': 84,
                        'EBTC': 20,
                        'EBTCOLD': 6.6,
                        'ECAT': 14,
                        'EDG': 2,
                        'EDO': 2.9,
                        'ELE': 0.00172,
                        'ELM': 0.004,
                        'EMC': 0.03,
                        'EMGO': 14,
                        'ENJ': 163,
                        'EOS': 1.5,
                        'ERO': 34,
                        'ETBS': 15,
                        'ETC': 0.002,
                        'ETP': 0.004,
                        'EVX': 5.4,
                        'EXN': 456,
                        'FRD': 65,
                        'FUEL': 123.00105,
                        'FUN': 202.9598309,
                        'FYN': 1.849,
                        'FYP': 66.13,
                        'GNO': 0.0034,
                        'GUP': 4,
                        'GVT': 1.2,
                        'HAC': 144,
                        'HDG': 7,
                        'HGT': 1082,
                        'HPC': 0.4,
                        'HVN': 120,
                        'ICN': 0.55,
                        'ICO': 34,
                        'ICOS': 0.35,
                        'IND': 76,
                        'INDI': 5913,
                        'ITS': 15.0012,
                        'IXT': 11,
                        'KBR': 143,
                        'KICK': 112,
                        'LA': 41,
                        'LAT': 1.44,
                        'LIFE': 13000,
                        'LRC': 27,
                        'LSK': 0.3,
                        'LUN': 0.34,
                        'MAID': 5,
                        'MANA': 143,
                        'MCAP': 5.44,
                        'MIPS': 43,
                        'MNE': 1.33,
                        'MSP': 121,
                        'MTH': 92,
                        'MYB': 3.9,
                        'NDC': 165,
                        'NEBL': 0.04,
                        'NET': 3.96,
                        'NTO': 998,
                        'NXC': 13.39,
                        'NXT': 3,
                        'OAX': 15,
                        'ODN': 0.004,
                        'OMG': 2,
                        'OPT': 335,
                        'ORME': 2.8,
                        'OTN': 0.57,
                        'PAY': 3.1,
                        'PIX': 96,
                        'PLBT': 0.33,
                        'PLR': 114,
                        'PLU': 0.87,
                        'POE': 784,
                        'POLL': 3.5,
                        'PPT': 2,
                        'PRE': 32,
                        'PRG': 39,
                        'PRO': 41,
                        'PRS': 60,
                        'PTOY': 0.5,
                        'QAU': 63,
                        'QCN': 0.03,
                        'QTUM': 0.04,
                        'QVT': 64,
                        'REP': 0.02,
                        'RKC': 15,
                        'RVT': 14,
                        'SAN': 2.24,
                        'SBD': 0.03,
                        'SCL': 2.6,
                        'SISA': 1640,
                        'SKIN': 407,
                        'SMART': 0.4,
                        'SMS': 0.0375,
                        'SNC': 36,
                        'SNGLS': 4,
                        'SNM': 48,
                        'SNT': 233,
                        'STEEM': 0.01,
                        'STRAT': 0.01,
                        'STU': 14,
                        'STX': 11,
                        'SUB': 17,
                        'SUR': 3,
                        'SWT': 0.51,
                        'TAAS': 0.91,
                        'TBT': 2.37,
                        'TFL': 15,
                        'TIME': 0.03,
                        'TIX': 7.1,
                        'TKN': 1,
                        'TKR': 84,
                        'TNT': 90,
                        'TRST': 1.6,
                        'TRX': 1395,
                        'UET': 480,
                        'UGT': 15,
                        'VEN': 14,
                        'VERI': 0.037,
                        'VIB': 50,
                        'VIBE': 145,
                        'VOISE': 618,
                        'WEALTH': 0.0168,
                        'WINGS': 2.4,
                        'WTC': 0.75,
                        'XAUR': 3.23,
                        'XDN': 0.01,
                        'XEM': 15,
                        'XUC': 0.9,
                        'YOYOW': 140,
                        'ZAP': 24,
                        'ZRX': 23,
                        'ZSC': 191
                    },
                    'deposit': {
                        'BTC': 0,
                        'ETH': 0,
                        'BCH': 0,
                        'USDT': 0,
                        'BTG': 0,
                        'LTC': 0,
                        'ZEC': 0,
                        'XMR': 0,
                        '1ST': 0,
                        'ADX': 0,
                        'AE': 0,
                        'AEON': 0,
                        'AIR': 0,
                        'AMP': 0,
                        'ANT': 0,
                        'ARDR': 0,
                        'ARN': 0,
                        'ART': 0,
                        'ATB': 0,
                        'ATL': 0,
                        'ATM': 0,
                        'ATS': 0,
                        'AVT': 0,
                        'BAS': 0,
                        'BCN': 0,
                        'BET': 0,
                        'BKB': 0,
                        'BMC': 0,
                        'BMT': 0,
                        'BNT': 0,
                        'BQX': 0,
                        'BTM': 0,
                        'BTX': 0,
                        'BUS': 0,
                        'CCT': 0,
                        'CDT': 0,
                        'CDX': 0,
                        'CFI': 0,
                        'CLD': 0,
                        'CND': 0,
                        'CNX': 0,
                        'COSS': 0,
                        'CSNO': 0,
                        'CTR': 0,
                        'CTX': 0,
                        'CVC': 0,
                        'DBIX': 0,
                        'DCN': 0,
                        'DCT': 0,
                        'DDF': 0,
                        'DENT': 0,
                        'DGB': 0,
                        'DGD': 0,
                        'DICE': 0,
                        'DLT': 0,
                        'DNT': 0,
                        'DOGE': 0,
                        'DOV': 0,
                        'DRPU': 0,
                        'DRT': 0,
                        'DSH': 0,
                        'EBET': 0,
                        'EBTC': 0,
                        'EBTCOLD': 0,
                        'ECAT': 0,
                        'EDG': 0,
                        'EDO': 0,
                        'ELE': 0,
                        'ELM': 0,
                        'EMC': 0,
                        'EMGO': 0,
                        'ENJ': 0,
                        'EOS': 0,
                        'ERO': 0,
                        'ETBS': 0,
                        'ETC': 0,
                        'ETP': 0,
                        'EVX': 0,
                        'EXN': 0,
                        'FRD': 0,
                        'FUEL': 0,
                        'FUN': 0,
                        'FYN': 0,
                        'FYP': 0,
                        'GNO': 0,
                        'GUP': 0,
                        'GVT': 0,
                        'HAC': 0,
                        'HDG': 0,
                        'HGT': 0,
                        'HPC': 0,
                        'HVN': 0,
                        'ICN': 0,
                        'ICO': 0,
                        'ICOS': 0,
                        'IND': 0,
                        'INDI': 0,
                        'ITS': 0,
                        'IXT': 0,
                        'KBR': 0,
                        'KICK': 0,
                        'LA': 0,
                        'LAT': 0,
                        'LIFE': 0,
                        'LRC': 0,
                        'LSK': 0,
                        'LUN': 0,
                        'MAID': 0,
                        'MANA': 0,
                        'MCAP': 0,
                        'MIPS': 0,
                        'MNE': 0,
                        'MSP': 0,
                        'MTH': 0,
                        'MYB': 0,
                        'NDC': 0,
                        'NEBL': 0,
                        'NET': 0,
                        'NTO': 0,
                        'NXC': 0,
                        'NXT': 0,
                        'OAX': 0,
                        'ODN': 0,
                        'OMG': 0,
                        'OPT': 0,
                        'ORME': 0,
                        'OTN': 0,
                        'PAY': 0,
                        'PIX': 0,
                        'PLBT': 0,
                        'PLR': 0,
                        'PLU': 0,
                        'POE': 0,
                        'POLL': 0,
                        'PPT': 0,
                        'PRE': 0,
                        'PRG': 0,
                        'PRO': 0,
                        'PRS': 0,
                        'PTOY': 0,
                        'QAU': 0,
                        'QCN': 0,
                        'QTUM': 0,
                        'QVT': 0,
                        'REP': 0,
                        'RKC': 0,
                        'RVT': 0,
                        'SAN': 0,
                        'SBD': 0,
                        'SCL': 0,
                        'SISA': 0,
                        'SKIN': 0,
                        'SMART': 0,
                        'SMS': 0,
                        'SNC': 0,
                        'SNGLS': 0,
                        'SNM': 0,
                        'SNT': 0,
                        'STEEM': 0,
                        'STRAT': 0,
                        'STU': 0,
                        'STX': 0,
                        'SUB': 0,
                        'SUR': 0,
                        'SWT': 0,
                        'TAAS': 0,
                        'TBT': 0,
                        'TFL': 0,
                        'TIME': 0,
                        'TIX': 0,
                        'TKN': 0,
                        'TKR': 0,
                        'TNT': 0,
                        'TRST': 0,
                        'TRX': 0,
                        'UET': 0,
                        'UGT': 0,
                        'VEN': 0,
                        'VERI': 0,
                        'VIB': 0,
                        'VIBE': 0,
                        'VOISE': 0,
                        'WEALTH': 0,
                        'WINGS': 0,
                        'WTC': 0,
                        'XAUR': 0,
                        'XDN': 0,
                        'XEM': 0,
                        'XUC': 0,
                        'YOYOW': 0,
                        'ZAP': 0,
                        'ZRX': 0,
                        'ZSC': 0
                    }
                }
            }
        });
    }

    commonCurrencyCode(currency) {
        if (currency == 'XBT') return 'BTC';
        if (currency == 'DRK') return 'DASH';
        if (currency == 'CAT') return 'BitClave';
        return currency;
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetSymbols();
            let result = [];
            for (let p = 0; p < markets['symbols'].length; p++) {
                let market = markets['symbols'][p];
                let id = market['symbol'];
                let base = market['commodity'];
                let quote = market['currency'];
                let lot = parseFloat(market['lot']);
                let step = parseFloat(market['step']);
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'lot': lot,
                    'step': step,
                    'info': market,
                    'precision': {
                        'amount': _this.precisionFromString(market['lot']),
                        'price': _this.precisionFromString(market['step'])
                    },
                    'limits': {
                        'amount': {
                            'min': lot,
                            'max': undefined
                        },
                        'price': {
                            'min': step,
                            'max': undefined
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        }
                    }
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let method = _this2.safeString(params, 'type', 'trading');
            method += 'GetBalance';
            let query = _this2.omit(params, 'type');
            let response = yield _this2[method](query);
            let balances = response['balance'];
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let code = balance['currency_code'];
                let currency = _this2.commonCurrencyCode(code);
                let free = _this2.safeFloat(balance, 'cash', 0.0);
                free = _this2.safeFloat(balance, 'balance', free);
                let used = _this2.safeFloat(balance, 'reserved', 0.0);
                let account = {
                    'free': free,
                    'used': used,
                    'total': _this2.sum(free, used)
                };
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetSymbolOrderbook(_this3.extend({
                'symbol': _this3.marketId(symbol)
            }, params));
            return _this3.parseOrderBook(orderbook);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['timestamp'];
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'high'),
            'low': this.safeFloat(ticker, 'low'),
            'bid': this.safeFloat(ticker, 'bid'),
            'ask': this.safeFloat(ticker, 'ask'),
            'vwap': undefined,
            'open': this.safeFloat(ticker, 'open'),
            'close': undefined,
            'first': undefined,
            'last': this.safeFloat(ticker, 'last'),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'volume'),
            'quoteVolume': this.safeFloat(ticker, 'volume_quote'),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let tickers = yield _this4.publicGetTicker(params);
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = _this4.markets_by_id[id];
                let symbol = market['symbol'];
                let ticker = tickers[id];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let ticker = yield _this5.publicGetSymbolTicker(_this5.extend({
                'symbol': market['id']
            }, params));
            if ('message' in ticker) throw new ExchangeError(_this5.id + ' ' + ticker['message']);
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        return {
            'info': trade,
            'id': trade[0],
            'timestamp': trade[3],
            'datetime': this.iso8601(trade[3]),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade[4],
            'price': parseFloat(trade[1]),
            'amount': parseFloat(trade[2])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetSymbolTrades(_this6.extend({
                'symbol': market['id'],
                // 'from': 0,
                // 'till': 100,
                // 'by': 'ts', // or by trade_id
                // 'sort': 'desc', // or asc
                // 'start_index': 0,
                // 'max_results': 1000,
                // 'format_item': 'object',
                // 'format_price': 'number',
                // 'format_amount': 'number',
                // 'format_tid': 'string',
                // 'format_timestamp': 'millisecond',
                // 'format_wrap': false,
                'side': 'true'
            }, params));
            return _this6.parseTrades(response['trades'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            // check if amount can be evenly divided into lots
            // they want integer quantity in lot units
            let quantity = parseFloat(amount) / market['lot'];
            let wholeLots = Math.round(quantity);
            let difference = quantity - wholeLots;
            if (Math.abs(difference) > market['step']) throw new ExchangeError(_this7.id + ' order amount should be evenly divisible by lot unit size of ' + market['lot'].toString());
            let clientOrderId = _this7.milliseconds();
            let order = {
                'clientOrderId': clientOrderId.toString(),
                'symbol': market['id'],
                'side': side,
                'quantity': wholeLots.toString(), // quantity in integer lot units
                'type': type
            };
            if (type == 'limit') {
                order['price'] = _this7.priceToPrecision(symbol, price);
            } else {
                order['timeInForce'] = 'FOK';
            }
            let response = yield _this7.tradingPostNewOrder(_this7.extend(order, params));
            return {
                'info': response,
                'id': response['ExecutionReport']['clientOrderId']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            return yield _this8.tradingPostCancelOrder(_this8.extend({
                'clientOrderId': id
            }, params));
        })();
    }

    parseOrderStatus(status) {
        let statuses = {
            'new': 'open',
            'partiallyFilled': 'open',
            'filled': 'closed',
            'canceled': 'canceled',
            'rejected': 'rejected',
            'expired': 'expired'
        };
        return this.safeString(statuses, status);
    }

    parseOrder(order, market = undefined) {
        let timestamp = parseInt(order['lastTimestamp']);
        let symbol = undefined;
        if (!market) market = this.markets_by_id[order['symbol']];
        let status = this.safeString(order, 'orderStatus');
        if (status) status = this.parseOrderStatus(status);
        let averagePrice = this.safeFloat(order, 'avgPrice', 0.0);
        let price = this.safeFloat(order, 'orderPrice');
        let amount = this.safeFloat(order, 'orderQuantity');
        let remaining = this.safeFloat(order, 'quantityLeaves');
        let filled = undefined;
        let cost = undefined;
        if (market) {
            symbol = market['symbol'];
            amount *= market['lot'];
            remaining *= market['lot'];
        }
        if (amount && remaining) {
            filled = amount - remaining;
            cost = averagePrice * filled;
        }
        return {
            'id': order['clientOrderId'].toString(),
            'info': order,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'status': status,
            'symbol': symbol,
            'type': order['type'],
            'side': order['side'],
            'price': price,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'fee': undefined
        };
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let response = yield _this9.tradingGetOrder(_this9.extend({
                'clientOrderId': id
            }, params));
            return _this9.parseOrder(response['orders'][0]);
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let statuses = ['new', 'partiallyFiiled'];
            let market = undefined;
            let request = {
                'sort': 'desc',
                'statuses': statuses.join(',')
            };
            if (symbol) {
                market = _this10.market(symbol);
                request['symbols'] = market['id'];
            }
            let response = yield _this10.tradingGetOrdersActive(_this10.extend(request, params));
            return _this10.parseOrders(response['orders'], market, since, limit);
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            let market = undefined;
            let statuses = ['filled', 'canceled', 'rejected', 'expired'];
            let request = {
                'sort': 'desc',
                'statuses': statuses.join(','),
                'max_results': 1000
            };
            if (symbol) {
                market = _this11.market(symbol);
                request['symbols'] = market['id'];
            }
            let response = yield _this11.tradingGetOrdersRecent(_this11.extend(request, params));
            return _this11.parseOrders(response['orders'], market, since, limit);
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            yield _this12.loadMarkets();
            let response = yield _this12.paymentPostPayout(_this12.extend({
                'currency_code': currency,
                'amount': amount,
                'address': address
            }, params));
            return {
                'info': response,
                'id': response['transaction']
            };
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = '/' + 'api' + '/' + this.version + '/' + api + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let payload = { 'nonce': nonce, 'apikey': this.apiKey };
            query = this.extend(payload, query);
            if (method == 'GET') url += '?' + this.urlencode(query);else url += '?' + this.urlencode(payload);
            let auth = url;
            if (method == 'POST') {
                if (Object.keys(query).length) {
                    body = this.urlencode(query);
                    auth += body;
                }
            }
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Signature': this.hmac(this.encode(auth), this.encode(this.secret), 'sha512').toLowerCase()
            };
        }
        url = this.urls['api'] + url;
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this13.fetch2(path, api, method, params, headers, body);
            if ('code' in response) {
                if ('ExecutionReport' in response) {
                    if (response['ExecutionReport']['orderRejectReason'] == 'orderExceedsLimit') throw new InsufficientFunds(_this13.id + ' ' + _this13.json(response));
                }
                throw new ExchangeError(_this13.id + ' ' + _this13.json(response));
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],63:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const hitbtc = require('./hitbtc');
const { ExchangeError, OrderNotFound, InsufficientFunds } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class hitbtc2 extends hitbtc {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'hitbtc2',
            'name': 'HitBTC v2',
            'countries': 'HK', // Hong Kong
            'rateLimit': 1500,
            'version': '2',
            'hasCORS': true,
            // older metainfo interface
            'hasFetchOHLCV': true,
            'hasFetchTickers': true,
            'hasFetchOrder': true,
            'hasFetchOrders': false,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'hasFetchMyTrades': true,
            'hasWithdraw': true,
            'hasFetchCurrencies': true,
            // new metainfo interface
            'has': {
                'fetchCurrencies': true,
                'fetchOHLCV': true,
                'fetchTickers': true,
                'fetchOrder': true,
                'fetchOrders': false,
                'fetchOpenOrders': true,
                'fetchClosedOrders': true,
                'fetchMyTrades': true,
                'withdraw': true
            },
            'timeframes': {
                '1m': 'M1',
                '3m': 'M3',
                '5m': 'M5',
                '15m': 'M15',
                '30m': 'M30', // default
                '1h': 'H1',
                '4h': 'H4',
                '1d': 'D1',
                '1w': 'D7',
                '1M': '1M'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
                'api': 'https://api.hitbtc.com',
                'www': 'https://hitbtc.com',
                'doc': 'https://api.hitbtc.com'
            },
            'api': {
                'public': {
                    'get': ['symbol', // Available Currency Symbols
                    'symbol/{symbol}', // Get symbol info
                    'currency', // Available Currencies
                    'currency/{currency}', // Get currency info
                    'ticker', // Ticker list for all symbols
                    'ticker/{symbol}', // Ticker for symbol
                    'trades/{symbol}', // Trades
                    'orderbook/{symbol}', // Orderbook
                    'candles/{symbol}']
                },
                'private': {
                    'get': ['order', // List your current open orders
                    'order/{clientOrderId}', // Get a single order by clientOrderId
                    'trading/balance', // Get trading balance
                    'trading/fee/{symbol}', // Get trading fee rate
                    'history/trades', // Get historical trades
                    'history/order', // Get historical orders
                    'history/order/{id}/trades', // Get historical trades by specified order
                    'account/balance', // Get main acccount balance
                    'account/transactions', // Get account transactions
                    'account/transactions/{id}', // Get account transaction by id
                    'account/crypto/address/{currency}'],
                    'post': ['order', // Create new order
                    'account/crypto/withdraw', // Withdraw crypro
                    'account/crypto/address/{currency}', // Create new deposit crypro address
                    'account/transfer'],
                    'put': ['order/{clientOrderId}', // Create new order
                    'account/crypto/withdraw/{id}'],
                    'delete': ['order', // Cancel all open orders
                    'order/{clientOrderId}', // Cancel order
                    'account/crypto/withdraw/{id}'],
                    'patch': ['order/{clientOrderId}']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'maker': -0.01 / 100,
                    'taker': 0.1 / 100
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BTC': 0.0007,
                        'ETH': 0.00958,
                        'BCH': 0.0018,
                        'USDT': 5,
                        'BTG': 0.0005,
                        'LTC': 0.003,
                        'ZEC': 0.0001,
                        'XMR': 0.09,
                        '1ST': 0.84,
                        'ADX': 5.7,
                        'AE': 6.7,
                        'AEON': 0.01006,
                        'AIR': 565,
                        'AMP': 9,
                        'ANT': 6.7,
                        'ARDR': 2,
                        'ARN': 18.5,
                        'ART': 26,
                        'ATB': 0.0004,
                        'ATL': 27,
                        'ATM': 504,
                        'ATS': 860,
                        'AVT': 1.9,
                        'BAS': 113,
                        'BCN': 0.1,
                        'BET': 124,
                        'BKB': 46,
                        'BMC': 32,
                        'BMT': 100,
                        'BNT': 2.57,
                        'BQX': 4.7,
                        'BTM': 40,
                        'BTX': 0.04,
                        'BUS': 0.004,
                        'CCT': 115,
                        'CDT': 100,
                        'CDX': 30,
                        'CFI': 61,
                        'CLD': 0.88,
                        'CND': 574,
                        'CNX': 0.04,
                        'COSS': 65,
                        'CSNO': 16,
                        'CTR': 15,
                        'CTX': 146,
                        'CVC': 8.46,
                        'DBIX': 0.0168,
                        'DCN': 120000,
                        'DCT': 0.02,
                        'DDF': 342,
                        'DENT': 6240,
                        'DGB': 0.4,
                        'DGD': 0.01,
                        'DICE': 0.32,
                        'DLT': 0.26,
                        'DNT': 0.21,
                        'DOGE': 2,
                        'DOV': 34,
                        'DRPU': 24,
                        'DRT': 240,
                        'DSH': 0.017,
                        'EBET': 84,
                        'EBTC': 20,
                        'EBTCOLD': 6.6,
                        'ECAT': 14,
                        'EDG': 2,
                        'EDO': 2.9,
                        'ELE': 0.00172,
                        'ELM': 0.004,
                        'EMC': 0.03,
                        'EMGO': 14,
                        'ENJ': 163,
                        'EOS': 1.5,
                        'ERO': 34,
                        'ETBS': 15,
                        'ETC': 0.002,
                        'ETP': 0.004,
                        'EVX': 5.4,
                        'EXN': 456,
                        'FRD': 65,
                        'FUEL': 123.00105,
                        'FUN': 202.9598309,
                        'FYN': 1.849,
                        'FYP': 66.13,
                        'GNO': 0.0034,
                        'GUP': 4,
                        'GVT': 1.2,
                        'HAC': 144,
                        'HDG': 7,
                        'HGT': 1082,
                        'HPC': 0.4,
                        'HVN': 120,
                        'ICN': 0.55,
                        'ICO': 34,
                        'ICOS': 0.35,
                        'IND': 76,
                        'INDI': 5913,
                        'ITS': 15.0012,
                        'IXT': 11,
                        'KBR': 143,
                        'KICK': 112,
                        'LA': 41,
                        'LAT': 1.44,
                        'LIFE': 13000,
                        'LRC': 27,
                        'LSK': 0.3,
                        'LUN': 0.34,
                        'MAID': 5,
                        'MANA': 143,
                        'MCAP': 5.44,
                        'MIPS': 43,
                        'MNE': 1.33,
                        'MSP': 121,
                        'MTH': 92,
                        'MYB': 3.9,
                        'NDC': 165,
                        'NEBL': 0.04,
                        'NET': 3.96,
                        'NTO': 998,
                        'NXC': 13.39,
                        'NXT': 3,
                        'OAX': 15,
                        'ODN': 0.004,
                        'OMG': 2,
                        'OPT': 335,
                        'ORME': 2.8,
                        'OTN': 0.57,
                        'PAY': 3.1,
                        'PIX': 96,
                        'PLBT': 0.33,
                        'PLR': 114,
                        'PLU': 0.87,
                        'POE': 784,
                        'POLL': 3.5,
                        'PPT': 2,
                        'PRE': 32,
                        'PRG': 39,
                        'PRO': 41,
                        'PRS': 60,
                        'PTOY': 0.5,
                        'QAU': 63,
                        'QCN': 0.03,
                        'QTUM': 0.04,
                        'QVT': 64,
                        'REP': 0.02,
                        'RKC': 15,
                        'RVT': 14,
                        'SAN': 2.24,
                        'SBD': 0.03,
                        'SCL': 2.6,
                        'SISA': 1640,
                        'SKIN': 407,
                        'SMART': 0.4,
                        'SMS': 0.0375,
                        'SNC': 36,
                        'SNGLS': 4,
                        'SNM': 48,
                        'SNT': 233,
                        'STEEM': 0.01,
                        'STRAT': 0.01,
                        'STU': 14,
                        'STX': 11,
                        'SUB': 17,
                        'SUR': 3,
                        'SWT': 0.51,
                        'TAAS': 0.91,
                        'TBT': 2.37,
                        'TFL': 15,
                        'TIME': 0.03,
                        'TIX': 7.1,
                        'TKN': 1,
                        'TKR': 84,
                        'TNT': 90,
                        'TRST': 1.6,
                        'TRX': 1395,
                        'UET': 480,
                        'UGT': 15,
                        'VEN': 14,
                        'VERI': 0.037,
                        'VIB': 50,
                        'VIBE': 145,
                        'VOISE': 618,
                        'WEALTH': 0.0168,
                        'WINGS': 2.4,
                        'WTC': 0.75,
                        'XAUR': 3.23,
                        'XDN': 0.01,
                        'XEM': 15,
                        'XUC': 0.9,
                        'YOYOW': 140,
                        'ZAP': 24,
                        'ZRX': 23,
                        'ZSC': 191
                    },
                    'deposit': {
                        'BTC': 0,
                        'ETH': 0,
                        'BCH': 0,
                        'USDT': 0,
                        'BTG': 0,
                        'LTC': 0,
                        'ZEC': 0,
                        'XMR': 0,
                        '1ST': 0,
                        'ADX': 0,
                        'AE': 0,
                        'AEON': 0,
                        'AIR': 0,
                        'AMP': 0,
                        'ANT': 0,
                        'ARDR': 0,
                        'ARN': 0,
                        'ART': 0,
                        'ATB': 0,
                        'ATL': 0,
                        'ATM': 0,
                        'ATS': 0,
                        'AVT': 0,
                        'BAS': 0,
                        'BCN': 0,
                        'BET': 0,
                        'BKB': 0,
                        'BMC': 0,
                        'BMT': 0,
                        'BNT': 0,
                        'BQX': 0,
                        'BTM': 0,
                        'BTX': 0,
                        'BUS': 0,
                        'CCT': 0,
                        'CDT': 0,
                        'CDX': 0,
                        'CFI': 0,
                        'CLD': 0,
                        'CND': 0,
                        'CNX': 0,
                        'COSS': 0,
                        'CSNO': 0,
                        'CTR': 0,
                        'CTX': 0,
                        'CVC': 0,
                        'DBIX': 0,
                        'DCN': 0,
                        'DCT': 0,
                        'DDF': 0,
                        'DENT': 0,
                        'DGB': 0,
                        'DGD': 0,
                        'DICE': 0,
                        'DLT': 0,
                        'DNT': 0,
                        'DOGE': 0,
                        'DOV': 0,
                        'DRPU': 0,
                        'DRT': 0,
                        'DSH': 0,
                        'EBET': 0,
                        'EBTC': 0,
                        'EBTCOLD': 0,
                        'ECAT': 0,
                        'EDG': 0,
                        'EDO': 0,
                        'ELE': 0,
                        'ELM': 0,
                        'EMC': 0,
                        'EMGO': 0,
                        'ENJ': 0,
                        'EOS': 0,
                        'ERO': 0,
                        'ETBS': 0,
                        'ETC': 0,
                        'ETP': 0,
                        'EVX': 0,
                        'EXN': 0,
                        'FRD': 0,
                        'FUEL': 0,
                        'FUN': 0,
                        'FYN': 0,
                        'FYP': 0,
                        'GNO': 0,
                        'GUP': 0,
                        'GVT': 0,
                        'HAC': 0,
                        'HDG': 0,
                        'HGT': 0,
                        'HPC': 0,
                        'HVN': 0,
                        'ICN': 0,
                        'ICO': 0,
                        'ICOS': 0,
                        'IND': 0,
                        'INDI': 0,
                        'ITS': 0,
                        'IXT': 0,
                        'KBR': 0,
                        'KICK': 0,
                        'LA': 0,
                        'LAT': 0,
                        'LIFE': 0,
                        'LRC': 0,
                        'LSK': 0,
                        'LUN': 0,
                        'MAID': 0,
                        'MANA': 0,
                        'MCAP': 0,
                        'MIPS': 0,
                        'MNE': 0,
                        'MSP': 0,
                        'MTH': 0,
                        'MYB': 0,
                        'NDC': 0,
                        'NEBL': 0,
                        'NET': 0,
                        'NTO': 0,
                        'NXC': 0,
                        'NXT': 0,
                        'OAX': 0,
                        'ODN': 0,
                        'OMG': 0,
                        'OPT': 0,
                        'ORME': 0,
                        'OTN': 0,
                        'PAY': 0,
                        'PIX': 0,
                        'PLBT': 0,
                        'PLR': 0,
                        'PLU': 0,
                        'POE': 0,
                        'POLL': 0,
                        'PPT': 0,
                        'PRE': 0,
                        'PRG': 0,
                        'PRO': 0,
                        'PRS': 0,
                        'PTOY': 0,
                        'QAU': 0,
                        'QCN': 0,
                        'QTUM': 0,
                        'QVT': 0,
                        'REP': 0,
                        'RKC': 0,
                        'RVT': 0,
                        'SAN': 0,
                        'SBD': 0,
                        'SCL': 0,
                        'SISA': 0,
                        'SKIN': 0,
                        'SMART': 0,
                        'SMS': 0,
                        'SNC': 0,
                        'SNGLS': 0,
                        'SNM': 0,
                        'SNT': 0,
                        'STEEM': 0,
                        'STRAT': 0,
                        'STU': 0,
                        'STX': 0,
                        'SUB': 0,
                        'SUR': 0,
                        'SWT': 0,
                        'TAAS': 0,
                        'TBT': 0,
                        'TFL': 0,
                        'TIME': 0,
                        'TIX': 0,
                        'TKN': 0,
                        'TKR': 0,
                        'TNT': 0,
                        'TRST': 0,
                        'TRX': 0,
                        'UET': 0,
                        'UGT': 0,
                        'VEN': 0,
                        'VERI': 0,
                        'VIB': 0,
                        'VIBE': 0,
                        'VOISE': 0,
                        'WEALTH': 0,
                        'WINGS': 0,
                        'WTC': 0,
                        'XAUR': 0,
                        'XDN': 0,
                        'XEM': 0,
                        'XUC': 0,
                        'YOYOW': 0,
                        'ZAP': 0,
                        'ZRX': 0,
                        'ZSC': 0
                    }
                }
            }
        });
    }

    commonCurrencyCode(currency) {
        if (currency == 'CAT') return 'BitClave';
        return currency;
    }

    currencyId(currency) {
        if (currency == 'BitClave') return 'CAT';
        return currency;
    }

    feeToPrecision(symbol, fee) {
        return this.truncate(fee, 8);
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetSymbol();
            let result = [];
            for (let i = 0; i < markets.length; i++) {
                let market = markets[i];
                let id = market['id'];
                let base = market['baseCurrency'];
                let quote = market['quoteCurrency'];
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                let lot = parseFloat(market['quantityIncrement']);
                let step = parseFloat(market['tickSize']);
                let precision = {
                    'price': _this.precisionFromString(market['tickSize']),
                    'amount': _this.precisionFromString(market['quantityIncrement'])
                };
                let taker = parseFloat(market['takeLiquidityRate']);
                let maker = parseFloat(market['provideLiquidityRate']);
                result.push(_this.extend(_this.fees['trading'], {
                    'info': market,
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'active': true,
                    'lot': lot,
                    'step': step,
                    'taker': taker,
                    'maker': maker,
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': lot,
                            'max': undefined
                        },
                        'price': {
                            'min': step,
                            'max': undefined
                        },
                        'cost': {
                            'min': lot * step,
                            'max': undefined
                        }
                    }
                }));
            }
            return result;
        })();
    }

    fetchCurrencies(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let currencies = yield _this2.publicGetCurrency(params);
            let result = {};
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let id = currency['id'];
                // todo: will need to rethink the fees
                // to add support for multiple withdrawal/deposit methods and
                // differentiated fees for each particular method
                let precision = 8; // default precision, todo: fix "magic constants"
                let code = _this2.commonCurrencyCode(id);
                let payin = currency['payinEnabled'];
                let payout = currency['payoutEnabled'];
                let transfer = currency['transferEnabled'];
                let active = payin && payout && transfer;
                let status = 'ok';
                if ('disabled' in currency) if (currency['disabled']) status = 'disabled';
                let type = currency['crypto'] ? 'crypto' : 'fiat';
                result[code] = {
                    'id': id,
                    'code': code,
                    'type': type,
                    'payin': payin,
                    'payout': payout,
                    'transfer': transfer,
                    'info': currency,
                    'name': currency['fullName'],
                    'active': active,
                    'status': status,
                    'fee': undefined, // todo: redesign
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'price': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        },
                        'withdraw': {
                            'min': undefined,
                            'max': Math.pow(10, precision)
                        }
                    }
                };
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let type = _this3.safeString(params, 'type', 'trading');
            let method = 'privateGet' + _this3.capitalize(type) + 'Balance';
            let balances = yield _this3[method]();
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let code = balance['currency'];
                let currency = _this3.commonCurrencyCode(code);
                let account = {
                    'free': parseFloat(balance['available']),
                    'used': parseFloat(balance['reserved']),
                    'total': 0.0
                };
                account['total'] = _this3.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this3.parseBalance(result);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {
        let timestamp = this.parse8601(ohlcv['timestamp']);
        return [timestamp, parseFloat(ohlcv['open']), parseFloat(ohlcv['max']), parseFloat(ohlcv['min']), parseFloat(ohlcv['close']), parseFloat(ohlcv['volumeQuote'])];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let request = {
                'symbol': market['id'],
                'period': _this4.timeframes[timeframe]
            };
            if (limit) request['limit'] = limit;
            let response = yield _this4.publicGetCandlesSymbol(_this4.extend(request, params));
            return _this4.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let orderbook = yield _this5.publicGetOrderbookSymbol(_this5.extend({
                'symbol': _this5.marketId(symbol)
            }, params));
            return _this5.parseOrderBook(orderbook, undefined, 'bid', 'ask', 'price', 'size');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.parse8601(ticker['timestamp']);
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'high'),
            'low': this.safeFloat(ticker, 'low'),
            'bid': this.safeFloat(ticker, 'bid'),
            'ask': this.safeFloat(ticker, 'ask'),
            'vwap': undefined,
            'open': this.safeFloat(ticker, 'open'),
            'close': this.safeFloat(ticker, 'close'),
            'first': undefined,
            'last': this.safeFloat(ticker, 'last'),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'volume'),
            'quoteVolume': this.safeFloat(ticker, 'volumeQuote'),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let tickers = yield _this6.publicGetTicker(params);
            let result = {};
            for (let i = 0; i < tickers.length; i++) {
                let ticker = tickers[i];
                let id = ticker['symbol'];
                let market = _this6.markets_by_id[id];
                let symbol = market['symbol'];
                result[symbol] = _this6.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let ticker = yield _this7.publicGetTickerSymbol(_this7.extend({
                'symbol': market['id']
            }, params));
            if ('message' in ticker) throw new ExchangeError(_this7.id + ' ' + ticker['message']);
            return _this7.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = this.parse8601(trade['timestamp']);
        let symbol = undefined;
        if (market) {
            symbol = market['symbol'];
        } else {
            let id = trade['symbol'];
            if (id in this.markets_by_id) {
                market = this.markets_by_id[id];
                symbol = market['symbol'];
            } else {
                symbol = id;
            }
        }
        let fee = undefined;
        if ('fee' in trade) {
            let currency = market ? market['quote'] : undefined;
            fee = {
                'cost': parseFloat(trade['fee']),
                'currency': currency
            };
        }
        let orderId = undefined;
        if ('clientOrderId' in trade) orderId = trade['clientOrderId'];
        let price = parseFloat(trade['price']);
        let amount = parseFloat(trade['quantity']);
        let cost = price * amount;
        return {
            'info': trade,
            'id': trade['id'].toString(),
            'order': orderId,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': undefined,
            'side': trade['side'],
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': fee
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let market = _this8.market(symbol);
            let response = yield _this8.publicGetTradesSymbol(_this8.extend({
                'symbol': market['id']
            }, params));
            return _this8.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let market = _this9.market(symbol);
            // their max accepted length is 32 characters
            let uuid = _this9.uuid();
            let parts = uuid.split('-');
            let clientOrderId = parts.join('');
            clientOrderId = clientOrderId.slice(0, 32);
            amount = parseFloat(amount);
            let request = {
                'clientOrderId': clientOrderId,
                'symbol': market['id'],
                'side': side,
                'quantity': _this9.amountToPrecision(symbol, amount),
                'type': type
            };
            if (type == 'limit') {
                request['price'] = _this9.priceToPrecision(symbol, price);
            } else {
                request['timeInForce'] = 'FOK';
            }
            let response = yield _this9.privatePostOrder(_this9.extend(request, params));
            let order = _this9.parseOrder(response);
            let id = order['id'];
            _this9.orders[id] = order;
            return order;
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            return yield _this10.privateDeleteOrderClientOrderId(_this10.extend({
                'clientOrderId': id
            }, params));
        })();
    }

    parseOrder(order, market = undefined) {
        let created = undefined;
        if ('createdAt' in order) created = this.parse8601(order['createdAt']);
        let updated = undefined;
        if ('updatedAt' in order) updated = this.parse8601(order['updatedAt']);
        if (!market) market = this.markets_by_id[order['symbol']];
        let symbol = market['symbol'];
        let amount = this.safeFloat(order, 'quantity');
        let filled = this.safeFloat(order, 'cumQuantity');
        let status = order['status'];
        if (status == 'new') {
            status = 'open';
        } else if (status == 'suspended') {
            status = 'open';
        } else if (status == 'partiallyFilled') {
            status = 'open';
        } else if (status == 'filled') {
            status = 'closed';
        }
        let id = order['clientOrderId'].toString();
        let price = this.safeFloat(order, 'price');
        if (typeof price == 'undefined') {
            if (id in this.orders) price = this.orders[id]['price'];
        }
        let remaining = undefined;
        let cost = undefined;
        if (typeof amount != 'undefined') {
            if (typeof filled != 'undefined') {
                remaining = amount - filled;
                if (typeof price != 'undefined') {
                    cost = filled * price;
                }
            }
        }
        return {
            'id': id,
            'timestamp': created,
            'datetime': this.iso8601(created),
            'created': created,
            'updated': updated,
            'status': status,
            'symbol': symbol,
            'type': order['type'],
            'side': order['side'],
            'price': price,
            'amount': amount,
            'cost': cost,
            'filled': filled,
            'remaining': remaining,
            'fee': undefined,
            'info': order
        };
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            let response = yield _this11.privateGetHistoryOrder(_this11.extend({
                'clientOrderId': id
            }, params));
            let numOrders = response.length;
            if (numOrders > 0) return _this11.parseOrder(response[0]);
            throw new OrderNotFound(_this11.id + ' order ' + id + ' not found');
        })();
    }

    fetchActiveOrder(id, symbol = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            yield _this12.loadMarkets();
            let response = yield _this12.privateGetOrderClientOrderId(_this12.extend({
                'clientOrderId': id
            }, params));
            return _this12.parseOrder(response);
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            yield _this13.loadMarkets();
            let market = undefined;
            let request = {};
            if (symbol) {
                market = _this13.market(symbol);
                request['symbol'] = market['id'];
            }
            let response = yield _this13.privateGetOrder(_this13.extend(request, params));
            return _this13.parseOrders(response, market, since, limit);
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            yield _this14.loadMarkets();
            let market = undefined;
            let request = {};
            if (symbol) {
                market = _this14.market(symbol);
                request['symbol'] = market['id'];
            }
            if (limit) request['limit'] = limit;
            if (since) {
                request['from'] = _this14.iso8601(since);
            }
            let response = yield _this14.privateGetHistoryOrder(_this14.extend(request, params));
            return _this14.parseOrders(response, market, since, limit);
        })();
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            yield _this15.loadMarkets();
            let request = {
                // 'symbol': 'BTC/USD', // optional
                // 'sort': 'DESC', // or 'ASC'
                // 'by': 'timestamp', // or 'id'	String	timestamp by default, or id
                // 'from':	'Datetime or Number', // ISO 8601
                // 'till':	'Datetime or Number',
                // 'limit': 100,
                // 'offset': 0,
            };
            let market = undefined;
            if (symbol) {
                market = _this15.market(symbol);
                request['symbol'] = market['id'];
            }
            if (since) request['from'] = _this15.iso8601(since);
            if (limit) request['limit'] = limit;
            let response = yield _this15.privateGetHistoryTrades(_this15.extend(request, params));
            return _this15.parseTrades(response, market, since, limit);
        })();
    }

    createDepositAddress(currency, params = {}) {
        var _this16 = this;

        return _asyncToGenerator(function* () {
            let currencyId = _this16.currencyId(currency);
            let response = yield _this16.privatePostAccountCryptoAddressCurrency({
                'currency': currencyId
            });
            let address = response['address'];
            return {
                'currency': currency,
                'address': address,
                'status': 'ok',
                'info': response
            };
        })();
    }

    fetchDepositAddress(currency, params = {}) {
        var _this17 = this;

        return _asyncToGenerator(function* () {
            let currencyId = _this17.currencyId(currency);
            let response = yield _this17.privateGetAccountCryptoAddressCurrency({
                'currency': currencyId
            });
            let address = response['address'];
            return {
                'currency': currency,
                'address': address,
                'status': 'ok',
                'info': response
            };
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this18 = this;

        return _asyncToGenerator(function* () {
            let currencyId = _this18.currencyId(currency);
            amount = parseFloat(amount);
            let response = yield _this18.privatePostAccountCryptoWithdraw(_this18.extend({
                'currency': currencyId,
                'amount': amount,
                'address': address
            }, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = '/api' + '/' + this.version + '/';
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            url += api + '/' + this.implodeParams(path, params);
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            url += this.implodeParams(path, params);
            if (method == 'GET') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                if (Object.keys(query).length) body = this.json(query);
            }
            let payload = this.encode(this.apiKey + ':' + this.secret);
            let auth = this.stringToBase64(payload);
            headers = {
                'Authorization': "Basic " + this.decode(auth),
                'Content-Type': 'application/json'
            };
        }
        url = this.urls['api'] + url;
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code == 400) {
            if (body[0] == "{") {
                let response = JSON.parse(body);
                if ('error' in response) {
                    if ('message' in response['error']) {
                        let message = response['error']['message'];
                        if (message == 'Order not found') {
                            throw new OrderNotFound(this.id + ' order not found in active orders');
                        } else if (message == 'Insufficient funds') {
                            throw new InsufficientFunds(this.id + ' ' + message);
                        }
                    }
                }
            }
            throw new ExchangeError(this.id + ' ' + body);
        }
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this19 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this19.fetch2(path, api, method, params, headers, body);
            if ('error' in response) throw new ExchangeError(_this19.id + ' ' + _this19.json(response));
            return response;
        })();
    }
};
},{"./base/errors":10,"./hitbtc":62}],64:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class huobi extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'huobi',
            'name': 'Huobi',
            'countries': 'CN',
            'rateLimit': 2000,
            'version': 'v3',
            'hasCORS': false,
            'hasFetchOHLCV': true,
            'timeframes': {
                '1m': '001',
                '5m': '005',
                '15m': '015',
                '30m': '030',
                '1h': '060',
                '1d': '100',
                '1w': '200',
                '1M': '300',
                '1y': '400'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',
                'api': 'http://api.huobi.com',
                'www': 'https://www.huobi.com',
                'doc': 'https://github.com/huobiapi/API_Docs_en/wiki'
            },
            'api': {
                'staticmarket': {
                    'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
                },
                'usdmarket': {
                    'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
                },
                'trade': {
                    'post': ['get_account_info', 'get_orders', 'order_info', 'buy', 'sell', 'buy_market', 'sell_market', 'cancel_order', 'get_new_deal_orders', 'get_order_id_by_trade_id', 'withdraw_coin', 'cancel_withdraw_coin', 'get_withdraw_coin_result', 'transfer', 'loan', 'repayment', 'get_loan_available', 'get_loans']
                }
            },
            'markets': {
                'BTC/CNY': { 'id': 'btc', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 1 },
                'LTC/CNY': { 'id': 'ltc', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 2 }
                // 'BTC/USD': { 'id': 'btc', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'type': 'usdmarket',    'coinType': 1 },
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let balances = yield _this.tradePostGetAccountInfo();
            let result = { 'info': balances };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let account = _this.account();
                let available = 'available_' + lowercase + '_display';
                let frozen = 'frozen_' + lowercase + '_display';
                let loan = 'loan_' + lowercase + '_display';
                if (available in balances) account['free'] = parseFloat(balances[available]);
                if (frozen in balances) account['used'] = parseFloat(balances[frozen]);
                if (loan in balances) account['used'] = _this.sum(account['used'], parseFloat(balances[loan]));
                account['total'] = _this.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let market = _this2.market(symbol);
            let method = market['type'] + 'GetDepthId';
            let orderbook = yield _this2[method](_this2.extend({ 'id': market['id'] }, params));
            return _this2.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let market = _this3.market(symbol);
            let method = market['type'] + 'GetTickerId';
            let response = yield _this3[method](_this3.extend({
                'id': market['id']
            }, params));
            let ticker = response['ticker'];
            let timestamp = parseInt(response['time']) * 1000;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': _this3.safeFloat(ticker, 'high'),
                'low': _this3.safeFloat(ticker, 'low'),
                'bid': _this3.safeFloat(ticker, 'buy'),
                'ask': _this3.safeFloat(ticker, 'sell'),
                'vwap': undefined,
                'open': _this3.safeFloat(ticker, 'open'),
                'close': undefined,
                'first': undefined,
                'last': _this3.safeFloat(ticker, 'last'),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': _this3.safeFloat(ticker, 'vol'),
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['ts'];
        return {
            'info': trade,
            'id': trade['id'].toString(),
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['direction'],
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let method = market['type'] + 'GetDetailId';
            let response = yield _this4[method](_this4.extend({
                'id': market['id']
            }, params));
            return _this4.parseTrades(response['trades'], market, since, limit);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        // not implemented yet
        return [ohlcv[0], ohlcv[1], ohlcv[2], ohlcv[3], ohlcv[4], ohlcv[6]];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let market = _this5.market(symbol);
            let method = market['type'] + 'GetIdKlinePeriod';
            let ohlcvs = yield _this5[method](_this5.extend({
                'id': market['id'],
                'period': _this5.timeframes[timeframe]
            }, params));
            return ohlcvs;
            // return this.parseOHLCVs (ohlcvs, market, timeframe, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let market = _this6.market(symbol);
            let method = 'tradePost' + _this6.capitalize(side);
            let order = {
                'coin_type': market['coinType'],
                'amount': amount,
                'market': market['quote'].toLowerCase()
            };
            if (type == 'limit') order['price'] = price;else method += _this6.capitalize(type);
            let response = _this6[method](_this6.extend(order, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            return yield _this7.tradePostCancelOrder({ 'id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'];
        if (api == 'trade') {
            this.checkRequiredCredentials();
            url += '/api' + this.version;
            let query = this.keysort(this.extend({
                'method': path,
                'access_key': this.apiKey,
                'created': this.nonce()
            }, params));
            let queryString = this.urlencode(this.omit(query, 'market'));
            // secret key must be appended to the query before signing
            queryString += '&secret_key=' + this.secret;
            query['sign'] = this.hash(this.encode(queryString));
            body = this.urlencode(query);
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        } else {
            url += '/' + api + '/' + this.implodeParams(path, params) + '_json.js';
            let query = this.omit(params, this.extractParams(path));
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'trade', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if ('status' in response) if (response['status'] == 'error') throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
            if ('code' in response) throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],65:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const huobipro = require('./huobipro.js');

// ---------------------------------------------------------------------------

module.exports = class huobicny extends huobipro {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'huobicny',
            'name': 'Huobi CNY',
            'hostname': 'be.huobi.com',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',
                'api': 'https://be.huobi.com',
                'www': 'https://www.huobi.com',
                'doc': 'https://github.com/huobiapi/API_Docs/wiki/REST_api_reference'
            }
        });
    }
};
},{"./huobipro.js":66}],66:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class huobipro extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'huobipro',
            'name': 'Huobi Pro',
            'countries': 'CN',
            'rateLimit': 2000,
            'userAgent': this.userAgents['chrome39'],
            'version': 'v1',
            'accounts': undefined,
            'accountsById': undefined,
            'hostname': 'api.huobi.pro',
            'hasCORS': false,
            // obsolete metainfo structure
            'hasFetchOHLCV': true,
            'hasFetchOrders': true,
            'hasFetchOpenOrders': true,
            // new metainfo structure
            'has': {
                'fetchOHCLV': true,
                'fetchOrders': true,
                'fetchOpenOrders': true
            },
            'timeframes': {
                '1m': '1min',
                '5m': '5min',
                '15m': '15min',
                '30m': '30min',
                '1h': '60min',
                '1d': '1day',
                '1w': '1week',
                '1M': '1mon',
                '1y': '1year'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',
                'api': 'https://api.huobi.pro',
                'www': 'https://www.huobi.pro',
                'doc': 'https://github.com/huobiapi/API_Docs/wiki/REST_api_reference'
            },
            'api': {
                'market': {
                    'get': ['history/kline', // 获取K线数据
                    'detail/merged', // 获取聚合行情(Ticker)
                    'depth', // 获取 Market Depth 数据
                    'trade', // 获取 Trade Detail 数据
                    'history/trade', // 批量获取最近的交易记录
                    'detail']
                },
                'public': {
                    'get': ['common/symbols', // 查询系统支持的所有交易对
                    'common/currencys', // 查询系统支持的所有币种
                    'common/timestamp']
                },
                'private': {
                    'get': ['account/accounts', // 查询当前用户的所有账户(即account-id)
                    'account/accounts/{id}/balance', // 查询指定账户的余额
                    'order/orders/{id}', // 查询某个订单详情
                    'order/orders/{id}/matchresults', // 查询某个订单的成交明细
                    'order/orders', // 查询当前委托、历史委托
                    'order/matchresults', // 查询当前成交、历史成交
                    'dw/withdraw-virtual/addresses'],
                    'post': ['order/orders/place', // 创建并执行一个新订单 (一步下单， 推荐使用)
                    'order/orders', // 创建一个新的订单请求 （仅创建订单，不执行下单）
                    'order/orders/{id}/place', // 执行一个订单 （仅执行已创建的订单）
                    'order/orders/{id}/submitcancel', // 申请撤销一个订单请求
                    'order/orders/batchcancel', // 批量撤销订单
                    'dw/balance/transfer', // 资产划转
                    'dw/withdraw-virtual/create', // 申请提现虚拟币
                    'dw/withdraw-virtual/{id}/place', // 确认申请虚拟币提现
                    'dw/withdraw-virtual/{id}/cancel']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.publicGetCommonSymbols();
            let markets = response['data'];
            let numMarkets = markets.length;
            if (numMarkets < 1) throw new ExchangeError(_this.id + ' publicGetCommonSymbols returned empty response: ' + _this.json(response));
            let result = [];
            for (let i = 0; i < markets.length; i++) {
                let market = markets[i];
                let baseId = market['base-currency'];
                let quoteId = market['quote-currency'];
                let base = baseId.toUpperCase();
                let quote = quoteId.toUpperCase();
                let id = baseId + quoteId;
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                let precision = {
                    'amount': market['amount-precision'],
                    'price': market['price-precision']
                };
                let lot = Math.pow(10, -precision['amount']);
                let maker = base == 'OMG' ? 0 : 0.2 / 100;
                let taker = base == 'OMG' ? 0 : 0.2 / 100;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'lot': lot,
                    'precision': precision,
                    'taker': taker,
                    'maker': maker,
                    'limits': {
                        'amount': {
                            'min': lot,
                            'max': Math.pow(10, precision['amount'])
                        },
                        'price': {
                            'min': Math.pow(10, -precision['price']),
                            'max': undefined
                        },
                        'cost': {
                            'min': 0,
                            'max': undefined
                        }
                    },
                    'info': market
                });
            }
            return result;
        })();
    }

    parseTicker(ticker, market = undefined) {
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let last = undefined;
        if ('last' in ticker) last = ticker['last'];
        let timestamp = this.milliseconds();
        if ('ts' in ticker) timestamp = ticker['ts'];
        let bid = undefined;
        let ask = undefined;
        if ('bid' in ticker) {
            if (ticker['bid']) bid = this.safeFloat(ticker['bid'], 0);
        }
        if ('ask' in ticker) {
            if (ticker['ask']) ask = this.safeFloat(ticker['ask'], 0);
        }
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': ticker['high'],
            'low': ticker['low'],
            'bid': bid,
            'ask': ask,
            'vwap': undefined,
            'open': ticker['open'],
            'close': ticker['close'],
            'first': undefined,
            'last': last,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['amount']),
            'quoteVolume': ticker['vol'],
            'info': ticker
        };
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let market = _this2.market(symbol);
            let response = yield _this2.marketGetDepth(_this2.extend({
                'symbol': market['id'],
                'type': 'step0'
            }, params));
            if ('tick' in response) {
                if (!response['tick']) {
                    throw new ExchangeError(_this2.id + ' fetchOrderBook() returned empty response: ' + _this2.json(response));
                }
                return _this2.parseOrderBook(response['tick'], response['tick']['ts']);
            }
            throw new ExchangeError(_this2.id + ' fetchOrderBook() returned unrecognized response: ' + _this2.json(response));
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let response = yield _this3.marketGetDetailMerged(_this3.extend({
                'symbol': market['id']
            }, params));
            return _this3.parseTicker(response['tick'], market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['ts'];
        return {
            'info': trade,
            'id': trade['id'].toString(),
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['direction'],
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    parseTradesData(data, market, since = undefined, limit = undefined) {
        let result = [];
        for (let i = 0; i < data.length; i++) {
            let trades = this.parseTrades(data[i]['data'], market, since, limit);
            for (let k = 0; k < trades.length; k++) {
                result.push(trades[k]);
            }
        }
        return result;
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let response = yield _this4.marketGetHistoryTrade(_this4.extend({
                'symbol': market['id'],
                'size': 2000
            }, params));
            return _this4.parseTradesData(response['data'], market, since, limit);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [ohlcv['id'] * 1000, ohlcv['open'], ohlcv['high'], ohlcv['low'], ohlcv['close'], ohlcv['vol']];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.marketGetHistoryKline(_this5.extend({
                'symbol': market['id'],
                'period': _this5.timeframes[timeframe],
                'size': 2000 // max = 2000
            }, params));
            return _this5.parseOHLCVs(response['data'], market, timeframe, since, limit);
        })();
    }

    loadAccounts(reload = false) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            if (reload) {
                _this6.accounts = yield _this6.fetchAccounts();
            } else {
                if (_this6.accounts) {
                    return _this6.accounts;
                } else {
                    _this6.accounts = yield _this6.fetchAccounts();
                    _this6.accountsById = _this6.indexBy(_this6.accounts, 'id');
                }
            }
            return _this6.accounts;
        })();
    }

    fetchAccounts() {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let response = yield _this7.privateGetAccountAccounts();
            return response['data'];
        })();
    }

    fetchBalance(params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            yield _this8.loadAccounts();
            let response = yield _this8.privateGetAccountAccountsIdBalance(_this8.extend({
                'id': _this8.accounts[0]['id']
            }, params));
            let balances = response['data']['list'];
            let result = { 'info': response };
            for (let i = 0; i < balances.length; i++) {
                let balance = balances[i];
                let uppercase = balance['currency'].toUpperCase();
                let currency = _this8.commonCurrencyCode(uppercase);
                let account = undefined;
                if (currency in result) account = result[currency];else account = _this8.account();
                if (balance['type'] == 'trade') account['free'] = parseFloat(balance['balance']);
                if (balance['type'] == 'frozen') account['used'] = parseFloat(balance['balance']);
                account['total'] = _this8.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this8.parseBalance(result);
        })();
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this9.id + ' fetchOrders() requires a symbol parameter');
            _this9.load_markets();
            let market = _this9.market(symbol);
            let status = undefined;
            if ('type' in params) {
                status = params['type'];
            } else if ('status' in params) {
                status = params['status'];
            } else {
                throw new ExchangeError(_this9.id + ' fetchOrders() requires type param or status param for spot market ' + symbol + '(0 or "open" for unfilled or partial filled orders, 1 or "closed" for filled orders)');
            }
            if (status == 0 || status == 'open') {
                status = 'submitted,partial-filled';
            } else if (status == 1 || status == 'closed') {
                status = 'filled,partial-canceled';
            } else {
                throw new ExchangeError(_this9.id + ' fetchOrders() wrong type param or status param for spot market ' + symbol + '(0 or "open" for unfilled or partial filled orders, 1 or "closed" for filled orders)');
            }
            let response = yield _this9.privateGetOrderOrders(_this9.extend({
                'symbol': market['id'],
                'states': status
            }));
            return _this9.parseOrders(response['data'], market, since, limit);
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let open = 0; // 0 for unfilled orders, 1 for filled orders
            return _this10.fetchOrders(symbol, undefined, undefined, _this10.extend({
                'status': open
            }, params));
        })();
    }

    parseOrderStatus(status) {
        if (status == 'partial-filled') {
            return 'open';
        } else if (status == 'filled') {
            return 'closed';
        } else if (status == 'canceled') {
            return 'canceled';
        } else if (status == 'submitted') {
            return 'open';
        }
        return status;
    }

    parseOrder(order, market = undefined) {
        let side = undefined;
        let type = undefined;
        let status = undefined;
        if ('type' in order) {
            let orderType = order['type'].split('-');
            side = orderType[0];
            type = orderType[1];
            status = this.parseOrderStatus(order['state']);
        }
        let symbol = undefined;
        if (!market) {
            if ('symbol' in order) {
                if (order['symbol'] in this.markets_by_id) {
                    let marketId = order['symbol'];
                    market = this.markets_by_id[marketId];
                }
            }
        }
        if (market) symbol = market['symbol'];
        let timestamp = order['created-at'];
        let amount = parseFloat(order['amount']);
        let filled = parseFloat(order['field-amount']);
        let remaining = amount - filled;
        let price = parseFloat(order['price']);
        let cost = parseFloat(order['field-cash-amount']);
        let average = 0;
        if (filled) average = parseFloat(cost / filled);
        let result = {
            'info': order,
            'id': order['id'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': price,
            'average': average,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': undefined
        };
        return result;
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            yield _this11.loadAccounts();
            let market = _this11.market(symbol);
            let order = {
                'account-id': _this11.accounts[0]['id'],
                'amount': _this11.amountToPrecision(symbol, amount),
                'symbol': market['id'],
                'type': side + '-' + type
            };
            if (type == 'limit') order['price'] = _this11.priceToPrecision(symbol, price);
            let response = yield _this11.privatePostOrderOrdersPlace(_this11.extend(order, params));
            return {
                'info': response,
                'id': response['data']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            return yield _this12.privatePostOrderOrdersIdSubmitcancel({ 'id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = '/';
        if (api == 'market') url += api;else url += this.version;
        url += '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'private') {
            this.checkRequiredCredentials();
            let timestamp = this.YmdHMS(this.milliseconds(), 'T');
            let request = this.keysort(this.extend({
                'SignatureMethod': 'HmacSHA256',
                'SignatureVersion': '2',
                'AccessKeyId': this.apiKey,
                'Timestamp': timestamp
            }, query));
            let auth = this.urlencode(request);
            let payload = [method, this.hostname, url, auth].join("\n");
            let signature = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256', 'base64');
            auth += '&' + this.urlencode({ 'Signature': signature });
            url += '?' + auth;
            if (method == 'POST') {
                body = this.json(query);
                headers = {
                    'Content-Type': 'application/json'
                };
            }
        } else {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        }
        url = this.urls['api'] + url;
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this13.fetch2(path, api, method, params, headers, body);
            if ('status' in response) if (response['status'] == 'error') throw new ExchangeError(_this13.id + ' ' + _this13.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],67:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');

//  ---------------------------------------------------------------------------

module.exports = class independentreserve extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'independentreserve',
            'name': 'Independent Reserve',
            'countries': ['AU', 'NZ'], // Australia, New Zealand
            'rateLimit': 1000,
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/30521662-cf3f477c-9bcb-11e7-89bc-d1ac85012eda.jpg',
                'api': {
                    'public': 'https://api.independentreserve.com/Public',
                    'private': 'https://api.independentreserve.com/Private'
                },
                'www': 'https://www.independentreserve.com',
                'doc': 'https://www.independentreserve.com/API'
            },
            'api': {
                'public': {
                    'get': ['GetValidPrimaryCurrencyCodes', 'GetValidSecondaryCurrencyCodes', 'GetValidLimitOrderTypes', 'GetValidMarketOrderTypes', 'GetValidOrderTypes', 'GetValidTransactionTypes', 'GetMarketSummary', 'GetOrderBook', 'GetTradeHistorySummary', 'GetRecentTrades', 'GetFxRates']
                },
                'private': {
                    'post': ['PlaceLimitOrder', 'PlaceMarketOrder', 'CancelOrder', 'GetOpenOrders', 'GetClosedOrders', 'GetClosedFilledOrders', 'GetOrderDetails', 'GetAccounts', 'GetTransactions', 'GetDigitalCurrencyDepositAddress', 'GetDigitalCurrencyDepositAddresses', 'SynchDigitalCurrencyDepositAddressWithBlockchain', 'WithdrawDigitalCurrency', 'RequestFiatWithdrawal', 'GetTrades']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let baseCurrencies = yield _this.publicGetValidPrimaryCurrencyCodes();
            let quoteCurrencies = yield _this.publicGetValidSecondaryCurrencyCodes();
            let result = [];
            for (let i = 0; i < baseCurrencies.length; i++) {
                let baseId = baseCurrencies[i];
                let baseIdUppercase = baseId.toUpperCase();
                let base = _this.commonCurrencyCode(baseIdUppercase);
                for (let j = 0; j < quoteCurrencies.length; j++) {
                    let quoteId = quoteCurrencies[j];
                    let quoteIdUppercase = quoteId.toUpperCase();
                    let quote = _this.commonCurrencyCode(quoteIdUppercase);
                    let id = baseId + '/' + quoteId;
                    let symbol = base + '/' + quote;
                    let taker = 0.5 / 100;
                    let maker = 0.5 / 100;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'baseId': baseId,
                        'quoteId': quoteId,
                        'taker': taker,
                        'maker': maker,
                        'info': id
                    });
                }
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let balances = yield _this2.privatePostGetAccounts();
            let result = { 'info': balances };
            for (let i = 0; i < balances.length; i++) {
                let balance = balances[i];
                let currencyCode = balance['CurrencyCode'];
                let uppercase = currencyCode.toUpperCase();
                let currency = _this2.commonCurrencyCode(uppercase);
                let account = _this2.account();
                account['free'] = balance['AvailableBalance'];
                account['total'] = balance['TotalBalance'];
                account['used'] = account['total'] - account['free'];
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetOrderBook(_this3.extend({
                'primaryCurrencyCode': market['baseId'],
                'secondaryCurrencyCode': market['quoteId']
            }, params));
            let timestamp = _this3.parse8601(response['CreatedTimestampUtc']);
            return _this3.parseOrderBook(response, timestamp, 'BuyOrders', 'SellOrders', 'Price', 'Volume');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.parse8601(ticker['CreatedTimestampUtc']);
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': ticker['DayHighestPrice'],
            'low': ticker['DayLowestPrice'],
            'bid': ticker['CurrentHighestBidPrice'],
            'ask': ticker['CurrentLowestOfferPrice'],
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': ticker['LastPrice'],
            'change': undefined,
            'percentage': undefined,
            'average': ticker['DayAvgPrice'],
            'baseVolume': ticker['DayVolumeXbtInSecondaryCurrrency'],
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetMarketSummary(_this4.extend({
                'primaryCurrencyCode': market['baseId'],
                'secondaryCurrencyCode': market['quoteId']
            }, params));
            return _this4.parseTicker(response, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = this.parse8601(trade['TradeTimestampUtc']);
        return {
            'id': undefined,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'order': undefined,
            'type': undefined,
            'side': undefined,
            'price': trade['SecondaryCurrencyTradePrice'],
            'amount': trade['PrimaryCurrencyAmount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetRecentTrades(_this5.extend({
                'primaryCurrencyCode': market['baseId'],
                'secondaryCurrencyCode': market['quoteId'],
                'numberOfRecentTradesToRetrieve': 50 // max = 50
            }, params));
            return _this5.parseTrades(response['Trades'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let capitalizedOrderType = _this6.capitalize(type);
            let method = 'Place' + capitalizedOrderType + 'Order';
            let orderType = capitalizedOrderType;
            orderType += side == 'sell' ? 'Offer' : 'Bid';
            let order = _this6.ordered({
                'primaryCurrencyCode': market['baseId'],
                'secondaryCurrencyCode': market['quoteId'],
                'orderType': orderType
            });
            if (type == 'limit') order['price'] = price;
            order['volume'] = amount;
            let response = yield _this6[method](_this6.extend(order, params));
            return {
                'info': response,
                'id': response['OrderGuid']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            return yield _this7.privatePostCancelOrder({ 'orderGuid': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api] + '/' + path;
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let auth = [url, 'apiKey=' + this.apiKey, 'nonce=' + nonce.toString()];
            let keysorted = this.keysort(params);
            let keys = Object.keys(keysorted);
            for (let i = 0; i < keys.length; i++) {
                let key = keys[i];
                auth.push(key + '=' + params[key]);
            }
            let message = auth.join(',');
            let signature = this.hmac(this.encode(message), this.encode(this.secret));
            let query = this.keysort(this.extend({
                'apiKey': this.apiKey,
                'nonce': nonce,
                'signature': signature
            }, params));
            body = this.json(query);
            headers = { 'Content-Type': 'application/json' };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            // todo error handling
            return response;
        })();
    }
};
},{"./base/Exchange":8}],68:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class itbit extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'itbit',
            'name': 'itBit',
            'countries': 'US',
            'rateLimit': 2000,
            'version': 'v1',
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg',
                'api': 'https://api.itbit.com',
                'www': 'https://www.itbit.com',
                'doc': ['https://api.itbit.com/docs', 'https://www.itbit.com/api']
            },
            'api': {
                'public': {
                    'get': ['markets/{symbol}/ticker', 'markets/{symbol}/order_book', 'markets/{symbol}/trades']
                },
                'private': {
                    'get': ['wallets', 'wallets/{walletId}', 'wallets/{walletId}/balances/{currencyCode}', 'wallets/{walletId}/funding_history', 'wallets/{walletId}/trades', 'wallets/{walletId}/orders/{id}'],
                    'post': ['wallet_transfers', 'wallets', 'wallets/{walletId}/cryptocurrency_deposits', 'wallets/{walletId}/cryptocurrency_withdrawals', 'wallets/{walletId}/orders', 'wire_withdrawal'],
                    'delete': ['wallets/{walletId}/orders/{id}']
                }
            },
            'markets': {
                'BTC/USD': { 'id': 'XBTUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
                'BTC/SGD': { 'id': 'XBTSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
                'BTC/EUR': { 'id': 'XBTEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
            },
            'fees': {
                'trading': {
                    'maker': 0,
                    'taker': 0.2 / 100
                }
            }
        });
    }

    fetchOrderBook(symbol, params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this.publicGetMarketsSymbolOrderBook(_this.extend({
                'symbol': _this.marketId(symbol)
            }, params));
            return _this.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let ticker = yield _this2.publicGetMarketsSymbolTicker(_this2.extend({
                'symbol': _this2.marketId(symbol)
            }, params));
            let serverTimeUTC = 'serverTimeUTC' in ticker;
            if (!serverTimeUTC) throw new ExchangeError(_this2.id + ' fetchTicker returned a bad response: ' + _this2.json(ticker));
            let timestamp = _this2.parse8601(ticker['serverTimeUTC']);
            let vwap = parseFloat(ticker['vwap24h']);
            let baseVolume = parseFloat(ticker['volume24h']);
            let quoteVolume = baseVolume * vwap;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this2.iso8601(timestamp),
                'high': parseFloat(ticker['high24h']),
                'low': parseFloat(ticker['low24h']),
                'bid': _this2.safeFloat(ticker, 'bid'),
                'ask': _this2.safeFloat(ticker, 'ask'),
                'vwap': vwap,
                'open': parseFloat(ticker['openToday']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['lastPrice']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = this.parse8601(trade['timestamp']);
        let id = trade['matchNumber'].toString();
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': id,
            'order': id,
            'type': undefined,
            'side': undefined,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetMarketsSymbolTrades(_this3.extend({
                'symbol': market['id']
            }, params));
            return _this3.parseTrades(response['recentTrades'], market, since, limit);
        })();
    }

    fetchBalance(params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this4.privateGetBalances();
            let balances = response['balances'];
            let result = { 'info': response };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let account = {
                    'free': parseFloat(balance['availableBalance']),
                    'used': 0.0,
                    'total': parseFloat(balance['totalBalance'])
                };
                account['used'] = account['total'] - account['free'];
                result[currency] = account;
            }
            return _this4.parseBalance(result);
        })();
    }

    fetchWallets() {
        return this.privateGetWallets();
    }

    nonce() {
        return this.milliseconds();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            if (type == 'market') throw new ExchangeError(_this5.id + ' allows limit orders only');
            let walletIdInParams = 'walletId' in params;
            if (!walletIdInParams) throw new ExchangeError(_this5.id + ' createOrder requires a walletId parameter');
            amount = amount.toString();
            price = price.toString();
            let market = _this5.market(symbol);
            let order = {
                'side': side,
                'type': type,
                'currency': market['base'],
                'amount': amount,
                'display': amount,
                'price': price,
                'instrument': market['id']
            };
            let response = yield _this5.privatePostTradeAdd(_this5.extend(order, params));
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let walletIdInParams = 'walletId' in params;
            if (!walletIdInParams) throw new ExchangeError(_this6.id + ' cancelOrder requires a walletId parameter');
            return yield _this6.privateDeleteWalletsWalletIdOrdersId(_this6.extend({
                'id': id
            }, params));
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            if (Object.keys(query).length) body = this.json(query);else body = '';
            let nonce = this.nonce().toString();
            let timestamp = nonce;
            let auth = [method, url, body, nonce, timestamp];
            let message = nonce + this.json(auth);
            let hash = this.hash(this.encode(message), 'sha256', 'binary');
            let binhash = this.binaryConcat(url, hash);
            let signature = this.hmac(binhash, this.encode(this.secret), 'sha512', 'base64');
            headers = {
                'Authorization': self.apiKey + ':' + signature,
                'Content-Type': 'application/json',
                'X-Auth-Timestamp': timestamp,
                'X-Auth-Nonce': nonce
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.fetch2(path, api, method, params, headers, body);
            if ('code' in response) throw new ExchangeError(_this7.id + ' ' + _this7.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],69:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const btcbox = require('./btcbox.js');

// ---------------------------------------------------------------------------

module.exports = class jubi extends btcbox {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'jubi',
            'name': 'jubi.com',
            'countries': 'CN',
            'rateLimit': 1500,
            'version': 'v1',
            'hasCORS': false,
            'hasFetchTickers': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766581-9d397d9a-5edd-11e7-8fb9-5d8236c0e692.jpg',
                'api': 'https://www.jubi.com/api',
                'www': 'https://www.jubi.com',
                'doc': 'https://www.jubi.com/help/api.html'
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetAllticker();
            let keys = Object.keys(markets);
            let result = [];
            for (let p = 0; p < keys.length; p++) {
                let id = keys[p];
                let base = id.toUpperCase();
                let quote = 'CNY'; // todo
                let symbol = base + '/' + quote;
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': id
                });
            }
            return result;
        })();
    }
};
},{"./btcbox.js":30}],70:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeNotAvailable, ExchangeError, OrderNotFound, DDoSProtection, InvalidNonce, InsufficientFunds, CancelPending, InvalidOrder } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class kraken extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'kraken',
            'name': 'Kraken',
            'countries': 'US',
            'version': '0',
            'rateLimit': 3000,
            'hasCORS': false,
            // obsolete metainfo interface
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'hasFetchOrder': true,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'hasFetchMyTrades': true,
            'hasWithdraw': true,
            'hasFetchCurrencies': true,
            // new metainfo interface
            'has': {
                'fetchCurrencies': true,
                'fetchTickers': true,
                'fetchOHLCV': true,
                'fetchOrder': true,
                'fetchOpenOrders': true,
                'fetchClosedOrders': true,
                'fetchMyTrades': true,
                'withdraw': true
            },
            'marketsByAltname': {},
            'timeframes': {
                '1m': '1',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '4h': '240',
                '1d': '1440',
                '1w': '10080',
                '2w': '21600'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766599-22709304-5ede-11e7-9de1-9f33732e1509.jpg',
                'api': 'https://api.kraken.com',
                'www': 'https://www.kraken.com',
                'doc': ['https://www.kraken.com/en-us/help/api', 'https://github.com/nothingisdead/npm-kraken-api'],
                'fees': ['https://www.kraken.com/en-us/help/fees', 'https://support.kraken.com/hc/en-us/articles/201396777-What-are-the-deposit-fees-', 'https://support.kraken.com/hc/en-us/articles/201893608-What-are-the-withdrawal-fees-']
            },
            'fees': {
                'trading': {
                    'tierBased': true,
                    'percentage': true,
                    'taker': 0.26 / 100,
                    'maker': 0.16 / 100,
                    'tiers': {
                        'taker': [[0, 0.26 / 100], [50000, 0.24 / 100], [100000, 0.22 / 100], [250000, 0.2 / 100], [500000, 0.18 / 100], [1000000, 0.16 / 100], [2500000, 0.14 / 100], [5000000, 0.12 / 100], [10000000, 0.1 / 100]],
                        'maker': [[0, 0.16 / 100], [50000, 0.14 / 100], [100000, 0.12 / 100], [250000, 0.10 / 100], [500000, 0.8 / 100], [1000000, 0.6 / 100], [2500000, 0.4 / 100], [5000000, 0.2 / 100], [10000000, 0.0 / 100]]
                    }
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BTC': 0.001,
                        'ETH': 0.005,
                        'XRP': 0.02,
                        'XLM': 0.00002,
                        'LTC': 0.02,
                        'DOGE': 2,
                        'ZEC': 0.00010,
                        'ICN': 0.02,
                        'REP': 0.01,
                        'ETC': 0.005,
                        'MLN': 0.003,
                        'XMR': 0.05,
                        'DASH': 0.005,
                        'GNO': 0.01,
                        'EOS': 0.5,
                        'BCH': 0.001,
                        'USD': 5, // if domestic wire
                        'EUR': 5, // if domestic wire
                        'CAD': 10, // CAD EFT Withdrawal
                        'JPY': 300 // if domestic wire
                    },
                    'deposit': {
                        'BTC': 0,
                        'ETH': 0,
                        'XRP': 0,
                        'XLM': 0,
                        'LTC': 0,
                        'DOGE': 0,
                        'ZEC': 0,
                        'ICN': 0,
                        'REP': 0,
                        'ETC': 0,
                        'MLN': 0,
                        'XMR': 0,
                        'DASH': 0,
                        'GNO': 0,
                        'EOS': 0,
                        'BCH': 0,
                        'USD': 5, // if domestic wire
                        'EUR': 0, // free deposit if EUR SEPA Deposit
                        'CAD': 5, // if domestic wire
                        'JPY': 0 // Domestic Deposit (Free, ¥5,000 deposit minimum)
                    }
                }
            },
            'api': {
                'public': {
                    'get': ['Assets', 'AssetPairs', 'Depth', 'OHLC', 'Spread', 'Ticker', 'Time', 'Trades']
                },
                'private': {
                    'post': ['AddOrder', 'Balance', 'CancelOrder', 'ClosedOrders', 'DepositAddresses', 'DepositMethods', 'DepositStatus', 'Ledgers', 'OpenOrders', 'OpenPositions', 'QueryLedgers', 'QueryOrders', 'QueryTrades', 'TradeBalance', 'TradesHistory', 'TradeVolume', 'Withdraw', 'WithdrawCancel', 'WithdrawInfo', 'WithdrawStatus']
                }
            }
        });
    }

    costToPrecision(symbol, cost) {
        return this.truncate(parseFloat(cost), this.markets[symbol]['precision']['price']);
    }

    feeToPrecision(symbol, fee) {
        return this.truncate(parseFloat(fee), this.markets[symbol]['precision']['amount']);
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (body.indexOf('Invalid nonce') >= 0) throw new InvalidNonce(this.id + ' ' + body);
        if (body.indexOf('Insufficient funds') >= 0) throw new InsufficientFunds(this.id + ' ' + body);
        if (body.indexOf('Cancel pending') >= 0) throw new CancelPending(this.id + ' ' + body);
        if (body.indexOf('Invalid arguments:volume') >= 0) throw new InvalidOrder(this.id + ' ' + body);
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetAssetPairs();
            let keys = Object.keys(markets['result']);
            let result = [];
            for (let i = 0; i < keys.length; i++) {
                let id = keys[i];
                let market = markets['result'][id];
                let base = market['base'];
                let quote = market['quote'];
                if (base[0] == 'X' || base[0] == 'Z') base = base.slice(1);
                if (quote[0] == 'X' || quote[0] == 'Z') quote = quote.slice(1);
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let darkpool = id.indexOf('.d') >= 0;
                let symbol = darkpool ? market['altname'] : base + '/' + quote;
                let maker = undefined;
                if ('fees_maker' in market) {
                    maker = parseFloat(market['fees_maker'][0][1]) / 100;
                }
                let precision = {
                    'amount': market['lot_decimals'],
                    'price': market['pair_decimals']
                };
                let lot = Math.pow(10, -precision['amount']);
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'darkpool': darkpool,
                    'info': market,
                    'altname': market['altname'],
                    'maker': maker,
                    'taker': parseFloat(market['fees'][0][1]) / 100,
                    'lot': lot,
                    'active': true,
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': lot,
                            'max': Math.pow(10, precision['amount'])
                        },
                        'price': {
                            'min': Math.pow(10, -precision['price']),
                            'max': undefined
                        },
                        'cost': {
                            'min': 0,
                            'max': undefined
                        }
                    }
                });
            }
            result = _this.appendInactiveMarkets(result);
            _this.marketsByAltname = _this.indexBy(result, 'altname');
            return result;
        })();
    }

    appendInactiveMarkets(result = []) {
        let precision = { 'amount': 8, 'price': 8 };
        let costLimits = { 'min': 0, 'max': undefined };
        let priceLimits = { 'min': Math.pow(10, -precision['price']), 'max': undefined };
        let amountLimits = { 'min': Math.pow(10, -precision['amount']), 'max': Math.pow(10, precision['amount']) };
        let limits = { 'amount': amountLimits, 'price': priceLimits, 'cost': costLimits };
        let defaults = {
            'darkpool': false,
            'info': undefined,
            'maker': undefined,
            'taker': undefined,
            'lot': amountLimits['min'],
            'active': false,
            'precision': precision,
            'limits': limits
        };
        let markets = [{ 'id': 'XXLMZEUR', 'symbol': 'XLM/EUR', 'base': 'XLM', 'quote': 'EUR', 'altname': 'XLMEUR' }];
        for (let i = 0; i < markets.length; i++) {
            result.push(this.extend(defaults, markets[i]));
        }
        return result;
    }

    fetchCurrencies(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this2.publicGetAssets(params);
            let currencies = response['result'];
            let ids = Object.keys(currencies);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let currency = currencies[id];
                // todo: will need to rethink the fees
                // to add support for multiple withdrawal/deposit methods and
                // differentiated fees for each particular method
                let code = _this2.commonCurrencyCode(currency['altname']);
                let precision = currency['decimals'];
                result[code] = {
                    'id': id,
                    'code': code,
                    'info': currency,
                    'name': code,
                    'active': true,
                    'status': 'ok',
                    'fee': undefined,
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'price': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        },
                        'withdraw': {
                            'min': undefined,
                            'max': Math.pow(10, precision)
                        }
                    }
                };
            }
            return result;
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let darkpool = symbol.indexOf('.d') >= 0;
            if (darkpool) throw new ExchangeError(_this3.id + ' does not provide an order book for darkpool symbol ' + symbol);
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetDepth(_this3.extend({
                'pair': market['id']
            }, params));
            let orderbook = response['result'][market['id']];
            return _this3.parseOrderBook(orderbook);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let baseVolume = parseFloat(ticker['v'][1]);
        let vwap = parseFloat(ticker['p'][1]);
        let quoteVolume = baseVolume * vwap;
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['h'][1]),
            'low': parseFloat(ticker['l'][1]),
            'bid': parseFloat(ticker['b'][0]),
            'ask': parseFloat(ticker['a'][0]),
            'vwap': vwap,
            'open': parseFloat(ticker['o']),
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['c'][0]),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let pairs = [];
            for (let s = 0; s < _this4.symbols.length; s++) {
                let symbol = _this4.symbols[s];
                let market = _this4.markets[symbol];
                if (market['active']) if (!market['darkpool']) pairs.push(market['id']);
            }
            let filter = pairs.join(',');
            let response = yield _this4.publicGetTicker(_this4.extend({
                'pair': filter
            }, params));
            let tickers = response['result'];
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = _this4.markets_by_id[id];
                let symbol = market['symbol'];
                let ticker = tickers[id];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let darkpool = symbol.indexOf('.d') >= 0;
            if (darkpool) throw new ExchangeError(_this5.id + ' does not provide a ticker for darkpool symbol ' + symbol);
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetTicker(_this5.extend({
                'pair': market['id']
            }, params));
            let ticker = response['result'][market['id']];
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [ohlcv[0] * 1000, parseFloat(ohlcv[1]), parseFloat(ohlcv[2]), parseFloat(ohlcv[3]), parseFloat(ohlcv[4]), parseFloat(ohlcv[6])];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let request = {
                'pair': market['id'],
                'interval': _this6.timeframes[timeframe]
            };
            if (since) request['since'] = parseInt(since / 1000);
            let response = yield _this6.publicGetOHLC(_this6.extend(request, params));
            let ohlcvs = response['result'][market['id']];
            return _this6.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = undefined;
        let side = undefined;
        let type = undefined;
        let price = undefined;
        let amount = undefined;
        let id = undefined;
        let order = undefined;
        let fee = undefined;
        if (!market) market = this.findMarketByAltnameOrId(trade['pair']);
        if ('ordertxid' in trade) {
            order = trade['ordertxid'];
            id = trade['id'];
            timestamp = parseInt(trade['time'] * 1000);
            side = trade['type'];
            type = trade['ordertype'];
            price = parseFloat(trade['price']);
            amount = parseFloat(trade['vol']);
            if ('fee' in trade) {
                let currency = undefined;
                if (market) currency = market['quote'];
                fee = {
                    'cost': parseFloat(trade['fee']),
                    'currency': currency
                };
            }
        } else {
            timestamp = parseInt(trade[2] * 1000);
            side = trade[3] == 's' ? 'sell' : 'buy';
            type = trade[4] == 'l' ? 'limit' : 'market';
            price = parseFloat(trade[0]);
            amount = parseFloat(trade[1]);
        }
        let symbol = market ? market['symbol'] : undefined;
        return {
            'id': id,
            'order': order,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': price,
            'amount': amount,
            'fee': fee
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let id = market['id'];
            let response = yield _this7.publicGetTrades(_this7.extend({
                'pair': id
            }, params));
            let trades = response['result'][id];
            return _this7.parseTrades(trades, market, since, limit);
        })();
    }

    fetchBalance(params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let response = yield _this8.privatePostBalance();
            let balances = response['result'];
            let result = { 'info': balances };
            let currencies = Object.keys(balances);
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                let code = currency;
                // X-ISO4217-A3 standard currency codes
                if (code[0] == 'X') {
                    code = code.slice(1);
                } else if (code[0] == 'Z') {
                    code = code.slice(1);
                }
                code = _this8.commonCurrencyCode(code);
                let balance = parseFloat(balances[currency]);
                let account = {
                    'free': balance,
                    'used': 0.0,
                    'total': balance
                };
                result[code] = account;
            }
            return _this8.parseBalance(result);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let market = _this9.market(symbol);
            let order = {
                'pair': market['id'],
                'type': side,
                'ordertype': type,
                'volume': _this9.amountToPrecision(symbol, amount)
            };
            if (type == 'limit') order['price'] = _this9.priceToPrecision(symbol, price);
            let response = yield _this9.privatePostAddOrder(_this9.extend(order, params));
            let length = response['result']['txid'].length;
            let id = length > 1 ? response['result']['txid'] : response['result']['txid'][0];
            return {
                'info': response,
                'id': id
            };
        })();
    }

    findMarketByAltnameOrId(id) {
        let result = undefined;
        if (id in this.marketsByAltname) {
            result = this.marketsByAltname[id];
        } else if (id in this.markets_by_id) {
            result = this.markets_by_id[id];
        }
        return result;
    }

    parseOrder(order, market = undefined) {
        let description = order['descr'];
        let side = description['type'];
        let type = description['ordertype'];
        let symbol = undefined;
        if (!market) market = this.findMarketByAltnameOrId(description['pair']);
        let timestamp = parseInt(order['opentm'] * 1000);
        let amount = parseFloat(order['vol']);
        let filled = parseFloat(order['vol_exec']);
        let remaining = amount - filled;
        let fee = undefined;
        let cost = this.safeFloat(order, 'cost');
        let price = this.safeFloat(description, 'price');
        if (!price) price = this.safeFloat(order, 'price');
        if (market) {
            symbol = market['symbol'];
            if ('fee' in order) {
                let flags = order['oflags'];
                let feeCost = this.safeFloat(order, 'fee');
                fee = {
                    'cost': feeCost,
                    'rate': undefined
                };
                if (flags.indexOf('fciq') >= 0) {
                    fee['currency'] = market['quote'];
                } else if (flags.indexOf('fcib') >= 0) {
                    fee['currency'] = market['base'];
                }
            }
        }
        return {
            'id': order['id'],
            'info': order,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'status': order['status'],
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': price,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'fee': fee
            // 'trades': this.parseTrades (order['trades'], market),
        };
    }

    parseOrders(orders, market = undefined, since = undefined, limit = undefined) {
        let result = [];
        let ids = Object.keys(orders);
        for (let i = 0; i < ids.length; i++) {
            let id = ids[i];
            let order = this.extend({ 'id': id }, orders[id]);
            result.push(this.parseOrder(order, market));
        }
        return this.filterBySinceLimit(result, since, limit);
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let response = yield _this10.privatePostQueryOrders(_this10.extend({
                'trades': true, // whether or not to include trades in output (optional, default false)
                'txid': id // comma delimited list of transaction ids to query info about (20 maximum)
                // 'userref': 'optional', // restrict results to given user reference id (optional)
            }, params));
            let orders = response['result'];
            let order = _this10.parseOrder(_this10.extend({ 'id': id }, orders[id]));
            return _this10.extend({ 'info': response }, order);
        })();
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            let request = {
                // 'type': 'all', // any position, closed position, closing position, no position
                // 'trades': false, // whether or not to include trades related to position in output
                // 'start': 1234567890, // starting unix timestamp or trade tx id of results (exclusive)
                // 'end': 1234567890, // ending unix timestamp or trade tx id of results (inclusive)
                // 'ofs' = result offset
            };
            if (since) request['start'] = parseInt(since / 1000);
            let response = yield _this11.privatePostTradesHistory(_this11.extend(request, params));
            let trades = response['result']['trades'];
            let ids = Object.keys(trades);
            for (let i = 0; i < ids.length; i++) {
                trades[ids[i]]['id'] = ids[i];
            }
            return _this11.parseTrades(trades, undefined, since, limit);
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            yield _this12.loadMarkets();
            let response = undefined;
            try {
                response = yield _this12.privatePostCancelOrder(_this12.extend({
                    'txid': id
                }, params));
            } catch (e) {
                if (_this12.last_http_response) if (_this12.last_http_response.indexOf('EOrder:Unknown order') >= 0) throw new OrderNotFound(_this12.id + ' cancelOrder() error ' + _this12.last_http_response);
                throw e;
            }
            return response;
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            yield _this13.loadMarkets();
            let request = {};
            if (since) request['start'] = parseInt(since / 1000);
            let response = yield _this13.privatePostOpenOrders(_this13.extend(request, params));
            let orders = _this13.parseOrders(response['result']['open'], undefined, since, limit);
            return _this13.filterOrdersBySymbol(orders, symbol);
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            yield _this14.loadMarkets();
            let request = {};
            if (since) request['start'] = parseInt(since / 1000);
            let response = yield _this14.privatePostClosedOrders(_this14.extend(request, params));
            let orders = _this14.parseOrders(response['result']['closed'], undefined, since, limit);
            return _this14.filterOrdersBySymbol(orders, symbol);
        })();
    }

    fetchDepositMethods(code = undefined, params = {}) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            yield _this15.loadMarkets();
            let request = {};
            if (code) {
                let currency = _this15.currency(code);
                request['asset'] = currency['id'];
            }
            let response = yield _this15.privatePostDepositMethods(_this15.extend(request, params));
            return response['result'];
        })();
    }

    createDepositAddress(currency, params = {}) {
        var _this16 = this;

        return _asyncToGenerator(function* () {
            let request = {
                'new': 'true'
            };
            let response = yield _this16.fetchDepositAddress(currency, _this16.extend(request, params));
            return {
                'currency': currency,
                'address': response['address'],
                'status': 'ok',
                'info': response
            };
        })();
    }

    fetchDepositAddress(code, params = {}) {
        var _this17 = this;

        return _asyncToGenerator(function* () {
            let method = _this17.safeValue(params, 'method');
            if (!method) throw new ExchangeError(_this17.id + ' fetchDepositAddress() requires an extra `method` parameter');
            yield _this17.loadMarkets();
            let currency = _this17.currency(code);
            let request = {
                'asset': currency['id'],
                'method': method,
                'new': 'false'
            };
            let response = yield _this17.privatePostDepositAddresses(_this17.extend(request, params));
            let result = response['result'];
            let numResults = result.length;
            if (numResults < 1) throw new ExchangeError(_this17.id + ' privatePostDepositAddresses() returned no addresses');
            let address = _this17.safeString(result[0], 'address');
            return {
                'currency': code,
                'address': address,
                'status': 'ok',
                'info': response
            };
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this18 = this;

        return _asyncToGenerator(function* () {
            if ('key' in params) {
                yield _this18.loadMarkets();
                let response = yield _this18.privatePostWithdraw(_this18.extend({
                    'asset': currency,
                    'amount': amount
                    // 'address': address, // they don't allow withdrawals to direct addresses
                }, params));
                return {
                    'info': response,
                    'id': response['result']
                };
            }
            throw new ExchangeError(_this18.id + " withdraw requires a 'key' parameter (withdrawal key name, as set up on your account)");
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = '/' + this.version + '/' + api + '/' + path;
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            body = this.urlencode(this.extend({ 'nonce': nonce }, params));
            let auth = this.encode(nonce + body);
            let hash = this.hash(auth, 'sha256', 'binary');
            let binary = this.stringToBinary(this.encode(url));
            let binhash = this.binaryConcat(binary, hash);
            let secret = this.base64ToBinary(this.secret);
            let signature = this.hmac(binhash, secret, 'sha512', 'base64');
            headers = {
                'API-Key': this.apiKey,
                'API-Sign': this.decode(signature),
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        url = this.urls['api'] + url;
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    nonce() {
        return this.milliseconds();
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this19 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this19.fetch2(path, api, method, params, headers, body);
            if ('error' in response) {
                let numErrors = response['error'].length;
                if (numErrors) {
                    for (let i = 0; i < response['error'].length; i++) {
                        if (response['error'][i] == 'EService:Unavailable') throw new ExchangeNotAvailable(_this19.id + ' ' + _this19.json(response));
                        if (response['error'][i] == 'EService:Busy') throw new DDoSProtection(_this19.id + ' ' + _this19.json(response));
                    }
                    throw new ExchangeError(_this19.id + ' ' + _this19.json(response));
                }
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],71:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, InvalidNonce, AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class kucoin extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'kucoin',
            'name': 'Kucoin',
            'countries': 'HK', // Hong Kong
            'version': 'v1',
            'rateLimit': 2000,
            'hasCORS': false,
            'userAgent': this.userAgents['chrome'],
            // obsolete metainfo interface
            'hasFetchTickers': true,
            'hasFetchOHLCV': false, // see the method implementation below
            'hasFetchOrder': true,
            'hasFetchOrders': true,
            'hasFetchClosedOrders': true,
            'hasFetchOpenOrders': true,
            'hasFetchMyTrades': false,
            'hasFetchCurrencies': true,
            'hasWithdraw': true,
            // new metainfo interface
            'has': {
                'fetchTickers': true,
                'fetchOHLCV': true, // see the method implementation below
                'fetchOrder': true,
                'fetchOrders': true,
                'fetchClosedOrders': true,
                'fetchOpenOrders': true,
                'fetchMyTrades': false,
                'fetchCurrencies': true,
                'withdraw': true
            },
            'timeframes': {
                '1m': '1',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '8h': '480',
                '1d': 'D',
                '1w': 'W'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/33795655-b3c46e48-dcf6-11e7-8abe-dc4588ba7901.jpg',
                'api': 'https://api.kucoin.com',
                'www': 'https://kucoin.com',
                'doc': 'https://kucoinapidocs.docs.apiary.io',
                'fees': 'https://news.kucoin.com/en/fee'
            },
            'api': {
                'public': {
                    'get': ['open/chart/config', 'open/chart/history', 'open/chart/symbol', 'open/currencies', 'open/deal-orders', 'open/kline', 'open/lang-list', 'open/orders', 'open/orders-buy', 'open/orders-sell', 'open/tick', 'market/open/coin-info', 'market/open/coins', 'market/open/coins-trending', 'market/open/symbols']
                },
                'private': {
                    'get': ['account/balance', 'account/{coin}/wallet/address', 'account/{coin}/wallet/records', 'account/{coin}/balance', 'account/promotion/info', 'account/promotion/sum', 'deal-orders', 'order/active', 'order/active-map', 'order/dealt', 'referrer/descendant/count', 'user/info'],
                    'post': ['account/{coin}/withdraw/apply', 'account/{coin}/withdraw/cancel', 'cancel-order', 'order', 'user/change-lang']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.0010,
                    'taker': 0.0010
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.publicGetMarketOpenSymbols();
            let markets = response['data'];
            let result = [];
            for (let i = 0; i < markets.length; i++) {
                let market = markets[i];
                let id = market['symbol'];
                let base = market['coinType'];
                let quote = market['coinTypePair'];
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                let precision = {
                    'amount': 8,
                    'price': 8
                };
                let active = market['trading'];
                result.push(_this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'active': active,
                    'info': market,
                    'lot': Math.pow(10, -precision['amount']),
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': Math.pow(10, -precision['amount']),
                            'max': undefined
                        },
                        'price': {
                            'min': undefined,
                            'max': undefined
                        }
                    }
                }));
            }
            return result;
        })();
    }

    fetchCurrencies(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this2.publicGetMarketOpenCoins(params);
            let currencies = response['data'];
            let result = {};
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let id = currency['coin'];
                // todo: will need to rethink the fees
                // to add support for multiple withdrawal/deposit methods and
                // differentiated fees for each particular method
                let code = _this2.commonCurrencyCode(id);
                let precision = currency['tradePrecision'];
                let deposit = currency['enableDeposit'];
                let withdraw = currency['enableWithdraw'];
                let active = deposit && withdraw;
                result[code] = {
                    'id': id,
                    'code': code,
                    'info': currency,
                    'name': currency['name'],
                    'active': active,
                    'status': 'ok',
                    'fee': currency['withdrawFeeRate'], // todo: redesign
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'price': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        },
                        'withdraw': {
                            'min': currency['withdrawMinAmount'],
                            'max': Math.pow(10, precision)
                        }
                    }
                };
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let response = yield _this3.privateGetAccountBalance(_this3.extend({
                'limit': 20, // default 12, max 20
                'page': 1
            }, params));
            let balances = response['data'];
            let result = { 'info': balances };
            let indexed = _this3.indexBy(balances, 'coinType');
            let keys = Object.keys(indexed);
            for (let i = 0; i < keys.length; i++) {
                let id = keys[i];
                let currency = _this3.commonCurrencyCode(id);
                let account = _this3.account();
                let balance = indexed[id];
                let total = parseFloat(balance['balance']);
                let used = parseFloat(balance['freezeBalance']);
                let free = total - used;
                account['free'] = free;
                account['used'] = used;
                account['total'] = total;
                result[currency] = account;
            }
            return _this3.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetOpenOrders(_this4.extend({
                'symbol': market['id']
            }, params));
            let orderbook = response['data'];
            return _this4.parseOrderBook(orderbook, undefined, 'BUY', 'SELL');
        })();
    }

    parseOrder(order, market = undefined) {
        let symbol = undefined;
        if (market) {
            symbol = market['symbol'];
        } else {
            symbol = order['coinType'] + '/' + order['coinTypePair'];
        }
        let timestamp = order['createdAt'];
        let price = this.safeFloat(order, 'price');
        let amount = this.safeFloat(order, 'amount');
        let filled = this.safeFloat(order, 'dealAmount');
        let remaining = this.safeFloat(order, 'pendingAmount');
        let side = order['type'].toLowerCase();
        let result = {
            'info': order,
            'id': this.safeString(order, 'oid'),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': 'limit',
            'side': side,
            'price': price,
            'amount': amount,
            'cost': price * filled,
            'filled': filled,
            'remaining': remaining,
            'status': undefined,
            'fee': this.safeFloat(order, 'fee')
        };
        return result;
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this5.id + ' fetchOpenOrders requires a symbol param');
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let request = {
                'symbol': market['id']
            };
            let response = yield _this5.privateGetOrderActiveMap(_this5.extend(request, params));
            let orders = _this5.arrayConcat(response['data']['SELL'], response['data']['BUY']);
            return _this5.parseOrders(orders, market, since, limit);
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            let request = {};
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            if (symbol) {
                request['symbol'] = market['id'];
            }
            if (since) {
                request['since'] = since;
            }
            if (limit) {
                request['limit'] = limit;
            }
            let response = yield _this6.privateGetOrderDealt(_this6.extend(request, params));
            return _this6.parseOrders(response['data']['datas'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            if (type != 'limit') throw new ExchangeError(_this7.id + ' allows limit orders only');
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let order = {
                'symbol': market['id'],
                'type': side.toUpperCase(),
                'price': _this7.priceToPrecision(symbol, price),
                'amount': _this7.amountToPrecision(symbol, amount)
            };
            let response = yield _this7.privatePostOrder(_this7.extend(order, params));
            return {
                'info': response,
                'id': _this7.safeString(response['data'], 'orderOid')
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this8.id + ' cancelOrder requires symbol argument');
            yield _this8.loadMarkets();
            let market = _this8.market(symbol);
            let request = {
                'symbol': market['id'],
                'orderOid': id
            };
            if ('type' in params) {
                request['type'] = params['type'].toUpperCase();
            } else {
                throw new ExchangeError(_this8.id + ' cancelOrder requires type (BUY or SELL) param');
            }
            let response = yield _this8.privatePostCancelOrder(_this8.extend(request, params));
            return response;
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['datetime'];
        let symbol = undefined;
        if (market) {
            symbol = market['symbol'];
        } else {
            symbol = ticker['coinType'] + '/' + ticker['coinTypePair'];
        }
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'high'),
            'low': this.safeFloat(ticker, 'low'),
            'bid': this.safeFloat(ticker, 'buy'),
            'ask': this.safeFloat(ticker, 'sell'),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': this.safeFloat(ticker, 'lastDealPrice'),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'vol'),
            'quoteVolume': this.safeFloat(ticker, 'volValue'),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.publicGetMarketOpenSymbols(params);
            let tickers = response['data'];
            let result = {};
            for (let t = 0; t < tickers.length; t++) {
                let ticker = _this9.parseTicker(tickers[t]);
                let symbol = ticker['symbol'];
                result[symbol] = ticker;
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let market = _this10.market(symbol);
            let response = yield _this10.publicGetOpenTick(_this10.extend({
                'symbol': market['id']
            }, params));
            let ticker = response['data'];
            return _this10.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = trade[0];
        let side = undefined;
        if (trade[1] == 'BUY') {
            side = 'buy';
        } else if (trade[1] == 'SELL') {
            side = 'sell';
        }
        return {
            'id': undefined,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': 'limit',
            'side': side,
            'price': trade[2],
            'amount': trade[3]
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            let market = _this11.market(symbol);
            let response = yield _this11.publicGetOpenDealOrders(_this11.extend({
                'symbol': market['id']
            }, params));
            return _this11.parseTrades(response['data'], market, since, limit);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {
        let timestamp = this.parse8601(ohlcv['T']);
        return [timestamp, ohlcv['O'], ohlcv['H'], ohlcv['L'], ohlcv['C'], ohlcv['V']];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            yield _this12.loadMarkets();
            let market = _this12.market(symbol);
            let to = _this12.seconds();
            let request = {
                'symbol': market['id'],
                'type': _this12.timeframes[timeframe],
                'from': to - 86400,
                'to': to
            };
            if (since) {
                request['from'] = parseInt(since / 1000);
            }
            // limit is not documented in api call, and not respected
            if (limit) {
                request['limit'] = limit;
            }
            let response = yield _this12.publicGetOpenChartHistory(_this12.extend(request, params));
            // we need buildOHLCV
            return _this12.parseOHLCVs(response['data'], market, timeframe, since, limit);
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let endpoint = '/' + this.version + '/' + this.implodeParams(path, params);
        let url = this.urls['api'] + endpoint;
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            // their nonce is always a calibrated synched milliseconds-timestamp
            let nonce = this.milliseconds();
            let queryString = '';
            nonce = nonce.toString();
            if (Object.keys(query).length) {
                queryString = this.rawencode(this.keysort(query));
                if (method == 'GET') {
                    url += '?' + queryString;
                } else {
                    body = queryString;
                }
            }
            let auth = endpoint + '/' + nonce + '/' + queryString;
            let payload = this.stringToBase64(this.encode(auth));
            // payload should be "encoded" as returned from stringToBase64
            let signature = this.hmac(payload, this.encode(this.secret), 'sha256');
            headers = {
                'KC-API-KEY': this.apiKey,
                'KC-API-NONCE': nonce,
                'KC-API-SIGNATURE': signature
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code >= 400) {
            if (body && body[0] == "{") {
                let response = JSON.parse(body);
                if ('success' in response) {
                    if (!response['success']) {
                        if ('code' in response) {
                            if (response['code'] == 'UNAUTH') {
                                let message = this.safeString(response, 'msg');
                                if (message == 'Invalid nonce') {
                                    throw new InvalidNonce(this.id + ' ' + message);
                                }
                                throw new AuthenticationError(this.id + ' ' + this.json(response));
                            }
                        }
                        throw new ExchangeError(this.id + ' ' + this.json(response));
                    }
                }
            } else {
                throw new ExchangeError(this.id + ' ' + code.toString() + ' ' + reason);
            }
        }
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this13.fetch2(path, api, method, params, headers, body);
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],72:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const acx = require('./acx.js');
const { ExchangeError, InsufficientFunds, OrderNotFound } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class kuna extends acx {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'kuna',
            'name': 'Kuna',
            'countries': 'UA',
            'rateLimit': 1000,
            'version': 'v2',
            'hasCORS': false,
            'hasFetchTickers': false,
            'hasFetchOHLCV': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/31697638-912824fa-b3c1-11e7-8c36-cf9606eb94ac.jpg',
                'api': 'https://kuna.io',
                'www': 'https://kuna.io',
                'doc': 'https://kuna.io/documents/api'
            },
            'api': {
                'public': {
                    'get': ['tickers/{market}', 'order_book', 'order_book/{market}', 'trades', 'trades/{market}', 'timestamp']
                },
                'private': {
                    'get': ['members/me', 'orders', 'trades/my'],
                    'post': ['orders', 'order/delete']
                }
            },
            'markets': {
                'BTC/UAH': { 'id': 'btcuah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH', 'precision': { 'amount': 6, 'price': 0 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 1, 'max': undefined } } },
                'ETH/UAH': { 'id': 'ethuah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH', 'precision': { 'amount': 6, 'price': 0 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 1, 'max': undefined } } },
                'GBG/UAH': { 'id': 'gbguah', 'symbol': 'GBG/UAH', 'base': 'GBG', 'quote': 'UAH', 'precision': { 'amount': 3, 'price': 2 }, 'lot': 0.001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 0.01, 'max': undefined } } }, // Golos Gold (GBG != GOLOS)
                'KUN/BTC': { 'id': 'kunbtc', 'symbol': 'KUN/BTC', 'base': 'KUN', 'quote': 'BTC', 'precision': { 'amount': 6, 'price': 6 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 0.000001, 'max': undefined } } },
                'BCH/BTC': { 'id': 'bchbtc', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'precision': { 'amount': 6, 'price': 6 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 0.000001, 'max': undefined } } },
                'WAVES/UAH': { 'id': 'wavesuah', 'symbol': 'WAVES/UAH', 'base': 'WAVES', 'quote': 'UAH', 'precision': { 'amount': 6, 'price': 0 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 1, 'max': undefined } } }
            },
            'fees': {
                'trading': {
                    'taker': 0.25 / 100,
                    'maker': 0.25 / 100
                }
            }
        });
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code == 400) {
            let data = JSON.parse(body);
            let error = data['error'];
            let errorCode = error['code'];
            if (errorCode == 2002) {
                throw new InsufficientFunds([this.id, method, url, code, reason, body].join(' '));
            } else if (errorCode == 2003) {
                throw new OrderNotFound([this.id, method, url, code, reason, body].join(' '));
            }
        }
    }

    fetchOrderBook(symbol, params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let market = _this.market(symbol);
            let orderBook = yield _this.publicGetOrderBook(_this.extend({
                'market': market['id']
            }, params));
            return _this.parseOrderBook(orderBook, undefined, 'bids', 'asks', 'price', 'remaining_volume');
        })();
    }

    fetchL3OrderBook(symbol, params) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            return _this2.fetchOrderBook(symbol, params);
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this3.id + ' fetchOpenOrders requires a symbol argument');
            let market = _this3.market(symbol);
            let orders = yield _this3.privateGetOrders(_this3.extend({
                'market': market['id']
            }, params));
            // todo emulation of fetchClosedOrders, fetchOrders, fetchOrder
            // with order cache + fetchOpenOrders
            // as in BTC-e, Liqui, Yobit, DSX, Tidex, WEX
            return _this3.parseOrders(orders, market, since, limit);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = this.parse8601(trade['created_at']);
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'id': trade['id'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': undefined,
            'side': undefined,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['volume']),
            'info': trade
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTrades(_this4.extend({
                'market': market['id']
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    parseMyTrade(trade, market) {
        let timestamp = this.parse8601(trade['created_at']);
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'id': trade['id'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'price': trade['price'],
            'amount': trade['volume'],
            'cost': trade['funds'],
            'symbol': symbol,
            'side': trade['side'],
            'order': trade['order_id']
        };
    }

    parseMyTrades(trades, market = undefined) {
        let parsedTrades = [];
        for (let i = 0; i < trades.length; i++) {
            let trade = trades[i];
            let parsedTrade = this.parseMyTrade(trade, market);
            parsedTrades.push(parsedTrade);
        }
        return parsedTrades;
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this5.id + ' fetchOpenOrders requires a symbol argument');
            let market = _this5.market(symbol);
            let response = yield _this5.privateGetTradesMy({ 'market': market['id'] });
            return _this5.parseMyTrades(response, market);
        })();
    }
};
},{"./acx.js":5,"./base/errors":10}],73:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class lakebtc extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'lakebtc',
            'name': 'LakeBTC',
            'countries': 'US',
            'version': 'api_v2',
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg',
                'api': 'https://api.lakebtc.com',
                'www': 'https://www.lakebtc.com',
                'doc': ['https://www.lakebtc.com/s/api_v2', 'https://www.lakebtc.com/s/api']
            },
            'api': {
                'public': {
                    'get': ['bcorderbook', 'bctrades', 'ticker']
                },
                'private': {
                    'post': ['buyOrder', 'cancelOrders', 'getAccountInfo', 'getExternalAccounts', 'getOrders', 'getTrades', 'openOrders', 'sellOrder']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.15 / 100,
                    'taker': 0.2 / 100
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetTicker();
            let result = [];
            let keys = Object.keys(markets);
            for (let k = 0; k < keys.length; k++) {
                let id = keys[k];
                let market = markets[id];
                let base = id.slice(0, 3);
                let quote = id.slice(3, 6);
                base = base.toUpperCase();
                quote = quote.toUpperCase();
                let symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostGetAccountInfo();
            let balances = response['balance'];
            let result = { 'info': response };
            let currencies = Object.keys(balances);
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                let balance = parseFloat(balances[currency]);
                let account = {
                    'free': balance,
                    'used': 0.0,
                    'total': balance
                };
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetBcorderbook(_this3.extend({
                'symbol': _this3.marketId(symbol)
            }, params));
            return _this3.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let tickers = yield _this4.publicGetTicker(_this4.extend({
                'symbol': market['id']
            }, params));
            let ticker = tickers[market['id']];
            let timestamp = _this4.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'high': _this4.safeFloat(ticker, 'high'),
                'low': _this4.safeFloat(ticker, 'low'),
                'bid': _this4.safeFloat(ticker, 'bid'),
                'ask': _this4.safeFloat(ticker, 'ask'),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': _this4.safeFloat(ticker, 'last'),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': _this4.safeFloat(ticker, 'volume'),
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['date'] * 1000;
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': trade['tid'].toString(),
            'order': undefined,
            'type': undefined,
            'side': undefined,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetBctrades(_this5.extend({
                'symbol': market['id']
            }, params));
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(market, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            if (type == 'market') throw new ExchangeError(_this6.id + ' allows limit orders only');
            let method = 'privatePost' + _this6.capitalize(side) + 'Order';
            let marketId = _this6.marketId(market);
            let order = {
                'params': [price, amount, marketId]
            };
            let response = yield _this6[method](_this6.extend(order, params));
            return {
                'info': response,
                'id': response['id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            return yield _this7.privatePostCancelOrder({ 'params': id });
        })();
    }

    nonce() {
        return this.microseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version;
        if (api == 'public') {
            url += '/' + path;
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            if (Object.keys(params).length) params = params.join(',');else params = '';
            let query = this.urlencode({
                'tonce': nonce,
                'accesskey': this.apiKey,
                'requestmethod': method.toLowerCase(),
                'id': nonce,
                'method': path,
                'params': params
            });
            body = this.json({
                'method': path,
                'params': params,
                'id': nonce
            });
            let signature = this.hmac(this.encode(query), this.encode(this.secret), 'sha1');
            let auth = this.encode(this.apiKey + ':' + signature);
            headers = {
                'Json-Rpc-Tonce': nonce,
                'Authorization': "Basic " + this.decode(this.stringToBase64(auth)),
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if ('error' in response) throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],74:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, InsufficientFunds, OrderNotFound, DDoSProtection } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class liqui extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'liqui',
            'name': 'Liqui',
            'countries': 'UA',
            'rateLimit': 2500,
            'version': '3',
            'hasCORS': false,
            // obsolete metainfo interface
            'hasFetchOrder': true,
            'hasFetchOrders': true,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'hasFetchTickers': true,
            'hasFetchMyTrades': true,
            'hasWithdraw': true,
            // new metainfo interface
            'has': {
                'fetchOrder': true,
                'fetchOrders': 'emulated',
                'fetchOpenOrders': true,
                'fetchClosedOrders': 'emulated',
                'fetchTickers': true,
                'fetchMyTrades': true,
                'withdraw': true
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27982022-75aea828-63a0-11e7-9511-ca584a8edd74.jpg',
                'api': {
                    'public': 'https://api.liqui.io/api',
                    'private': 'https://api.liqui.io/tapi'
                },
                'www': 'https://liqui.io',
                'doc': 'https://liqui.io/api',
                'fees': 'https://liqui.io/fee'
            },
            'api': {
                'public': {
                    'get': ['info', 'ticker/{pair}', 'depth/{pair}', 'trades/{pair}']
                },
                'private': {
                    'post': ['getInfo', 'Trade', 'ActiveOrders', 'OrderInfo', 'CancelOrder', 'TradeHistory', 'TransHistory', 'CoinDepositAddress', 'WithdrawCoin', 'CreateCoupon', 'RedeemCoupon']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.001,
                    'taker': 0.0025
                },
                'funding': 0.0
            }
        });
    }

    calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {
        let market = this.markets[symbol];
        let key = 'quote';
        let rate = market[takerOrMaker];
        let cost = parseFloat(this.costToPrecision(symbol, amount * rate));
        if (side == 'sell') {
            cost *= price;
        } else {
            key = 'base';
        }
        return {
            'type': takerOrMaker,
            'currency': market[key],
            'rate': rate,
            'cost': cost
        };
    }

    commonCurrencyCode(currency) {
        if (!this.substituteCommonCurrencyCodes) return currency;
        if (currency == 'XBT') return 'BTC';
        if (currency == 'BCC') return 'BCH';
        if (currency == 'DRK') return 'DASH';
        // they misspell DASH as dsh :/
        if (currency == 'DSH') return 'DASH';
        return currency;
    }

    getBaseQuoteFromMarketId(id) {
        let uppercase = id.toUpperCase();
        let [base, quote] = uppercase.split('_');
        base = this.commonCurrencyCode(base);
        quote = this.commonCurrencyCode(quote);
        return [base, quote];
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.publicGetInfo();
            let markets = response['pairs'];
            let keys = Object.keys(markets);
            let result = [];
            for (let p = 0; p < keys.length; p++) {
                let id = keys[p];
                let market = markets[id];
                let [base, quote] = _this.getBaseQuoteFromMarketId(id);
                let symbol = base + '/' + quote;
                let precision = {
                    'amount': _this.safeInteger(market, 'decimal_places'),
                    'price': _this.safeInteger(market, 'decimal_places')
                };
                let amountLimits = {
                    'min': _this.safeFloat(market, 'min_amount'),
                    'max': _this.safeFloat(market, 'max_amount')
                };
                let priceLimits = {
                    'min': _this.safeFloat(market, 'min_price'),
                    'max': _this.safeFloat(market, 'max_price')
                };
                let costLimits = {
                    'min': _this.safeFloat(market, 'min_total')
                };
                let limits = {
                    'amount': amountLimits,
                    'price': priceLimits,
                    'cost': costLimits
                };
                let active = market['hidden'] == 0;
                result.push(_this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'active': active,
                    'taker': market['fee'] / 100,
                    'lot': amountLimits['min'],
                    'precision': precision,
                    'limits': limits,
                    'info': market
                }));
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostGetInfo();
            let balances = response['return'];
            let result = { 'info': balances };
            let funds = balances['funds'];
            let currencies = Object.keys(funds);
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                let uppercase = currency.toUpperCase();
                uppercase = _this2.commonCurrencyCode(uppercase);
                let total = undefined;
                let used = undefined;
                if (balances['open_orders'] == 0) {
                    total = funds[currency];
                    used = 0.0;
                }
                let account = {
                    'free': funds[currency],
                    'used': used,
                    'total': total
                };
                result[uppercase] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetDepthPair(_this3.extend({
                'pair': market['id']
            }, params));
            let market_id_in_reponse = market['id'] in response;
            if (!market_id_in_reponse) throw new ExchangeError(_this3.id + ' ' + market['symbol'] + ' order book is empty or not available');
            let orderbook = response[market['id']];
            let result = _this3.parseOrderBook(orderbook);
            result['bids'] = _this3.sortBy(result['bids'], 0, true);
            result['asks'] = _this3.sortBy(result['asks'], 0);
            return result;
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['updated'] * 1000;
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'high'),
            'low': this.safeFloat(ticker, 'low'),
            'bid': this.safeFloat(ticker, 'buy'),
            'ask': this.safeFloat(ticker, 'sell'),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': this.safeFloat(ticker, 'last'),
            'change': undefined,
            'percentage': undefined,
            'average': this.safeFloat(ticker, 'avg'),
            'baseVolume': this.safeFloat(ticker, 'vol_cur'),
            'quoteVolume': this.safeFloat(ticker, 'vol'),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let ids = undefined;
            if (!symbols) {
                // let numIds = this.ids.length;
                // if (numIds > 256)
                //     throw new ExchangeError (this.id + ' fetchTickers() requires symbols argument');
                ids = _this4.ids;
            } else {
                ids = _this4.marketIds(symbols);
            }
            let tickers = yield _this4.publicGetTickerPair(_this4.extend({
                'pair': ids.join('-')
            }, params));
            let result = {};
            let keys = Object.keys(tickers);
            for (let k = 0; k < keys.length; k++) {
                let id = keys[k];
                let ticker = tickers[id];
                let market = _this4.markets_by_id[id];
                let symbol = market['symbol'];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let tickers = yield _this5.fetchTickers([symbol], params);
            return tickers[symbol];
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = trade['timestamp'] * 1000;
        let side = trade['type'];
        if (side == 'ask') side = 'sell';
        if (side == 'bid') side = 'buy';
        let price = this.safeFloat(trade, 'price');
        if ('rate' in trade) price = this.safeFloat(trade, 'rate');
        let id = this.safeString(trade, 'tid');
        if ('trade_id' in trade) id = this.safeString(trade, 'trade_id');
        let order = this.safeString(trade, this.getOrderIdKey());
        if ('pair' in trade) {
            let marketId = trade['pair'];
            market = this.markets_by_id[marketId];
        }
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let amount = trade['amount'];
        let type = 'limit'; // all trades are still limit trades
        let fee = undefined;
        // this is filled by fetchMyTrades() only
        // is_your_order is always false :\
        // let isYourOrder = this.safeValue (trade, 'is_your_order');
        // let takerOrMaker = 'taker';
        // if (isYourOrder)
        //     takerOrMaker = 'maker';
        // let fee = this.calculateFee (symbol, type, side, amount, price, takerOrMaker);
        return {
            'id': id,
            'order': order,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': price,
            'amount': amount,
            'fee': fee,
            'info': trade
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let request = {
                'pair': market['id']
            };
            if (limit) request['limit'] = limit;
            let response = yield _this6.publicGetTradesPair(_this6.extend(request, params));
            return _this6.parseTrades(response[market['id']], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            if (type == 'market') throw new ExchangeError(_this7.id + ' allows limit orders only');
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let request = {
                'pair': market['id'],
                'type': side,
                'amount': _this7.amountToPrecision(symbol, amount),
                'rate': _this7.priceToPrecision(symbol, price)
            };
            let response = yield _this7.privatePostTrade(_this7.extend(request, params));
            let id = _this7.safeString(response['return'], _this7.getOrderIdKey());
            if (!id) id = _this7.safeString(response['return'], 'init_order_id');
            let timestamp = _this7.milliseconds();
            price = parseFloat(price);
            amount = parseFloat(amount);
            let order = {
                'id': id,
                'timestamp': timestamp,
                'datetime': _this7.iso8601(timestamp),
                'status': 'open',
                'symbol': symbol,
                'type': type,
                'side': side,
                'price': price,
                'cost': price * amount,
                'amount': amount,
                'remaining': amount,
                'filled': 0.0,
                'fee': undefined
                // 'trades': this.parseTrades (order['trades'], market),
            };
            _this7.orders[id] = order;
            return _this7.extend({ 'info': response }, order);
        })();
    }

    getOrderIdKey() {
        return 'order_id';
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let response = undefined;
            try {
                let request = {};
                let idKey = _this8.getOrderIdKey();
                request[idKey] = id;
                response = yield _this8.privatePostCancelOrder(_this8.extend(request, params));
                if (id in _this8.orders) _this8.orders[id]['status'] = 'canceled';
            } catch (e) {
                if (_this8.last_json_response) {
                    let message = _this8.safeString(_this8.last_json_response, 'error');
                    if (message) {
                        if (message.indexOf('not found') >= 0) throw new OrderNotFound(_this8.id + ' cancelOrder() error: ' + _this8.last_http_response);
                    }
                }
                throw e;
            }
            return response;
        })();
    }

    parseOrder(order, market = undefined) {
        let id = order['id'].toString();
        let status = order['status'];
        if (status == 0) {
            status = 'open';
        } else if (status == 1) {
            status = 'closed';
        } else if (status == 2 || status == 3) {
            status = 'canceled';
        }
        let timestamp = parseInt(order['timestamp_created']) * 1000;
        let symbol = undefined;
        if (!market) market = this.markets_by_id[order['pair']];
        if (market) symbol = market['symbol'];
        let remaining = this.safeFloat(order, 'amount');
        let amount = this.safeFloat(order, 'start_amount', remaining);
        if (typeof amount == 'undefined') {
            if (id in this.orders) {
                amount = this.safeFloat(this.orders[id], 'amount');
            }
        }
        let price = this.safeFloat(order, 'rate');
        let filled = undefined;
        let cost = undefined;
        if (typeof amount != 'undefined') {
            if (typeof remaining != 'undefined') {
                filled = amount - remaining;
                cost = price * filled;
            }
        }
        let fee = undefined;
        let result = {
            'info': order,
            'id': id,
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'type': 'limit',
            'side': order['type'],
            'price': price,
            'cost': cost,
            'amount': amount,
            'remaining': remaining,
            'filled': filled,
            'status': status,
            'fee': fee
        };
        return result;
    }

    parseOrders(orders, market = undefined, since = undefined, limit = undefined) {
        let ids = Object.keys(orders);
        let result = [];
        for (let i = 0; i < ids.length; i++) {
            let id = ids[i];
            let order = orders[id];
            let extended = this.extend(order, { 'id': id });
            result.push(this.parseOrder(extended, market));
        }
        return this.filterBySinceLimit(result, since, limit);
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let response = yield _this9.privatePostOrderInfo(_this9.extend({
                'order_id': parseInt(id)
            }, params));
            id = id.toString();
            let newOrder = _this9.parseOrder(_this9.extend({ 'id': id }, response['return'][id]));
            let oldOrder = id in _this9.orders ? _this9.orders[id] : {};
            _this9.orders[id] = _this9.extend(oldOrder, newOrder);
            return _this9.orders[id];
        })();
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this10.id + ' fetchOrders requires a symbol');
            yield _this10.loadMarkets();
            let market = _this10.market(symbol);
            let request = { 'pair': market['id'] };
            let response = yield _this10.privatePostActiveOrders(_this10.extend(request, params));
            let openOrders = [];
            if ('return' in response) openOrders = _this10.parseOrders(response['return'], market);
            for (let j = 0; j < openOrders.length; j++) {
                _this10.orders[openOrders[j]['id']] = openOrders[j];
            }
            let openOrdersIndexedById = _this10.indexBy(openOrders, 'id');
            let cachedOrderIds = Object.keys(_this10.orders);
            let result = [];
            for (let k = 0; k < cachedOrderIds.length; k++) {
                let id = cachedOrderIds[k];
                if (id in openOrdersIndexedById) {
                    _this10.orders[id] = _this10.extend(_this10.orders[id], openOrdersIndexedById[id]);
                } else {
                    let order = _this10.orders[id];
                    if (order['status'] == 'open') {
                        _this10.orders[id] = _this10.extend(order, {
                            'status': 'closed',
                            'cost': order['amount'] * order['price'],
                            'filled': order['amount'],
                            'remaining': 0.0
                        });
                    }
                }
                let order = _this10.orders[id];
                if (order['symbol'] == symbol) result.push(order);
            }
            return _this10.filterBySinceLimit(result, since, limit);
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            let orders = yield _this11.fetchOrders(symbol, since, limit, params);
            let result = [];
            for (let i = 0; i < orders.length; i++) {
                if (orders[i]['status'] == 'open') result.push(orders[i]);
            }
            return result;
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            let orders = yield _this12.fetchOrders(symbol, since, limit, params);
            let result = [];
            for (let i = 0; i < orders.length; i++) {
                if (orders[i]['status'] == 'closed') result.push(orders[i]);
            }
            return result;
        })();
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            yield _this13.loadMarkets();
            let market = undefined;
            let request = {
                // 'from': 123456789, // trade ID, from which the display starts numerical 0
                // 'count': 1000, // the number of trades for display numerical, default = 1000
                // 'from_id': trade ID, from which the display starts numerical 0
                // 'end_id': trade ID on which the display ends numerical ∞
                // 'order': 'ASC', // sorting, default = DESC
                // 'since': 1234567890, // UTC start time, default = 0
                // 'end': 1234567890, // UTC end time, default = ∞
                // 'pair': 'eth_btc', // default = all markets
            };
            if (symbol) {
                market = _this13.market(symbol);
                request['pair'] = market['id'];
            }
            if (limit) request['count'] = parseInt(limit);
            if (since) request['since'] = parseInt(since / 1000);
            let response = yield _this13.privatePostTradeHistory(_this13.extend(request, params));
            let trades = [];
            if ('return' in response) trades = response['return'];
            return _this13.parseTrades(trades, market, since, limit);
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            yield _this14.loadMarkets();
            let response = yield _this14.privatePostWithdrawCoin(_this14.extend({
                'coinName': currency,
                'amount': parseFloat(amount),
                'address': address
            }, params));
            return {
                'info': response,
                'id': response['return']['tId']
            };
        })();
    }

    signBodyWithSecret(body) {
        return this.hmac(this.encode(body), this.encode(this.secret), 'sha512');
    }

    getVersionString() {
        return '/' + this.version;
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        let query = this.omit(params, this.extractParams(path));
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            body = this.urlencode(this.extend({
                'nonce': nonce,
                'method': path
            }, query));
            let signature = this.signBodyWithSecret(body);
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Key': this.apiKey,
                'Sign': signature
            };
        } else {
            url += this.getVersionString() + '/' + this.implodeParams(path, params);
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this15.fetch2(path, api, method, params, headers, body);
            if ('success' in response) {
                if (!response['success']) {
                    if (response['error'].indexOf('Not enougth') >= 0) {
                        // not enougTh is a typo inside Liqui's own API...
                        throw new InsufficientFunds(_this15.id + ' ' + _this15.json(response));
                    } else if (response['error'] == 'Requests too often') {
                        throw new DDoSProtection(_this15.id + ' ' + _this15.json(response));
                    } else if (response['error'] == 'not available' || response['error'] == 'external service unavailable') {
                        throw new DDoSProtection(_this15.id + ' ' + _this15.json(response));
                    } else {
                        throw new ExchangeError(_this15.id + ' ' + _this15.json(response));
                    }
                }
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],75:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, AuthenticationError, NotSupported, InvalidOrder, OrderNotFound } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class livecoin extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'livecoin',
            'name': 'LiveCoin',
            'countries': ['US', 'UK', 'RU'],
            'rateLimit': 1000,
            'hasCORS': false,
            // obsolete metainfo interface
            'hasFetchTickers': true,
            'hasFetchCurrencies': true,
            // new metainfo interface
            'has': {
                'fetchTickers': true,
                'fetchCurrencies': true
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27980768-f22fc424-638a-11e7-89c9-6010a54ff9be.jpg',
                'api': 'https://api.livecoin.net',
                'www': 'https://www.livecoin.net',
                'doc': 'https://www.livecoin.net/api?lang=en'
            },
            'api': {
                'public': {
                    'get': ['exchange/all/order_book', 'exchange/last_trades', 'exchange/maxbid_minask', 'exchange/order_book', 'exchange/restrictions', 'exchange/ticker', // omit params to get all tickers at once
                    'info/coinInfo']
                },
                'private': {
                    'get': ['exchange/client_orders', 'exchange/order', 'exchange/trades', 'exchange/commission', 'exchange/commissionCommonInfo', 'payment/balances', 'payment/balance', 'payment/get/address', 'payment/history/size', 'payment/history/transactions'],
                    'post': ['exchange/buylimit', 'exchange/buymarket', 'exchange/cancellimit', 'exchange/selllimit', 'exchange/sellmarket', 'payment/out/capitalist', 'payment/out/card', 'payment/out/coin', 'payment/out/okpay', 'payment/out/payeer', 'payment/out/perfectmoney', 'payment/voucher/amount', 'payment/voucher/make', 'payment/voucher/redeem']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'maker': 0.18 / 100,
                    'taker': 0.18 / 100
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetExchangeTicker();
            let restrictions = yield _this.publicGetExchangeRestrictions();
            let restrictionsById = _this.indexBy(restrictions['restrictions'], 'currencyPair');
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['symbol'];
                let symbol = id;
                let [base, quote] = symbol.split('/');
                let coinRestrictions = _this.safeValue(restrictionsById, symbol);
                let precision = {
                    'price': 5,
                    'amount': 8,
                    'cost': 8
                };
                let limits = {
                    'amount': {
                        'min': Math.pow(10, -precision['amount']),
                        'max': Math.pow(10, precision['amount'])
                    }
                };
                if (coinRestrictions) {
                    precision['price'] = _this.safeInteger(coinRestrictions, 'priceScale', 5);
                    limits['amount']['min'] = _this.safeFloat(coinRestrictions, 'minLimitQuantity', limits['amount']['min']);
                }
                limits['price'] = {
                    'min': Math.pow(10, -precision['price']),
                    'max': Math.pow(10, precision['price'])
                };
                result.push(_this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'precision': precision,
                    'limits': limits,
                    'info': market
                }));
            }
            return result;
        })();
    }

    fetchCurrencies(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this2.publicGetInfoCoinInfo(params);
            let currencies = response['info'];
            let result = {};
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let id = currency['symbol'];
                // todo: will need to rethink the fees
                // to add support for multiple withdrawal/deposit methods and
                // differentiated fees for each particular method
                let code = _this2.commonCurrencyCode(id);
                let precision = 8; // default precision, todo: fix "magic constants"
                let active = currency['walletStatus'] == 'normal';
                result[code] = {
                    'id': id,
                    'code': code,
                    'info': currency,
                    'name': currency['name'],
                    'active': active,
                    'status': 'ok',
                    'fee': currency['withdrawFee'], // todo: redesign
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': currency['minOrderAmount'],
                            'max': Math.pow(10, precision)
                        },
                        'price': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'cost': {
                            'min': currency['minOrderAmount'],
                            'max': undefined
                        },
                        'withdraw': {
                            'min': currency['minWithdrawAmount'],
                            'max': Math.pow(10, precision)
                        },
                        'deposit': {
                            'min': currency['minDepositAmount'],
                            'max': undefined
                        }
                    }
                };
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let balances = yield _this3.privateGetPaymentBalances();
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let account = undefined;
                if (currency in result) account = result[currency];else account = _this3.account();
                if (balance['type'] == 'total') account['total'] = parseFloat(balance['value']);
                if (balance['type'] == 'available') account['free'] = parseFloat(balance['value']);
                if (balance['type'] == 'trade') account['used'] = parseFloat(balance['value']);
                result[currency] = account;
            }
            return _this3.parseBalance(result);
        })();
    }

    fetchFees(params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let commissionInfo = yield _this4.privateGetExchangeCommissionCommonInfo();
            let commission = _this4.safeFloat(commissionInfo, 'commission');
            return {
                'info': commissionInfo,
                'maker': commission,
                'taker': commission,
                'withdraw': 0.0
            };
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let orderbook = yield _this5.publicGetExchangeOrderBook(_this5.extend({
                'currencyPair': _this5.marketId(symbol),
                'groupByPrice': 'false',
                'depth': 100
            }, params));
            let timestamp = orderbook['timestamp'];
            return _this5.parseOrderBook(orderbook, timestamp);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let vwap = parseFloat(ticker['vwap']);
        let baseVolume = parseFloat(ticker['volume']);
        let quoteVolume = baseVolume * vwap;
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['best_bid']),
            'ask': parseFloat(ticker['best_ask']),
            'vwap': parseFloat(ticker['vwap']),
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last']),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let response = yield _this6.publicGetExchangeTicker(params);
            let tickers = _this6.indexBy(response, 'symbol');
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = _this6.markets_by_id[id];
                let symbol = market['symbol'];
                let ticker = tickers[id];
                result[symbol] = _this6.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let ticker = yield _this7.publicGetExchangeTicker(_this7.extend({
                'currencyPair': market['id']
            }, params));
            return _this7.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['time'] * 1000;
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': trade['id'].toString(),
            'order': undefined,
            'type': undefined,
            'side': trade['type'].toLowerCase(),
            'price': trade['price'],
            'amount': trade['quantity']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let market = _this8.market(symbol);
            let response = yield _this8.publicGetExchangeLastTrades(_this8.extend({
                'currencyPair': market['id']
            }, params));
            return _this8.parseTrades(response, market, since, limit);
        })();
    }

    parseOrder(order, market = undefined) {
        let timestamp = this.safeInteger(order, 'lastModificationTime');
        if (!timestamp) timestamp = this.parse8601(order['lastModificationTime']);
        let trades = undefined;
        if ('trades' in order)
            // TODO currently not supported by livecoin
            // trades = this.parseTrades (order['trades'], market, since, limit);
            trades = undefined;
        let status = undefined;
        if (order['orderStatus'] == 'OPEN' || order['orderStatus'] == 'PARTIALLY_FILLED') {
            status = 'open';
        } else if (order['orderStatus'] == 'EXECUTED' || order['orderStatus'] == 'PARTIALLY_FILLED_AND_CANCELLED') {
            status = 'closed';
        } else {
            status = 'canceled';
        }
        let symbol = order['currencyPair'];
        let [base, quote] = symbol.split('/');
        let type = undefined;
        let side = undefined;
        if (order['type'].indexOf('MARKET') >= 0) {
            type = 'market';
        } else {
            type = 'limit';
        }
        if (order['type'].indexOf('SELL') >= 0) {
            side = 'sell';
        } else {
            side = 'buy';
        }
        let price = this.safeFloat(order, 'price', 0.0);
        let cost = this.safeFloat(order, 'commissionByTrade', 0.0);
        let remaining = this.safeFloat(order, 'remainingQuantity', 0.0);
        let amount = this.safeFloat(order, 'quantity', remaining);
        let filled = amount - remaining;
        return {
            'info': order,
            'id': order['id'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'status': status,
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': price,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'trades': trades,
            'fee': {
                'cost': cost,
                'currency': quote
            }
        };
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let market = undefined;
            if (symbol) market = _this9.market(symbol);
            let pair = market ? market['id'] : undefined;
            let request = {};
            if (pair) request['currencyPair'] = pair;
            if (since) request['issuedFrom'] = parseInt(since);
            if (limit) request['endRow'] = limit - 1;
            let response = yield _this9.privateGetExchangeClientOrders(_this9.extend(request, params));
            let result = [];
            let rawOrders = [];
            if (response['data']) rawOrders = response['data'];
            for (let i = 0; i < rawOrders.length; i++) {
                let order = rawOrders[i];
                result.push(_this9.parseOrder(order, market));
            }
            return result;
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let result = yield _this10.fetchOrders(symbol, since, limit, _this10.extend({
                'openClosed': 'OPEN'
            }, params));
            return result;
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            let result = yield _this11.fetchOrders(symbol, since, limit, _this11.extend({
                'openClosed': 'CLOSED'
            }, params));
            return result;
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            yield _this12.loadMarkets();
            let method = 'privatePostExchange' + _this12.capitalize(side) + type;
            let market = _this12.market(symbol);
            let order = {
                'quantity': _this12.amountToPrecision(symbol, amount),
                'currencyPair': market['id']
            };
            if (type == 'limit') order['price'] = _this12.priceToPrecision(symbol, price);
            let response = yield _this12[method](_this12.extend(order, params));
            return {
                'info': response,
                'id': response['orderId'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this13.id + ' cancelOrder requires a symbol argument');
            yield _this13.loadMarkets();
            let market = _this13.market(symbol);
            let currencyPair = market['id'];
            let response = yield _this13.privatePostExchangeCancellimit(_this13.extend({
                'orderId': id,
                'currencyPair': currencyPair
            }, params));
            let message = _this13.safeString(response, 'message', _this13.json(response));
            if ('success' in response) {
                if (!response['success']) {
                    throw new InvalidOrder(message);
                } else if ('cancelled' in response) {
                    if (response['cancelled']) {
                        return response;
                    } else {
                        throw new OrderNotFound(message);
                    }
                }
            }
            throw new ExchangeError(_this13.id + ' cancelOrder() failed: ' + _this13.json(response));
        })();
    }

    fetchDepositAddress(currency, params = {}) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            let request = {
                'currency': currency
            };
            let response = yield _this14.privateGetPaymentGetAddress(_this14.extend(request, params));
            let address = _this14.safeString(response, 'wallet');
            return {
                'currency': currency,
                'address': address,
                'status': 'ok',
                'info': response
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + path;
        let query = this.urlencode(this.keysort(params));
        if (method == 'GET') {
            if (Object.keys(params).length) {
                url += '?' + query;
            }
        }
        if (api == 'private') {
            this.checkRequiredCredentials();
            if (method == 'POST') body = query;
            let signature = this.hmac(this.encode(query), this.encode(this.secret), 'sha256');
            headers = {
                'Api-Key': this.apiKey,
                'Sign': signature.toUpperCase(),
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code >= 300) {
            if (body[0] == "{") {
                let response = JSON.parse(body);
                if ('errorCode' in response) {
                    let error = response['errorCode'];
                    if (error == 1) {
                        throw new ExchangeError(this.id + ' ' + this.json(response));
                    } else if (error == 2) {
                        if ('errorMessage' in response) {
                            if (response['errorMessage'] == 'User not found') throw new AuthenticationError(this.id + ' ' + response['errorMessage']);
                        } else {
                            throw new ExchangeError(this.id + ' ' + this.json(response));
                        }
                    } else if (error == 10 || error == 11 || error == 12 || error == 20 || error == 30 || error == 101 || error == 102) {
                        throw new AuthenticationError(this.id + ' ' + this.json(response));
                    } else if (error == 31) {
                        throw new NotSupported(this.id + ' ' + this.json(response));
                    } else if (error == 32) {
                        throw new ExchangeError(this.id + ' ' + this.json(response));
                    } else if (error == 100) {
                        throw new ExchangeError(this.id + ': Invalid parameters ' + this.json(response));
                    } else if (error == 103) {
                        throw new InvalidOrder(this.id + ': Invalid currency ' + this.json(response));
                    } else if (error == 104) {
                        throw new InvalidOrder(this.id + ': Invalid amount ' + this.json(response));
                    } else if (error == 105) {
                        throw new InvalidOrder(this.id + ': Unable to block funds ' + this.json(response));
                    } else {
                        throw new ExchangeError(this.id + ' ' + this.json(response));
                    }
                }
            }
            throw new ExchangeError(this.id + ' ' + body);
        }
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this15.fetch2(path, api, method, params, headers, body);
            if ('success' in response) {
                if (!response['success']) {
                    throw new ExchangeError(_this15.id + ' error: ' + _this15.json(response));
                }
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],76:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class luno extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'luno',
            'name': 'luno',
            'countries': ['GB', 'SG', 'ZA'],
            'rateLimit': 10000,
            'version': '1',
            'hasCORS': false,
            'hasFetchTickers': true,
            'hasFetchOrder': true,
            'has': {
                'fetchTickers': true,
                'fetchOrder': true
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',
                'api': 'https://api.mybitx.com/api',
                'www': 'https://www.luno.com',
                'doc': ['https://www.luno.com/en/api', 'https://npmjs.org/package/bitx', 'https://github.com/bausmeier/node-bitx']
            },
            'api': {
                'public': {
                    'get': ['orderbook', 'ticker', 'tickers', 'trades']
                },
                'private': {
                    'get': ['accounts/{id}/pending', 'accounts/{id}/transactions', 'balance', 'fee_info', 'funding_address', 'listorders', 'listtrades', 'orders/{id}', 'quotes/{id}', 'withdrawals', 'withdrawals/{id}'],
                    'post': ['accounts', 'postorder', 'marketorder', 'stoporder', 'funding_address', 'withdrawals', 'send', 'quotes', 'oauth2/grant'],
                    'put': ['quotes/{id}'],
                    'delete': ['quotes/{id}', 'withdrawals/{id}']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetTickers();
            let result = [];
            for (let p = 0; p < markets['tickers'].length; p++) {
                let market = markets['tickers'][p];
                let id = market['pair'];
                let base = id.slice(0, 3);
                let quote = id.slice(3, 6);
                base = _this.commonCurrencyCode(base);
                quote = _this.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetBalance();
            let balances = response['balance'];
            let result = { 'info': response };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = _this2.commonCurrencyCode(balance['asset']);
                let reserved = parseFloat(balance['reserved']);
                let unconfirmed = parseFloat(balance['unconfirmed']);
                let account = {
                    'free': parseFloat(balance['balance']),
                    'used': _this2.sum(reserved, unconfirmed),
                    'total': 0.0
                };
                account['total'] = _this2.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetOrderbook(_this3.extend({
                'pair': _this3.marketId(symbol)
            }, params));
            let timestamp = orderbook['timestamp'];
            return _this3.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'volume');
        })();
    }

    parseOrder(order, market = undefined) {
        let timestamp = order['creation_timestamp'];
        let status = order['state'] == 'PENDING' ? 'open' : 'closed';
        let side = order['type'] == 'ASK' ? 'sell' : 'buy';
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let price = this.safeFloat(order, 'limit_price');
        let amount = this.safeFloat(order, 'limit_volume');
        let quoteFee = this.safeFloat(order, 'fee_counter');
        let baseFee = this.safeFloat(order, 'fee_base');
        let fee = { 'currency': undefined };
        if (quoteFee) {
            fee['side'] = 'quote';
            fee['cost'] = quoteFee;
        } else {
            fee['side'] = 'base';
            fee['cost'] = baseFee;
        }
        return {
            'id': order['order_id'],
            'datetime': this.iso8601(timestamp),
            'timestamp': timestamp,
            'status': status,
            'symbol': symbol,
            'type': undefined,
            'side': side,
            'price': price,
            'amount': amount,
            'filled': undefined,
            'remaining': undefined,
            'trades': undefined,
            'fee': fee,
            'info': order
        };
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.privateGetOrders(_this4.extend({
                'id': id.toString()
            }, params));
            return _this4.parseOrder(response);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['timestamp'];
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': undefined,
            'low': undefined,
            'bid': parseFloat(ticker['bid']),
            'ask': parseFloat(ticker['ask']),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last_trade']),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['rolling_24_hour_volume']),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let response = yield _this5.publicGetTickers(params);
            let tickers = _this5.indexBy(response['tickers'], 'pair');
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = _this5.markets_by_id[id];
                let symbol = market['symbol'];
                let ticker = tickers[id];
                result[symbol] = _this5.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let ticker = yield _this6.publicGetTicker(_this6.extend({
                'pair': market['id']
            }, params));
            return _this6.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let side = trade['is_buy'] ? 'buy' : 'sell';
        return {
            'info': trade,
            'id': undefined,
            'order': undefined,
            'timestamp': trade['timestamp'],
            'datetime': this.iso8601(trade['timestamp']),
            'symbol': market['symbol'],
            'type': undefined,
            'side': side,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['volume'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let response = yield _this7.publicGetTrades(_this7.extend({
                'pair': market['id']
            }, params));
            return _this7.parseTrades(response['trades'], market, since, limit);
        })();
    }

    createOrder(market, type, side, amount, price = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let method = 'privatePost';
            let order = { 'pair': _this8.marketId(market) };
            if (type == 'market') {
                method += 'Marketorder';
                order['type'] = side.toUpperCase();
                if (side == 'buy') order['counter_volume'] = amount;else order['base_volume'] = amount;
            } else {
                method += 'Order';
                order['volume'] = amount;
                order['price'] = price;
                if (side == 'buy') order['type'] = 'BID';else order['type'] = 'ASK';
            }
            let response = yield _this8[method](_this8.extend(order, params));
            return {
                'info': response,
                'id': response['order_id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            return yield _this9.privatePostStoporder({ 'order_id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (Object.keys(query).length) url += '?' + this.urlencode(query);
        if (api == 'private') {
            this.checkRequiredCredentials();
            let auth = this.encode(this.apiKey + ':' + this.secret);
            auth = this.stringToBase64(auth);
            headers = { 'Authorization': 'Basic ' + this.decode(auth) };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this10.fetch2(path, api, method, params, headers, body);
            if ('error' in response) throw new ExchangeError(_this10.id + ' ' + _this10.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],77:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class mercado extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'mercado',
            'name': 'Mercado Bitcoin',
            'countries': 'BR', // Brazil
            'rateLimit': 1000,
            'version': 'v3',
            'hasCORS': true,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',
                'api': {
                    'public': 'https://www.mercadobitcoin.net/api',
                    'private': 'https://www.mercadobitcoin.net/tapi'
                },
                'www': 'https://www.mercadobitcoin.com.br',
                'doc': ['https://www.mercadobitcoin.com.br/api-doc', 'https://www.mercadobitcoin.com.br/trade-api']
            },
            'api': {
                'public': {
                    'get': ['{coin}/orderbook/', // last slash critical
                    '{coin}/ticker/', '{coin}/trades/', '{coin}/trades/{from}/', '{coin}/trades/{from}/{to}', '{coin}/day-summary/{year}/{month}/{day}/']
                },
                'private': {
                    'post': ['cancel_order', 'get_account_info', 'get_order', 'get_withdrawal', 'list_system_messages', 'list_orders', 'list_orderbook', 'place_buy_order', 'place_sell_order', 'withdraw_coin']
                }
            },
            'markets': {
                'BTC/BRL': { 'id': 'BRLBTC', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'suffix': 'Bitcoin' },
                'LTC/BRL': { 'id': 'BRLLTC', 'symbol': 'LTC/BRL', 'base': 'LTC', 'quote': 'BRL', 'suffix': 'Litecoin' },
                'BCH/BRL': { 'id': 'BRLBCH', 'symbol': 'BCH/BRL', 'base': 'BCH', 'quote': 'BRL', 'suffix': 'BCash' }
            },
            'fees': {
                'trading': {
                    'maker': 0.3 / 100,
                    'taker': 0.7 / 100
                }
            }
        });
    }

    fetchOrderBook(symbol, params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let market = _this.market(symbol);
            let orderbook = yield _this.publicGetCoinOrderbook(_this.extend({
                'coin': market['base']
            }, params));
            return _this.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let market = _this2.market(symbol);
            let response = yield _this2.publicGetCoinTicker(_this2.extend({
                'coin': market['base']
            }, params));
            let ticker = response['ticker'];
            let timestamp = parseInt(ticker['date']) * 1000;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this2.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['date'] * 1000;
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': trade['tid'].toString(),
            'order': undefined,
            'type': undefined,
            'side': trade['type'],
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let market = _this3.market(symbol);
            let response = yield _this3.publicGetCoinTrades(_this3.extend({
                'coin': market['base']
            }, params));
            return _this3.parseTrades(response, market, since, limit);
        })();
    }

    fetchBalance(params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this4.privatePostGetAccountInfo();
            let balances = response['response_data']['balance'];
            let result = { 'info': response };
            let currencies = Object.keys(_this4.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let account = _this4.account();
                if (lowercase in balances) {
                    account['free'] = parseFloat(balances[lowercase]['available']);
                    account['total'] = parseFloat(balances[lowercase]['total']);
                    account['used'] = account['total'] - account['free'];
                }
                result[currency] = account;
            }
            return _this4.parseBalance(result);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            if (type == 'market') throw new ExchangeError(_this5.id + ' allows limit orders only');
            let method = 'privatePostPlace' + _this5.capitalize(side) + 'Order';
            let order = {
                'coin_pair': _this5.marketId(symbol),
                'quantity': amount,
                'limit_price': price
            };
            let response = yield _this5[method](_this5.extend(order, params));
            return {
                'info': response,
                'id': response['response_data']['order']['order_id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this6.id + ' cancelOrder() requires a symbol argument');
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            return yield _this6.privatePostCancelOrder(_this6.extend({
                'coin_pair': market['id'],
                'order_id': id
            }, params));
        })();
    }

    parseOrder(order, market = undefined) {
        let side = undefined;
        if ('order_type' in order) side = order['order_type'] == 1 ? 'buy' : 'sell';
        let status = order['status'];
        let symbol = undefined;
        if (!market) {
            if ('coin_pair' in order) if (order['coin_pair'] in this.markets_by_id) market = this.markets_by_id[order['coin_pair']];
        }
        if (market) symbol = market['symbol'];
        let timestamp = undefined;
        if ('created_timestamp' in order) timestamp = parseInt(order['created_timestamp']) * 1000;
        if ('updated_timestamp' in order) timestamp = parseInt(order['updated_timestamp']) * 1000;
        let fee = {
            'cost': parseFloat(order['fee']),
            'currency': market['quote']
        };
        let price = this.safeFloat(order, 'limit_price');
        // price = this.safeFloat (order, 'executed_price_avg', price);
        let average = this.safeFloat(order, 'executed_price_avg');
        let amount = this.safeFloat(order, 'quantity');
        let filled = this.safeFloat(order, 'executed_quantity');
        let remaining = amount - filled;
        let cost = amount * average;
        let result = {
            'info': order,
            'id': order['order_id'].toString(),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': 'limit',
            'side': side,
            'price': price,
            'cost': cost,
            'average': average,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': fee
        };
        return result;
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this7.id + ' cancelOrder() requires a symbol argument');
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let response = undefined;
            response = yield _this7.privatePostGetOrder(_this7.extend({
                'coin_pair': market['id'],
                'order_id': parseInt(id)
            }, params));
            return _this7.parseOrder(response['response_data']['order']);
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let request = {
                'coin': currency,
                'quantity': amount.toFixed(10),
                'address': address
            };
            if (currency == 'BRL') {
                let account_ref = 'account_ref' in params;
                if (!account_ref) throw new ExchangeError(_this8.id + ' requires account_ref parameter to withdraw ' + currency);
            } else if (currency != 'LTC') {
                let tx_fee = 'tx_fee' in params;
                if (!tx_fee) throw new ExchangeError(_this8.id + ' requires tx_fee parameter to withdraw ' + currency);
            }
            let response = yield _this8.privatePostWithdrawCoin(_this8.extend(request, params));
            return {
                'info': response,
                'id': response['response_data']['withdrawal']['id']
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api] + '/';
        if (api == 'public') {
            url += this.implodeParams(path, params);
        } else {
            this.checkRequiredCredentials();
            url += this.version + '/';
            let nonce = this.nonce();
            body = this.urlencode(this.extend({
                'tapi_method': path,
                'tapi_nonce': nonce
            }, params));
            let auth = '/tapi/' + this.version + '/' + '?' + body;
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'TAPI-ID': this.apiKey,
                'TAPI-MAC': this.hmac(this.encode(auth), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.fetch2(path, api, method, params, headers, body);
            if ('error_message' in response) throw new ExchangeError(_this9.id + ' ' + _this9.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],78:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class mixcoins extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'mixcoins',
            'name': 'MixCoins',
            'countries': ['GB', 'HK'],
            'rateLimit': 1500,
            'version': 'v1',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/30237212-ed29303c-9535-11e7-8af8-fcd381cfa20c.jpg',
                'api': 'https://mixcoins.com/api',
                'www': 'https://mixcoins.com',
                'doc': 'https://mixcoins.com/help/api/'
            },
            'api': {
                'public': {
                    'get': ['ticker', 'trades', 'depth']
                },
                'private': {
                    'post': ['cancel', 'info', 'orders', 'order', 'transactions', 'trade']
                }
            },
            'markets': {
                'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'maker': 0.0015, 'taker': 0.0025 },
                'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.001, 'taker': 0.0015 },
                'BCH/BTC': { 'id': 'bcc_btc', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'maker': 0.001, 'taker': 0.0015 },
                'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC', 'maker': 0.0015, 'taker': 0.0025 },
                'BCH/USD': { 'id': 'bcc_usd', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD', 'maker': 0.001, 'taker': 0.0015 },
                'ETH/USD': { 'id': 'eth_usd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'maker': 0.001, 'taker': 0.0015 }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.privatePostInfo();
            let balance = response['result']['wallet'];
            let result = { 'info': balance };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let account = _this.account();
                if (lowercase in balance) {
                    account['free'] = parseFloat(balance[lowercase]['avail']);
                    account['used'] = parseFloat(balance[lowercase]['lock']);
                    account['total'] = _this.sum(account['free'], account['used']);
                }
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this2.publicGetDepth(_this2.extend({
                'market': _this2.marketId(symbol)
            }, params));
            return _this2.parseOrderBook(response['result']);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this3.publicGetTicker(_this3.extend({
                'market': _this3.marketId(symbol)
            }, params));
            let ticker = response['result'];
            let timestamp = _this3.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(trade['date']) * 1000;
        return {
            'id': trade['id'].toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': undefined,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTrades(_this4.extend({
                'market': market['id']
            }, params));
            return _this4.parseTrades(response['result'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let order = {
                'market': _this5.marketId(symbol),
                'op': side,
                'amount': amount
            };
            if (type == 'market') {
                order['order_type'] = 1;
                order['price'] = price;
            } else {
                order['order_type'] = 0;
            }
            let response = yield _this5.privatePostTrade(_this5.extend(order, params));
            return {
                'info': response,
                'id': response['result']['id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCancel({ 'id': id });
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + path;
        if (api == 'public') {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            body = this.urlencode(this.extend({
                'nonce': nonce
            }, params));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Key': this.apiKey,
                'Sign': this.hmac(this.encode(body), this.secret, 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.fetch2(path, api, method, params, headers, body);
            if ('status' in response) if (response['status'] == 200) return response;
            throw new ExchangeError(_this7.id + ' ' + _this7.json(response));
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],79:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class nova extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'nova',
            'name': 'Novaexchange',
            'countries': 'TZ', // Tanzania
            'rateLimit': 2000,
            'version': 'v2',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/30518571-78ca0bca-9b8a-11e7-8840-64b83a4a94b2.jpg',
                'api': 'https://novaexchange.com/remote',
                'www': 'https://novaexchange.com',
                'doc': 'https://novaexchange.com/remote/faq'
            },
            'api': {
                'public': {
                    'get': ['markets/', 'markets/{basecurrency}/', 'market/info/{pair}/', 'market/orderhistory/{pair}/', 'market/openorders/{pair}/buy/', 'market/openorders/{pair}/sell/', 'market/openorders/{pair}/both/', 'market/openorders/{pair}/{ordertype}/']
                },
                'private': {
                    'post': ['getbalances/', 'getbalance/{currency}/', 'getdeposits/', 'getwithdrawals/', 'getnewdepositaddress/{currency}/', 'getdepositaddress/{currency}/', 'myopenorders/', 'myopenorders_market/{pair}/', 'cancelorder/{orderid}/', 'withdraw/{currency}/', 'trade/{pair}/', 'tradehistory/', 'getdeposithistory/', 'getwithdrawalhistory/', 'walletstatus/', 'walletstatus/{currency}/']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.publicGetMarkets();
            let markets = response['markets'];
            let result = [];
            for (let i = 0; i < markets.length; i++) {
                let market = markets[i];
                if (!market['disabled']) {
                    let id = market['marketname'];
                    let [quote, base] = id.split('_');
                    let symbol = base + '/' + quote;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
            }
            return result;
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let orderbook = yield _this2.publicGetMarketOpenordersPairBoth(_this2.extend({
                'pair': _this2.marketId(symbol)
            }, params));
            return _this2.parseOrderBook(orderbook, undefined, 'buyorders', 'sellorders', 'price', 'amount');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let response = yield _this3.publicGetMarketInfoPair(_this3.extend({
                'pair': _this3.marketId(symbol)
            }, params));
            let ticker = response['markets'][0];
            let timestamp = _this3.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high24h']),
                'low': parseFloat(ticker['low24h']),
                'bid': _this3.safeFloat(ticker, 'bid'),
                'ask': _this3.safeFloat(ticker, 'ask'),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_price']),
                'change': parseFloat(ticker['change24h']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume24h']),
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['unix_t_datestamp'] * 1000;
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': undefined,
            'order': undefined,
            'type': undefined,
            'side': trade['tradetype'].toLowerCase(),
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetMarketOrderhistoryPair(_this4.extend({
                'pair': market['id']
            }, params));
            return _this4.parseTrades(response['items'], market, since, limit);
        })();
    }

    fetchBalance(params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let response = yield _this5.privatePostGetbalances();
            let balances = response['balances'];
            let result = { 'info': response };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let lockbox = parseFloat(balance['amount_lockbox']);
                let trades = parseFloat(balance['amount_trades']);
                let account = {
                    'free': parseFloat(balance['amount']),
                    'used': _this5.sum(lockbox, trades),
                    'total': parseFloat(balance['amount_total'])
                };
                result[currency] = account;
            }
            return _this5.parseBalance(result);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            if (type == 'market') throw new ExchangeError(_this6.id + ' allows limit orders only');
            yield _this6.loadMarkets();
            amount = amount.toString();
            price = price.toString();
            let market = _this6.market(symbol);
            let order = {
                'tradetype': side.toUpperCase(),
                'tradeamount': amount,
                'tradeprice': price,
                'tradebase': 1,
                'pair': market['id']
            };
            let response = yield _this6.privatePostTradePair(_this6.extend(order, params));
            return {
                'info': response,
                'id': undefined
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            return yield _this7.privatePostCancelorder(_this7.extend({
                'orderid': id
            }, params));
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/';
        if (api == 'private') url += api + '/';
        url += this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            url += '?' + this.urlencode({ 'nonce': nonce });
            let signature = this.hmac(this.encode(url), this.encode(this.secret), 'sha512', 'base64');
            body = this.urlencode(this.extend({
                'apikey': this.apiKey,
                'signature': signature
            }, query));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this8.fetch2(path, api, method, params, headers, body);
            if ('status' in response) if (response['status'] != 'success') throw new ExchangeError(_this8.id + ' ' + _this8.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],80:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const okcoinusd = require('./okcoinusd.js');

// ---------------------------------------------------------------------------

module.exports = class okcoincny extends okcoinusd {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'okcoincny',
            'name': 'OKCoin CNY',
            'countries': 'CN',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766792-8be9157a-5ee5-11e7-926c-6d69b8d3378d.jpg',
                'api': {
                    'web': 'https://www.okcoin.cn',
                    'public': 'https://www.okcoin.cn/pai',
                    'private': 'https://www.okcoin.cn/api'
                },
                'www': 'https://www.okcoin.cn',
                'doc': 'https://www.okcoin.cn/rest_getStarted.html'
            },
            'markets': {
                'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false },
                'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false },
                'ETH/CNY': { 'id': 'eth_cny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false },
                'ETC/CNY': { 'id': 'etc_cny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false },
                'BCH/CNY': { 'id': 'bcc_cny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false }
            }
        });
    }
};
},{"./okcoinusd.js":81}],81:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class okcoinusd extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'okcoinusd',
            'name': 'OKCoin USD',
            'countries': ['CN', 'US'],
            'hasCORS': false,
            'version': 'v1',
            'rateLimit': 1000, // up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
            // obsolete metainfo interface
            'hasFetchOHLCV': true,
            'hasFetchOrder': true,
            'hasFetchOrders': true,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'hasWithdraw': true,
            // new metainfo interface
            'has': {
                'fetchOHLCV': true,
                'fetchOrder': true,
                'fetchOrders': true,
                'fetchOpenOrders': true,
                'fetchClosedOrders': true,
                'withdraw': true
            },
            'extension': '.do', // appended to endpoint URL
            'hasFutureMarkets': false,
            'timeframes': {
                '1m': '1min',
                '3m': '3min',
                '5m': '5min',
                '15m': '15min',
                '30m': '30min',
                '1h': '1hour',
                '2h': '2hour',
                '4h': '4hour',
                '6h': '6hour',
                '12h': '12hour',
                '1d': '1day',
                '3d': '3day',
                '1w': '1week'
            },
            'api': {
                'web': {
                    'get': ['markets/currencies', 'markets/products']
                },
                'public': {
                    'get': ['depth', 'exchange_rate', 'future_depth', 'future_estimated_price', 'future_hold_amount', 'future_index', 'future_kline', 'future_price_limit', 'future_ticker', 'future_trades', 'kline', 'otcs', 'ticker', 'trades']
                },
                'private': {
                    'post': ['account_records', 'batch_trade', 'borrow_money', 'borrow_order_info', 'borrows_info', 'cancel_borrow', 'cancel_order', 'cancel_otc_order', 'cancel_withdraw', 'future_batch_trade', 'future_cancel', 'future_devolve', 'future_explosive', 'future_order_info', 'future_orders_info', 'future_position', 'future_position_4fix', 'future_trade', 'future_trades_history', 'future_userinfo', 'future_userinfo_4fix', 'lend_depth', 'order_fee', 'order_history', 'order_info', 'orders_info', 'otc_order_history', 'otc_order_info', 'repayment', 'submit_otc_order', 'trade', 'trade_history', 'trade_otc_order', 'withdraw', 'withdraw_info', 'unrepayments_info', 'userinfo']
                }
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766791-89ffb502-5ee5-11e7-8a5b-c5950b68ac65.jpg',
                'api': {
                    'web': 'https://www.okcoin.com/v2',
                    'public': 'https://www.okcoin.com/api',
                    'private': 'https://www.okcoin.com/api'
                },
                'www': 'https://www.okcoin.com',
                'doc': ['https://www.okcoin.com/rest_getStarted.html', 'https://www.npmjs.com/package/okcoin.com']
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let response = yield _this.webGetMarketsProducts();
            let markets = response['data'];
            let result = [];
            for (let i = 0; i < markets.length; i++) {
                let id = markets[i]['symbol'];
                let uppercase = id.toUpperCase();
                let [base, quote] = uppercase.split('_');
                let symbol = base + '/' + quote;
                let precision = {
                    'amount': markets[i]['maxSizeDigit'],
                    'price': markets[i]['maxPriceDigit']
                };
                let lot = Math.pow(10, -precision['amount']);
                let market = _this.extend(_this.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': markets[i],
                    'type': 'spot',
                    'spot': true,
                    'future': false,
                    'lot': lot,
                    'active': true,
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': markets[i]['minTradeSize'],
                            'max': undefined
                        },
                        'price': {
                            'min': undefined,
                            'max': undefined
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        }
                    }
                });
                result.push(market);
                if (_this.hasFutureMarkets && market['quote'] == 'USDT') {
                    result.push(_this.extend(market, {
                        'quote': 'USD',
                        'symbol': market['base'] + '/USD',
                        'id': market['id'].replace('usdt', 'usd'),
                        'type': 'future',
                        'spot': false,
                        'future': true
                    }));
                }
            }
            return result;
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let market = _this2.market(symbol);
            let method = 'publicGet';
            let request = {
                'symbol': market['id']
            };
            if (market['future']) {
                method += 'Future';
                request['contract_type'] = 'this_week'; // next_week, quarter
            }
            method += 'Depth';
            let orderbook = yield _this2[method](_this2.extend(request, params));
            let timestamp = _this2.milliseconds();
            return {
                'bids': orderbook['bids'],
                'asks': _this2.sortBy(orderbook['asks'], 0),
                'timestamp': timestamp,
                'datetime': _this2.iso8601(timestamp)
            };
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['timestamp'];
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['buy']),
            'ask': parseFloat(ticker['sell']),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last']),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['vol']),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let method = 'publicGet';
            let request = {
                'symbol': market['id']
            };
            if (market['future']) {
                method += 'Future';
                request['contract_type'] = 'this_week'; // next_week, quarter
            }
            method += 'Ticker';
            let response = yield _this3[method](_this3.extend(request, params));
            let timestamp = parseInt(response['date']) * 1000;
            let ticker = _this3.extend(response['ticker'], { 'timestamp': timestamp });
            return _this3.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'info': trade,
            'timestamp': trade['date_ms'],
            'datetime': this.iso8601(trade['date_ms']),
            'symbol': symbol,
            'id': trade['tid'].toString(),
            'order': undefined,
            'type': undefined,
            'side': trade['type'],
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let method = 'publicGet';
            let request = {
                'symbol': market['id']
            };
            if (market['future']) {
                method += 'Future';
                request['contract_type'] = 'this_week'; // next_week, quarter
            }
            method += 'Trades';
            let response = yield _this4[method](_this4.extend(request, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = 1440, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let method = 'publicGet';
            let request = {
                'symbol': market['id'],
                'type': _this5.timeframes[timeframe]
            };
            if (market['future']) {
                method += 'Future';
                request['contract_type'] = 'this_week'; // next_week, quarter
            }
            method += 'Kline';
            if (limit) request['size'] = parseInt(limit);
            if (since) {
                request['since'] = since;
            } else {
                request['since'] = _this5.milliseconds() - 86400000; // last 24 hours
            }
            let response = yield _this5[method](_this5.extend(request, params));
            return _this5.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    fetchBalance(params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let response = yield _this6.privatePostUserinfo();
            let balances = response['info']['funds'];
            let result = { 'info': response };
            let currencies = Object.keys(_this6.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let account = _this6.account();
                account['free'] = _this6.safeFloat(balances['free'], lowercase, 0.0);
                account['used'] = _this6.safeFloat(balances['freezed'], lowercase, 0.0);
                account['total'] = _this6.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this6.parseBalance(result);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let method = 'privatePost';
            let order = {
                'symbol': market['id'],
                'type': side
            };
            if (market['future']) {
                method += 'Future';
                order = _this7.extend(order, {
                    'contract_type': 'this_week', // next_week, quarter
                    'match_price': 0, // match best counter party price? 0 or 1, ignores price if 1
                    'lever_rate': 10, // leverage rate value: 10 or 20 (10 by default)
                    'price': price,
                    'amount': amount
                });
            } else {
                if (type == 'limit') {
                    order['price'] = price;
                    order['amount'] = amount;
                } else {
                    order['type'] += '_market';
                    if (side == 'buy') {
                        order['price'] = _this7.safeFloat(params, 'cost');
                        if (!order['price']) throw new ExchangeError(_this7.id + ' market buy orders require an additional cost parameter, cost = price * amount');
                    } else {
                        order['amount'] = amount;
                    }
                }
            }
            params = _this7.omit(params, 'cost');
            method += 'Trade';
            let response = yield _this7[method](_this7.extend(order, params));
            return {
                'info': response,
                'id': response['order_id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this8.id + ' cancelOrder() requires a symbol argument');
            let market = _this8.market(symbol);
            let request = {
                'symbol': market['id'],
                'order_id': id
            };
            let method = 'privatePost';
            if (market['future']) {
                method += 'FutureCancel';
                request['contract_type'] = 'this_week'; // next_week, quarter
            } else {
                method += 'CancelOrder';
            }
            let response = yield _this8[method](_this8.extend(request, params));
            return response;
        })();
    }

    parseOrderStatus(status) {
        if (status == -1) return 'canceled';
        if (status == 0) return 'open';
        if (status == 1) return 'partial';
        if (status == 2) return 'closed';
        if (status == 4) return 'canceled';
        return status;
    }

    parseOrder(order, market = undefined) {
        let side = undefined;
        let type = undefined;
        if ('type' in order) {
            if (order['type'] == 'buy' || order['type'] == 'sell') {
                side = order['type'];
                type = 'limit';
            } else {
                side = order['type'] == 'buy_market' ? 'buy' : 'sell';
                type = 'market';
            }
        }
        let status = this.parseOrderStatus(order['status']);
        let symbol = undefined;
        if (!market) {
            if ('symbol' in order) if (order['symbol'] in this.markets_by_id) market = this.markets_by_id[order['symbol']];
        }
        if (market) symbol = market['symbol'];
        let timestamp = undefined;
        let createDateField = this.getCreateDateField();
        if (createDateField in order) timestamp = order[createDateField];
        let amount = order['amount'];
        let filled = order['deal_amount'];
        let remaining = amount - filled;
        let average = order['avg_price'];
        let cost = average * filled;
        let result = {
            'info': order,
            'id': order['order_id'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': order['price'],
            'average': average,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': undefined
        };
        return result;
    }

    getCreateDateField() {
        // needed for derived exchanges
        // allcoin typo create_data instead of create_date
        return 'create_date';
    }

    getOrdersField() {
        // needed for derived exchanges
        // allcoin typo order instead of orders (expected based on their API docs)
        return 'orders';
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this9.id + 'fetchOrders requires a symbol parameter');
            yield _this9.loadMarkets();
            let market = _this9.market(symbol);
            let method = 'privatePost';
            let request = {
                'order_id': id,
                'symbol': market['id']
                // 'status': 0, // 0 for unfilled orders, 1 for filled orders
                // 'current_page': 1, // current page number
                // 'page_length': 200, // number of orders returned per page, maximum 200
            };
            if (market['future']) {
                method += 'Future';
                request['contract_type'] = 'this_week'; // next_week, quarter
            }
            method += 'OrderInfo';
            let response = yield _this9[method](_this9.extend(request, params));
            let ordersField = _this9.getOrdersField();
            return _this9.parseOrder(response[ordersField][0]);
        })();
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            if (!symbol) throw new ExchangeError(_this10.id + 'fetchOrders requires a symbol parameter');
            yield _this10.loadMarkets();
            let market = _this10.market(symbol);
            let method = 'privatePost';
            let request = {
                'symbol': market['id']
            };
            let order_id_in_params = 'order_id' in params;
            if (market['future']) {
                method += 'FutureOrdersInfo';
                request['contract_type'] = 'this_week'; // next_week, quarter
                if (!order_id_in_params) throw new ExchangeError(_this10.id + ' fetchOrders() requires order_id param for futures market ' + symbol + ' (a string of one or more order ids, comma-separated)');
            } else {
                let status = undefined;
                if ('type' in params) {
                    status = params['type'];
                } else if ('status' in params) {
                    status = params['status'];
                } else {
                    throw new ExchangeError(_this10.id + ' fetchOrders() requires type param or status param for spot market ' + symbol + ' (0 or "open" for unfilled orders, 1 or "closed" for filled orders)');
                }
                if (status == 'open') status = 0;
                if (status == 'closed') status = 1;
                if (order_id_in_params) {
                    method += 'OrdersInfo';
                    request = _this10.extend(request, {
                        'type': status
                    });
                } else {
                    method += 'OrderHistory';
                    request = _this10.extend(request, {
                        'status': status,
                        'current_page': 1, // current page number
                        'page_length': 200 // number of orders returned per page, maximum 200
                    });
                }
                params = _this10.omit(params, ['type', 'status']);
            }
            let response = yield _this10[method](_this10.extend(request, params));
            let ordersField = _this10.getOrdersField();
            return _this10.parseOrders(response[ordersField], market, since, limit);
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            let open = 0; // 0 for unfilled orders, 1 for filled orders
            return yield _this11.fetchOrders(symbol, undefined, undefined, _this11.extend({
                'status': open
            }, params));
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            let closed = 1; // 0 for unfilled orders, 1 for filled orders
            return yield _this12.fetchOrders(symbol, undefined, undefined, _this12.extend({
                'status': closed
            }, params));
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            yield _this13.loadMarkets();
            let lowercase = currency.toLowerCase() + '_usd';
            // if (amount < 0.01)
            //     throw new ExchangeError (this.id + ' withdraw() requires amount > 0.01');
            let request = {
                'symbol': lowercase,
                'withdraw_address': address,
                'withdraw_amount': amount,
                'target': 'address' // or okcn, okcom, okex
            };
            let query = params;
            if ('chargefee' in query) {
                request['chargefee'] = query['chargefee'];
                query = _this13.omit(query, 'chargefee');
            } else {
                throw new ExchangeError(_this13.id + ' withdraw() requires a `chargefee` parameter');
            }
            let password = undefined;
            if (_this13.password) {
                request['trade_pwd'] = _this13.password;
                password = _this13.password;
            } else if ('password' in query) {
                request['trade_pwd'] = query['password'];
                query = _this13.omit(query, 'password');
            } else if ('trade_pwd' in query) {
                request['trade_pwd'] = query['trade_pwd'];
                query = _this13.omit(query, 'trade_pwd');
            }
            if (!password) throw new ExchangeError(_this13.id + ' withdraw() requires this.password set on the exchange instance or a password / trade_pwd parameter');
            let response = yield _this13.privatePostWithdraw(_this13.extend(request, query));
            return {
                'info': response,
                'id': _this13.safeString(response, 'withdraw_id')
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = '/';
        if (api != 'web') url += this.version + '/';
        url += path + this.extension;
        if (api == 'private') {
            this.checkRequiredCredentials();
            let query = this.keysort(this.extend({
                'api_key': this.apiKey
            }, params));
            // secret key must be at the end of query
            let queryString = this.rawencode(query) + '&secret_key=' + this.secret;
            query['sign'] = this.hash(this.encode(queryString)).toUpperCase();
            body = this.urlencode(query);
            headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
        } else {
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        }
        url = this.urls['api'][api] + url;
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this14.fetch2(path, api, method, params, headers, body);
            if ('result' in response) if (!response['result']) throw new ExchangeError(_this14.id + ' ' + _this14.json(response));
            if ('error_code' in response) throw new ExchangeError(_this14.id + ' ' + _this14.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],82:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const okcoinusd = require('./okcoinusd.js');

// ---------------------------------------------------------------------------

module.exports = class okex extends okcoinusd {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'okex',
            'name': 'OKEX',
            'countries': ['CN', 'US'],
            'hasCORS': false,
            'hasFutureMarkets': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/32552768-0d6dd3c6-c4a6-11e7-90f8-c043b64756a7.jpg',
                'api': {
                    'web': 'https://www.okex.com/v2',
                    'public': 'https://www.okex.com/api',
                    'private': 'https://www.okex.com/api'
                },
                'www': 'https://www.okex.com',
                'doc': 'https://www.okex.com/rest_getStarted.html'
            }
        });
    }
};
},{"./okcoinusd.js":81}],83:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class paymium extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'paymium',
            'name': 'Paymium',
            'countries': ['FR', 'EU'],
            'rateLimit': 2000,
            'version': 'v1',
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27790564-a945a9d4-5ff9-11e7-9d2d-b635763f2f24.jpg',
                'api': 'https://paymium.com/api',
                'www': 'https://www.paymium.com',
                'doc': ['https://github.com/Paymium/api-documentation', 'https://www.paymium.com/page/developers']
            },
            'api': {
                'public': {
                    'get': ['countries', 'data/{id}/ticker', 'data/{id}/trades', 'data/{id}/depth', 'bitcoin_charts/{id}/trades', 'bitcoin_charts/{id}/depth']
                },
                'private': {
                    'get': ['merchant/get_payment/{UUID}', 'user', 'user/addresses', 'user/addresses/{btc_address}', 'user/orders', 'user/orders/{UUID}', 'user/price_alerts'],
                    'post': ['user/orders', 'user/addresses', 'user/payment_requests', 'user/price_alerts', 'merchant/create_payment'],
                    'delete': ['user/orders/{UUID}/cancel', 'user/price_alerts/{id}']
                }
            },
            'markets': {
                'BTC/EUR': { 'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
            },
            'fees': {
                'trading': {
                    'maker': 0.0059,
                    'taker': 0.0059
                }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let balances = yield _this.privateGetUser();
            let result = { 'info': balances };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let account = _this.account();
                let balance = 'balance_' + lowercase;
                let locked = 'locked_' + lowercase;
                if (balance in balances) account['free'] = balances[balance];
                if (locked in balances) account['used'] = balances[locked];
                account['total'] = _this.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this2.publicGetDataIdDepth(_this2.extend({
                'id': _this2.marketId(symbol)
            }, params));
            let result = _this2.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
            result['bids'] = _this2.sortBy(result['bids'], 0, true);
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let ticker = yield _this3.publicGetDataIdTicker(_this3.extend({
                'id': _this3.marketId(symbol)
            }, params));
            let timestamp = ticker['at'] * 1000;
            let vwap = parseFloat(ticker['vwap']);
            let baseVolume = parseFloat(ticker['volume']);
            let quoteVolume = baseVolume * vwap;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': _this3.safeFloat(ticker, 'high'),
                'low': _this3.safeFloat(ticker, 'low'),
                'bid': _this3.safeFloat(ticker, 'bid'),
                'ask': _this3.safeFloat(ticker, 'ask'),
                'vwap': vwap,
                'open': _this3.safeFloat(ticker, 'open'),
                'close': undefined,
                'first': undefined,
                'last': _this3.safeFloat(ticker, 'price'),
                'change': undefined,
                'percentage': _this3.safeFloat(ticker, 'variation'),
                'average': undefined,
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(trade['created_at_int']) * 1000;
        let volume = 'traded_' + market['base'].toLowerCase();
        return {
            'info': trade,
            'id': trade['uuid'],
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['side'],
            'price': trade['price'],
            'amount': trade[volume]
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetDataIdTrades(_this4.extend({
                'id': market['id']
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(market, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let order = {
                'type': _this5.capitalize(type) + 'Order',
                'currency': _this5.marketId(market),
                'direction': side,
                'amount': amount
            };
            if (type == 'market') order['price'] = price;
            let response = yield _this5.privatePostUserOrders(_this5.extend(order, params));
            return {
                'info': response,
                'id': response['uuid']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCancelOrder(_this6.extend({
                'orderNumber': id
            }, params));
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            body = this.json(params);
            let nonce = this.nonce().toString();
            let auth = nonce + url + body;
            headers = {
                'Api-Key': this.apiKey,
                'Api-Signature': this.hmac(this.encode(auth), this.secret),
                'Api-Nonce': nonce,
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this7.fetch2(path, api, method, params, headers, body);
            if ('errors' in response) throw new ExchangeError(_this7.id + ' ' + _this7.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],84:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, InsufficientFunds, OrderNotFound, OrderNotCached } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class poloniex extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'poloniex',
            'name': 'Poloniex',
            'countries': 'US',
            'rateLimit': 1000, // up to 6 calls per second
            'hasCORS': true,
            // obsolete metainfo interface
            'hasFetchMyTrades': true,
            'hasFetchOrder': true,
            'hasFetchOrders': true,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'hasFetchTickers': true,
            'hasFetchCurrencies': true,
            'hasWithdraw': true,
            'hasFetchOHLCV': true,
            // new metainfo interface
            'has': {
                'fetchOHLCV': true,
                'fetchMyTrades': true,
                'fetchOrder': 'emulated',
                'fetchOrders': 'emulated',
                'fetchOpenOrders': true,
                'fetchClosedOrders': 'emulated',
                'fetchTickers': true,
                'fetchCurrencies': true,
                'withdraw': true
            },
            'timeframes': {
                '5m': 300,
                '15m': 900,
                '30m': 1800,
                '2h': 7200,
                '4h': 14400,
                '1d': 86400
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',
                'api': {
                    'public': 'https://poloniex.com/public',
                    'private': 'https://poloniex.com/tradingApi'
                },
                'www': 'https://poloniex.com',
                'doc': ['https://poloniex.com/support/api/', 'http://pastebin.com/dMX7mZE0'],
                'fees': 'https://poloniex.com/fees'
            },
            'api': {
                'public': {
                    'get': ['return24hVolume', 'returnChartData', 'returnCurrencies', 'returnLoanOrders', 'returnOrderBook', 'returnTicker', 'returnTradeHistory']
                },
                'private': {
                    'post': ['buy', 'cancelLoanOffer', 'cancelOrder', 'closeMarginPosition', 'createLoanOffer', 'generateNewAddress', 'getMarginPosition', 'marginBuy', 'marginSell', 'moveOrder', 'returnActiveLoans', 'returnAvailableAccountBalances', 'returnBalances', 'returnCompleteBalances', 'returnDepositAddresses', 'returnDepositsWithdrawals', 'returnFeeInfo', 'returnLendingHistory', 'returnMarginAccountSummary', 'returnOpenLoanOffers', 'returnOpenOrders', 'returnOrderTrades', 'returnTradableBalances', 'returnTradeHistory', 'sell', 'toggleAutoRenew', 'transferBalance', 'withdraw']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.0015,
                    'taker': 0.0025
                },
                'funding': 0.0
            },
            'limits': {
                'amount': {
                    'min': 0.00000001,
                    'max': 1000000000
                },
                'price': {
                    'min': 0.00000001,
                    'max': 1000000000
                },
                'cost': {
                    'min': 0.00000000,
                    'max': 1000000000
                }
            },
            'precision': {
                'amount': 8,
                'price': 8
            }
        });
    }

    calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {
        let market = this.markets[symbol];
        let key = 'quote';
        let rate = market[takerOrMaker];
        let cost = parseFloat(this.costToPrecision(symbol, amount * rate));
        if (side == 'sell') {
            cost *= price;
        } else {
            key = 'base';
        }
        return {
            'type': takerOrMaker,
            'currency': market[key],
            'rate': rate,
            'cost': parseFloat(this.feeToPrecision(symbol, cost))
        };
    }

    commonCurrencyCode(currency) {
        if (currency == 'BTM') return 'Bitmark';
        if (currency == 'STR') return 'XLM';
        return currency;
    }

    currencyId(currency) {
        if (currency == 'Bitmark') return 'BTM';
        if (currency == 'XLM') return 'STR';
        return currency;
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '5m', since = undefined, limit = undefined) {
        return [ohlcv['date'] * 1000, ohlcv['open'], ohlcv['high'], ohlcv['low'], ohlcv['close'], ohlcv['volume']];
    }

    fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            yield _this.loadMarkets();
            let market = _this.market(symbol);
            if (!since) since = 0;
            let request = {
                'currencyPair': market['id'],
                'period': _this.timeframes[timeframe],
                'start': parseInt(since / 1000)
            };
            if (limit) request['end'] = _this.sum(request['start'], limit * _this.timeframes[timeframe]);
            let response = yield _this.publicGetReturnChartData(_this.extend(request, params));
            return _this.parseOHLCVs(response, market, timeframe, since, limit);
        })();
    }

    fetchMarkets() {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this2.publicGetReturnTicker();
            let keys = Object.keys(markets);
            let result = [];
            for (let p = 0; p < keys.length; p++) {
                let id = keys[p];
                let market = markets[id];
                let [quote, base] = id.split('_');
                base = _this2.commonCurrencyCode(base);
                quote = _this2.commonCurrencyCode(quote);
                let symbol = base + '/' + quote;
                result.push(_this2.extend(_this2.fees['trading'], {
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'active': true,
                    'lot': _this2.limits['amount']['min'],
                    'info': market
                }));
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let balances = yield _this3.privatePostReturnCompleteBalances(_this3.extend({
                'account': 'all'
            }, params));
            let result = { 'info': balances };
            let currencies = Object.keys(balances);
            for (let c = 0; c < currencies.length; c++) {
                let id = currencies[c];
                let balance = balances[id];
                let currency = _this3.commonCurrencyCode(id);
                let account = {
                    'free': parseFloat(balance['available']),
                    'used': parseFloat(balance['onOrders']),
                    'total': 0.0
                };
                account['total'] = _this3.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this3.parseBalance(result);
        })();
    }

    fetchFees(params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let fees = yield _this4.privatePostReturnFeeInfo();
            return {
                'info': fees,
                'maker': parseFloat(fees['makerFee']),
                'taker': parseFloat(fees['takerFee']),
                'withdraw': 0.0
            };
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let orderbook = yield _this5.publicGetReturnOrderBook(_this5.extend({
                'currencyPair': _this5.marketId(symbol)
            }, params));
            return _this5.parseOrderBook(orderbook);
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high24hr']),
            'low': parseFloat(ticker['low24hr']),
            'bid': parseFloat(ticker['highestBid']),
            'ask': parseFloat(ticker['lowestAsk']),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': parseFloat(ticker['last']),
            'change': parseFloat(ticker['percentChange']),
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['quoteVolume']),
            'quoteVolume': parseFloat(ticker['baseVolume']),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let tickers = yield _this6.publicGetReturnTicker(params);
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = _this6.markets_by_id[id];
                let symbol = market['symbol'];
                let ticker = tickers[id];
                result[symbol] = _this6.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchCurrencies(params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let currencies = yield _this7.publicGetReturnCurrencies(params);
            let ids = Object.keys(currencies);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let currency = currencies[id];
                // todo: will need to rethink the fees
                // to add support for multiple withdrawal/deposit methods and
                // differentiated fees for each particular method
                let precision = 8; // default precision, todo: fix "magic constants"
                let code = _this7.commonCurrencyCode(id);
                let active = currency['delisted'] == 0;
                let status = currency['disabled'] ? 'disabled' : 'ok';
                if (status != 'ok') active = false;
                result[code] = {
                    'id': id,
                    'code': code,
                    'info': currency,
                    'name': currency['name'],
                    'active': active,
                    'status': status,
                    'fee': currency['txFee'], // todo: redesign
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'price': {
                            'min': Math.pow(10, -precision),
                            'max': Math.pow(10, precision)
                        },
                        'cost': {
                            'min': undefined,
                            'max': undefined
                        },
                        'withdraw': {
                            'min': currency['txFee'],
                            'max': Math.pow(10, precision)
                        }
                    }
                };
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let market = _this8.market(symbol);
            let tickers = yield _this8.publicGetReturnTicker(params);
            let ticker = tickers[market['id']];
            return _this8.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = this.parse8601(trade['date']);
        let symbol = undefined;
        if (!market && 'currencyPair' in trade) market = this.markets_by_id[trade['currencyPair']];
        if (market) symbol = market['symbol'];
        let side = trade['type'];
        let fee = undefined;
        let cost = this.safeFloat(trade, 'total');
        let amount = parseFloat(trade['amount']);
        if ('fee' in trade) {
            let rate = parseFloat(trade['fee']);
            let feeCost = undefined;
            let currency = undefined;
            if (side == 'buy') {
                currency = market['base'];
                feeCost = amount * rate;
            } else {
                currency = market['quote'];
                if (typeof cost != 'undefined') feeCost = cost * rate;
            }
            fee = {
                'type': undefined,
                'rate': rate,
                'cost': feeCost,
                'currency': currency
            };
        }
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': symbol,
            'id': this.safeString(trade, 'tradeID'),
            'order': this.safeString(trade, 'orderNumber'),
            'type': 'limit',
            'side': side,
            'price': parseFloat(trade['rate']),
            'amount': amount,
            'cost': cost,
            'fee': fee
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let market = _this9.market(symbol);
            let request = {
                'currencyPair': market['id']
            };
            if (since) {
                request['start'] = parseInt(since / 1000);
                request['end'] = _this9.seconds(); // last 50000 trades by default
            }
            let trades = yield _this9.publicGetReturnTradeHistory(_this9.extend(request, params));
            return _this9.parseTrades(trades, market, since, limit);
        })();
    }

    fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let market = undefined;
            if (symbol) market = _this10.market(symbol);
            let pair = market ? market['id'] : 'all';
            let request = { 'currencyPair': pair };
            if (since) {
                request['start'] = parseInt(since / 1000);
                request['end'] = _this10.seconds();
            }
            // limit is disabled (does not really work as expected)
            // if (limit)
            //     request['limit'] = parseInt (limit);
            let response = yield _this10.privatePostReturnTradeHistory(_this10.extend(request, params));
            let result = [];
            if (market) {
                result = _this10.parseTrades(response, market);
            } else {
                if (response) {
                    let ids = Object.keys(response);
                    for (let i = 0; i < ids.length; i++) {
                        let id = ids[i];
                        let market = _this10.markets_by_id[id];
                        let symbol = market['symbol'];
                        let trades = _this10.parseTrades(response[id], market);
                        for (let j = 0; j < trades.length; j++) {
                            result.push(trades[j]);
                        }
                    }
                }
            }
            return _this10.filterBySinceLimit(result, since, limit);
        })();
    }

    parseOrder(order, market = undefined) {
        let timestamp = this.safeInteger(order, 'timestamp');
        if (!timestamp) timestamp = this.parse8601(order['date']);
        let trades = undefined;
        if ('resultingTrades' in order) trades = this.parseTrades(order['resultingTrades'], market);
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        let price = parseFloat(order['price']);
        let cost = this.safeFloat(order, 'total', 0.0);
        let remaining = this.safeFloat(order, 'amount');
        let amount = this.safeFloat(order, 'startingAmount', remaining);
        let filled = amount - remaining;
        return {
            'info': order,
            'id': order['orderNumber'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'status': order['status'],
            'symbol': symbol,
            'type': order['type'],
            'side': order['side'],
            'price': price,
            'cost': cost,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'trades': trades,
            'fee': undefined
        };
    }

    parseOpenOrders(orders, market, result = []) {
        for (let i = 0; i < orders.length; i++) {
            let order = orders[i];
            let extended = this.extend(order, {
                'status': 'open',
                'type': 'limit',
                'side': order['type'],
                'price': order['rate']
            });
            result.push(this.parseOrder(extended, market));
        }
        return result;
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            yield _this11.loadMarkets();
            let market = undefined;
            if (symbol) market = _this11.market(symbol);
            let pair = market ? market['id'] : 'all';
            let response = yield _this11.privatePostReturnOpenOrders(_this11.extend({
                'currencyPair': pair
            }));
            let openOrders = [];
            if (market) {
                openOrders = _this11.parseOpenOrders(response, market, openOrders);
            } else {
                let marketIds = Object.keys(response);
                for (let i = 0; i < marketIds.length; i++) {
                    let marketId = marketIds[i];
                    let orders = response[marketId];
                    let m = _this11.markets_by_id[marketId];
                    openOrders = _this11.parseOpenOrders(orders, m, openOrders);
                }
            }
            for (let j = 0; j < openOrders.length; j++) {
                _this11.orders[openOrders[j]['id']] = openOrders[j];
            }
            let openOrdersIndexedById = _this11.indexBy(openOrders, 'id');
            let cachedOrderIds = Object.keys(_this11.orders);
            let result = [];
            for (let k = 0; k < cachedOrderIds.length; k++) {
                let id = cachedOrderIds[k];
                if (id in openOrdersIndexedById) {
                    _this11.orders[id] = _this11.extend(_this11.orders[id], openOrdersIndexedById[id]);
                } else {
                    let order = _this11.orders[id];
                    if (order['status'] == 'open') {
                        _this11.orders[id] = _this11.extend(order, {
                            'status': 'closed',
                            'cost': order['amount'] * order['price'],
                            'filled': order['amount'],
                            'remaining': 0.0
                        });
                    }
                }
                let order = _this11.orders[id];
                if (market) {
                    if (order['symbol'] == symbol) result.push(order);
                } else {
                    result.push(order);
                }
            }
            return _this11.filterBySinceLimit(result, since, limit);
        })();
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this12 = this;

        return _asyncToGenerator(function* () {
            let since = _this12.safeValue(params, 'since');
            let limit = _this12.safeValue(params, 'limit');
            let request = _this12.omit(params, ['since', 'limit']);
            let orders = yield _this12.fetchOrders(symbol, since, limit, request);
            for (let i = 0; i < orders.length; i++) {
                if (orders[i]['id'] == id) return orders[i];
            }
            throw new OrderNotCached(_this12.id + ' order id ' + id.toString() + ' not found in cache');
        })();
    }

    filterOrdersByStatus(orders, status) {
        let result = [];
        for (let i = 0; i < orders.length; i++) {
            if (orders[i]['status'] == status) result.push(orders[i]);
        }
        return result;
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this13 = this;

        return _asyncToGenerator(function* () {
            let orders = yield _this13.fetchOrders(symbol, since, limit, params);
            return _this13.filterOrdersByStatus(orders, 'open');
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this14 = this;

        return _asyncToGenerator(function* () {
            let orders = yield _this14.fetchOrders(symbol, since, limit, params);
            return _this14.filterOrdersByStatus(orders, 'closed');
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this15 = this;

        return _asyncToGenerator(function* () {
            if (type == 'market') throw new ExchangeError(_this15.id + ' allows limit orders only');
            yield _this15.loadMarkets();
            let method = 'privatePost' + _this15.capitalize(side);
            let market = _this15.market(symbol);
            price = parseFloat(price);
            amount = parseFloat(amount);
            let response = yield _this15[method](_this15.extend({
                'currencyPair': market['id'],
                'rate': _this15.priceToPrecision(symbol, price),
                'amount': _this15.amountToPrecision(symbol, amount)
            }, params));
            let timestamp = _this15.milliseconds();
            let order = _this15.parseOrder(_this15.extend({
                'timestamp': timestamp,
                'status': 'open',
                'type': type,
                'side': side,
                'price': price,
                'amount': amount
            }, response), market);
            let id = order['id'];
            _this15.orders[id] = order;
            return _this15.extend({ 'info': response }, order);
        })();
    }

    editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {
        var _this16 = this;

        return _asyncToGenerator(function* () {
            yield _this16.loadMarkets();
            price = parseFloat(price);
            amount = parseFloat(amount);
            let request = {
                'orderNumber': id,
                'rate': _this16.priceToPrecision(symbol, price),
                'amount': _this16.amountToPrecision(symbol, amount)
            };
            let response = yield _this16.privatePostMoveOrder(_this16.extend(request, params));
            let result = undefined;
            if (id in _this16.orders) {
                _this16.orders[id]['status'] = 'canceled';
                let newid = response['orderNumber'];
                _this16.orders[newid] = _this16.extend(_this16.orders[id], {
                    'id': newid,
                    'price': price,
                    'amount': amount,
                    'status': 'open'
                });
                result = _this16.extend(_this16.orders[newid], { 'info': response });
            } else {
                result = {
                    'info': response,
                    'id': response['orderNumber']
                };
            }
            return result;
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this17 = this;

        return _asyncToGenerator(function* () {
            yield _this17.loadMarkets();
            let response = undefined;
            try {
                response = yield _this17.privatePostCancelOrder(_this17.extend({
                    'orderNumber': id
                }, params));
                if (id in _this17.orders) _this17.orders[id]['status'] = 'canceled';
            } catch (e) {
                if (_this17.last_http_response) {
                    if (_this17.last_http_response.indexOf('Invalid order') >= 0) throw new OrderNotFound(_this17.id + ' cancelOrder() error: ' + _this17.last_http_response);
                }
                throw e;
            }
            return response;
        })();
    }

    fetchOrderStatus(id, symbol = undefined) {
        var _this18 = this;

        return _asyncToGenerator(function* () {
            yield _this18.loadMarkets();
            let orders = yield _this18.fetchOpenOrders(symbol);
            let indexed = _this18.indexBy(orders, 'id');
            return id in indexed ? 'open' : 'closed';
        })();
    }

    fetchOrderTrades(id, symbol = undefined, params = {}) {
        var _this19 = this;

        return _asyncToGenerator(function* () {
            yield _this19.loadMarkets();
            let trades = yield _this19.privatePostReturnOrderTrades(_this19.extend({
                'orderNumber': id
            }, params));
            return _this19.parseTrades(trades);
        })();
    }

    createDepositAddress(currency, params = {}) {
        var _this20 = this;

        return _asyncToGenerator(function* () {
            let currencyId = _this20.currencyId(currency);
            let response = yield _this20.privatePostGenerateNewAddress({
                'currency': currencyId
            });
            let address = undefined;
            if (response['success'] == 1) address = _this20.safeString(response, 'response');
            if (!address) throw new ExchangeError(_this20.id + ' createDepositAddress failed: ' + _this20.last_http_response);
            return {
                'currency': currency,
                'address': address,
                'status': 'ok',
                'info': response
            };
        })();
    }

    fetchDepositAddress(currency, params = {}) {
        var _this21 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this21.privatePostReturnDepositAddresses();
            let currencyId = _this21.currencyId(currency);
            let address = _this21.safeString(response, currencyId);
            let status = address ? 'ok' : 'none';
            return {
                'currency': currency,
                'address': address,
                'status': status,
                'info': response
            };
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this22 = this;

        return _asyncToGenerator(function* () {
            yield _this22.loadMarkets();
            let currencyId = _this22.currencyId(currency);
            let result = yield _this22.privatePostWithdraw(_this22.extend({
                'currency': currencyId,
                'amount': amount,
                'address': address
            }, params));
            return {
                'info': result,
                'id': result['response']
            };
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        let query = this.extend({ 'command': path }, params);
        if (api == 'public') {
            url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            query['nonce'] = this.nonce();
            body = this.urlencode(query);
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Key': this.apiKey,
                'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this23 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this23.fetch2(path, api, method, params, headers, body);
            if ('error' in response) {
                let error = _this23.id + ' ' + _this23.json(response);
                let failed = response['error'].indexOf('Not enough') >= 0;
                if (failed) throw new InsufficientFunds(error);
                throw new ExchangeError(error);
            }
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],85:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, OrderNotFound, InvalidOrder, InsufficientFunds } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class qryptos extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'qryptos',
            'name': 'QRYPTOS',
            'countries': ['CN', 'TW'],
            'version': '2',
            'rateLimit': 1000,
            'hasFetchTickers': true,
            'hasCORS': false,
            'has': {
                'fetchOrder': true,
                'fetchOrders': true,
                'fetchOpenOrders': true,
                'fetchClosedOrders': true
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/30953915-b1611dc0-a436-11e7-8947-c95bd5a42086.jpg',
                'api': 'https://api.qryptos.com',
                'www': 'https://www.qryptos.com',
                'doc': 'https://developers.quoine.com'
            },
            'api': {
                'public': {
                    'get': ['products', 'products/{id}', 'products/{id}/price_levels', 'executions', 'ir_ladders/{currency}']
                },
                'private': {
                    'get': ['accounts/balance', 'crypto_accounts', 'executions/me', 'fiat_accounts', 'loan_bids', 'loans', 'orders', 'orders/{id}', 'orders/{id}/trades', 'trades', 'trades/{id}/loans', 'trading_accounts', 'trading_accounts/{id}'],
                    'post': ['fiat_accounts', 'loan_bids', 'orders'],
                    'put': ['loan_bids/{id}/close', 'loans/{id}', 'orders/{id}', 'orders/{id}/cancel', 'trades/{id}', 'trades/{id}/close', 'trades/close_all', 'trading_accounts/{id}']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetProducts();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['id'];
                let base = market['base_currency'];
                let quote = market['quoted_currency'];
                let symbol = base + '/' + quote;
                let maker = _this.safeFloat(market, 'maker_fee');
                let taker = _this.safeFloat(market, 'taker_fee');
                let active = !market['disabled'];
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'maker': maker,
                    'taker': taker,
                    'active': active,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let balances = yield _this2.privateGetAccountsBalance();
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let total = parseFloat(balance['balance']);
                let account = {
                    'free': total,
                    'used': 0.0,
                    'total': total
                };
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetProductsIdPriceLevels(_this3.extend({
                'id': _this3.marketId(symbol)
            }, params));
            return _this3.parseOrderBook(orderbook, undefined, 'buy_price_levels', 'sell_price_levels');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let last = undefined;
        if ('last_traded_price' in ticker) {
            if (ticker['last_traded_price']) {
                let length = ticker['last_traded_price'].length;
                if (length > 0) last = parseFloat(ticker['last_traded_price']);
            }
        }
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'high_market_ask'),
            'low': this.safeFloat(ticker, 'low_market_bid'),
            'bid': this.safeFloat(ticker, 'market_bid'),
            'ask': this.safeFloat(ticker, 'market_ask'),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': last,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'volume_24h'),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let tickers = yield _this4.publicGetProducts(params);
            let result = {};
            for (let t = 0; t < tickers.length; t++) {
                let ticker = tickers[t];
                let base = ticker['base_currency'];
                let quote = ticker['quoted_currency'];
                let symbol = base + '/' + quote;
                let market = _this4.markets[symbol];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let ticker = yield _this5.publicGetProductsId(_this5.extend({
                'id': market['id']
            }, params));
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['created_at'] * 1000;
        return {
            'info': trade,
            'id': trade['id'].toString(),
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['taker_side'],
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['quantity'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let request = {
                'product_id': market['id']
            };
            if (limit) request['limit'] = limit;
            let response = yield _this6.publicGetExecutions(_this6.extend(request, params));
            return _this6.parseTrades(response['models'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let order = {
                'order_type': type,
                'product_id': _this7.marketId(symbol),
                'side': side,
                'quantity': amount
            };
            if (type == 'limit') order['price'] = price;
            let response = yield _this7.privatePostOrders(_this7.extend({
                'order': order
            }, params));
            return _this7.parseOrder(response);
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let result = yield _this8.privatePutOrdersIdCancel(_this8.extend({
                'id': id
            }, params));
            let order = _this8.parseOrder(result);
            if (order['status'] == 'closed') throw new OrderNotFound(_this8.id + ' ' + _this8.json(order));
            return order;
        })();
    }

    parseOrder(order) {
        let timestamp = order['created_at'] * 1000;
        let marketId = order['product_id'];
        let market = this.marketsById[marketId];
        let status = undefined;
        if ('status' in order) {
            if (order['status'] == 'live') {
                status = 'open';
            } else if (order['status'] == 'filled') {
                status = 'closed';
            } else if (order['status'] == 'cancelled') {
                // 'll' intended
                status = 'canceled';
            }
        }
        let amount = parseFloat(order['quantity']);
        let filled = parseFloat(order['filled_quantity']);
        let symbol = undefined;
        if (market) {
            symbol = market['symbol'];
        }
        return {
            'id': order['id'],
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'type': order['order_type'],
            'status': status,
            'symbol': symbol,
            'side': order['side'],
            'price': order['price'],
            'amount': amount,
            'filled': filled,
            'remaining': amount - filled,
            'trades': undefined,
            'fee': {
                'currency': undefined,
                'cost': parseFloat(order['order_fee'])
            },
            'info': order
        };
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let order = yield _this9.privateGetOrdersId(_this9.extend({
                'id': id
            }, params));
            return _this9.parseOrder(order);
        })();
    }

    fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            let market = undefined;
            let request = {};
            if (symbol) {
                market = _this10.market(symbol);
                request['product_id'] = market['id'];
            }
            let status = params['status'];
            if (status == 'open') {
                request['status'] = 'live';
            } else if (status == 'closed') {
                request['status'] = 'filled';
            } else if (status == 'canceled') {
                request['status'] = 'cancelled';
            }
            let result = yield _this10.privateGetOrders(request);
            let orders = result['models'];
            return _this10.parseOrders(orders, market, since, limit);
        })();
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        return this.fetchOrders(symbol, since, limit, this.extend({ 'status': 'open' }, params));
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        return this.fetchOrders(symbol, since, limit, this.extend({ 'status': 'closed' }, params));
    }

    handleErrors(code, reason, url, method, headers, body) {
        let response = undefined;
        if (code == 200 || code == 404 || code == 422) {
            if (body[0] == '{' || body[0] == '[') {
                response = JSON.parse(body);
            } else {
                // if not a JSON response
                throw new ExchangeError(this.id + ' returned a non-JSON reply: ' + body);
            }
        }
        if (code == 404) {
            if ('message' in response) {
                if (response['message'] == 'Order not found') {
                    throw new OrderNotFound(this.id + ' ' + body);
                }
            }
        } else if (code == 422) {
            if ('errors' in response) {
                let errors = response['errors'];
                if ('user' in errors) {
                    let messages = errors['user'];
                    if (messages.indexOf('not_enough_free_balance') >= 0) {
                        throw new InsufficientFunds(this.id + ' ' + body);
                    }
                } else if ('quantity' in errors) {
                    let messages = errors['quantity'];
                    if (messages.indexOf('less_than_order_size') >= 0) {
                        throw new InvalidOrder(this.id + ' ' + body);
                    }
                }
            }
        }
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        headers = {
            'X-Quoine-API-Version': this.version,
            'Content-Type': 'application/json'
        };
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            if (method == 'GET') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else if (Object.keys(query).length) {
                body = this.json(query);
            }
            let nonce = this.nonce();
            let request = {
                'path': url,
                'nonce': nonce,
                'token_id': this.apiKey,
                'iat': Math.floor(nonce / 1000) // issued at
            };
            headers['X-Quoine-Auth'] = this.jwt(request, this.secret);
        }
        url = this.urls['api'] + url;
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],86:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, AuthenticationError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class quadrigacx extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'quadrigacx',
            'name': 'QuadrigaCX',
            'countries': 'CA',
            'rateLimit': 1000,
            'version': 'v2',
            'hasCORS': true,
            // obsolete metainfo interface
            'hasWithdraw': true,
            // new metainfo interface
            'has': {
                'withdraw': true
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766825-98a6d0de-5ee7-11e7-9fa4-38e11a2c6f52.jpg',
                'api': 'https://api.quadrigacx.com',
                'www': 'https://www.quadrigacx.com',
                'doc': 'https://www.quadrigacx.com/api_info'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true
            },
            'api': {
                'public': {
                    'get': ['order_book', 'ticker', 'transactions']
                },
                'private': {
                    'post': ['balance', 'bitcoin_deposit_address', 'bitcoin_withdrawal', 'buy', 'cancel_order', 'ether_deposit_address', 'ether_withdrawal', 'lookup_order', 'open_orders', 'sell', 'user_transactions']
                }
            },
            'markets': {
                'BTC/CAD': { 'id': 'btc_cad', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 },
                'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'maker': 0.005, 'taker': 0.005 },
                'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.002, 'taker': 0.002 },
                'ETH/CAD': { 'id': 'eth_cad', 'symbol': 'ETH/CAD', 'base': 'ETH', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 },
                'LTC/CAD': { 'id': 'ltc_cad', 'symbol': 'LTC/CAD', 'base': 'LTC', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 },
                'BCH/CAD': { 'id': 'btc_cad', 'symbol': 'BCH/CAD', 'base': 'BCH', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 },
                'BTG/CAD': { 'id': 'btg_cad', 'symbol': 'BTG/CAD', 'base': 'BTG', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 }
            }
        });
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            let balances = yield _this.privatePostBalance();
            let result = { 'info': balances };
            let currencies = Object.keys(_this.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let lowercase = currency.toLowerCase();
                let account = {
                    'free': parseFloat(balances[lowercase + '_available']),
                    'used': parseFloat(balances[lowercase + '_reserved']),
                    'total': parseFloat(balances[lowercase + '_balance'])
                };
                result[currency] = account;
            }
            return _this.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let orderbook = yield _this2.publicGetOrderBook(_this2.extend({
                'book': _this2.marketId(symbol)
            }, params));
            let timestamp = parseInt(orderbook['timestamp']) * 1000;
            return _this2.parseOrderBook(orderbook, timestamp);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let ticker = yield _this3.publicGetTicker(_this3.extend({
                'book': _this3.marketId(symbol)
            }, params));
            let timestamp = parseInt(ticker['timestamp']) * 1000;
            let vwap = parseFloat(ticker['vwap']);
            let baseVolume = parseFloat(ticker['volume']);
            let quoteVolume = baseVolume * vwap;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': vwap,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = parseInt(trade['date']) * 1000;
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': trade['tid'].toString(),
            'order': undefined,
            'type': undefined,
            'side': trade['side'],
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            let market = _this4.market(symbol);
            let response = yield _this4.publicGetTransactions(_this4.extend({
                'book': market['id']
            }, params));
            return _this4.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let method = 'privatePost' + _this5.capitalize(side);
            let order = {
                'amount': amount,
                'book': _this5.marketId(symbol)
            };
            if (type == 'limit') order['price'] = price;
            let response = yield _this5[method](_this5.extend(order, params));
            return {
                'info': response,
                'id': response['id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            return yield _this6.privatePostCancelOrder(_this6.extend({
                'id': id
            }, params));
        })();
    }

    fetchDepositAddress(currency, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            let method = 'privatePost' + _this7.getCurrencyName(currency) + 'DepositAddress';
            let response = yield _this7[method](params);
            let address = undefined;
            let status = undefined;
            // [E|e]rror
            if (response.indexOf('rror') >= 0) {
                status = 'error';
            } else {
                address = response;
                status = 'ok';
            }
            return {
                'currency': currency,
                'address': address,
                'status': status,
                'info': _this7.last_http_response
            };
        })();
    }

    getCurrencyName(currency) {
        if (currency == 'ETH') return 'Ether';
        if (currency == 'BTC') return 'Bitcoin';
    }

    withdraw(currency, amount, address, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let request = {
                'amount': amount,
                'address': address
            };
            let method = 'privatePost' + _this8.getCurrencyName(currency) + 'Withdrawal';
            let response = yield _this8[method](_this8.extend(request, params));
            return {
                'info': response,
                'id': undefined
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + path;
        if (api == 'public') {
            url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            let request = [nonce.toString(), this.uid, this.apiKey].join('');
            let signature = this.hmac(this.encode(request), this.encode(this.secret));
            let query = this.extend({
                'key': this.apiKey,
                'nonce': nonce,
                'signature': signature
            }, params);
            body = this.json(query);
            headers = {
                'Content-Type': 'application/json'
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.fetch2(path, api, method, params, headers, body);
            if (typeof response == 'string') return response;
            if ('error' in response) throw new ExchangeError(_this9.id + ' ' + _this9.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],87:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const qryptos = require('./qryptos.js');

// ---------------------------------------------------------------------------

module.exports = class quoine extends qryptos {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'quoine',
            'name': 'QUOINE',
            'countries': ['JP', 'SG', 'VN'],
            'version': '2',
            'rateLimit': 1000,
            'hasFetchTickers': true,
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766844-9615a4e8-5ee8-11e7-8814-fcd004db8cdd.jpg',
                'api': 'https://api.quoine.com',
                'www': 'https://www.quoine.com',
                'doc': 'https://developers.quoine.com'
            }
        });
    }
};
},{"./qryptos.js":85}],88:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');

//  ---------------------------------------------------------------------------

module.exports = class southxchange extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'southxchange',
            'name': 'SouthXchange',
            'countries': 'AR', // Argentina
            'rateLimit': 1000,
            'hasFetchTickers': true,
            'hasCORS': false,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg',
                'api': 'https://www.southxchange.com/api',
                'www': 'https://www.southxchange.com',
                'doc': 'https://www.southxchange.com/Home/Api'
            },
            'api': {
                'public': {
                    'get': ['markets', 'price/{symbol}', 'prices', 'book/{symbol}', 'trades/{symbol}']
                },
                'private': {
                    'post': ['cancelMarketOrders', 'cancelOrder', 'generatenewaddress', 'listOrders', 'listBalances', 'placeOrder', 'withdraw']
                }
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'maker': 0.2 / 100,
                    'taker': 0.2 / 100
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetMarkets();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let base = market[0];
                let quote = market[1];
                let symbol = base + '/' + quote;
                let id = symbol;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let balances = yield _this2.privatePostListBalances();
            if (!balances) throw new ExchangeError(_this2.id + ' fetchBalance got an unrecognized response');
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['Currency'];
                let uppercase = currency.toUpperCase();
                let free = parseFloat(balance['Available']);
                let used = parseFloat(balance['Unconfirmed']);
                let total = _this2.sum(free, used);
                let account = {
                    'free': free,
                    'used': used,
                    'total': total
                };
                result[uppercase] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetBookSymbol(_this3.extend({
                'symbol': _this3.marketId(symbol)
            }, params));
            return _this3.parseOrderBook(orderbook, undefined, 'BuyOrders', 'SellOrders', 'Price', 'Amount');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': undefined,
            'low': undefined,
            'bid': this.safeFloat(ticker, 'Bid'),
            'ask': this.safeFloat(ticker, 'Ask'),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': this.safeFloat(ticker, 'Last'),
            'change': this.safeFloat(ticker, 'Variation24Hr'),
            'percentage': undefined,
            'average': undefined,
            'baseVolume': this.safeFloat(ticker, 'Volume24Hr'),
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.publicGetPrices(params);
            let tickers = _this4.indexBy(response, 'Market');
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let symbol = id;
                let market = undefined;
                if (id in _this4.markets_by_id) {
                    market = _this4.markets_by_id[id];
                    symbol = market['symbol'];
                }
                let ticker = tickers[id];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let ticker = yield _this5.publicGetPriceSymbol(_this5.extend({
                'symbol': market['id']
            }, params));
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market) {
        let timestamp = trade['At'] * 1000;
        return {
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'id': undefined,
            'order': undefined,
            'type': undefined,
            'side': trade['Type'],
            'price': trade['Price'],
            'amount': trade['Amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetTradesSymbol(_this6.extend({
                'symbol': market['id']
            }, params));
            return _this6.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            let order = {
                'listingCurrency': market['base'],
                'referenceCurrency': market['quote'],
                'type': side,
                'amount': amount
            };
            if (type == 'limit') order['limitPrice'] = price;
            let response = yield _this7.privatePostPlaceOrder(_this7.extend(order, params));
            return {
                'info': response,
                'id': response.toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            return yield _this8.privatePostCancelOrder(_this8.extend({
                'orderCode': id
            }, params));
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.privatePostWithdraw(_this9.extend({
                'currency': currency,
                'address': address,
                'amount': amount
            }, params));
            return {
                'info': response,
                'id': undefined
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            query = this.extend({
                'key': this.apiKey,
                'nonce': nonce
            }, query);
            body = this.json(query);
            headers = {
                'Content-Type': 'application/json',
                'Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this10.fetch2(path, api, method, params, headers, body);
            return response;
        })();
    }
};
},{"./base/Exchange":8}],89:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const foxbit = require('./foxbit.js');

// ---------------------------------------------------------------------------

module.exports = class surbitcoin extends foxbit {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'surbitcoin',
            'name': 'SurBitcoin',
            'countries': 'VE',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27991511-f0a50194-6481-11e7-99b5-8f02932424cc.jpg',
                'api': {
                    'public': 'https://api.blinktrade.com/api',
                    'private': 'https://api.blinktrade.com/tapi'
                },
                'www': 'https://surbitcoin.com',
                'doc': 'https://blinktrade.com/docs'
            }
        });
    }
};
},{"./foxbit.js":54}],90:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class therock extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'therock',
            'name': 'TheRockTrading',
            'countries': 'MT',
            'rateLimit': 1000,
            'version': 'v1',
            'hasCORS': false,
            'hasFetchTickers': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg',
                'api': 'https://api.therocktrading.com',
                'www': 'https://therocktrading.com',
                'doc': ['https://api.therocktrading.com/doc/v1/index.html', 'https://api.therocktrading.com/doc/']
            },
            'api': {
                'public': {
                    'get': ['funds/{id}/orderbook', 'funds/{id}/ticker', 'funds/{id}/trades', 'funds/tickers']
                },
                'private': {
                    'get': ['balances', 'balances/{id}', 'discounts', 'discounts/{id}', 'funds', 'funds/{id}', 'funds/{id}/trades', 'funds/{fund_id}/orders', 'funds/{fund_id}/orders/{id}', 'funds/{fund_id}/position_balances', 'funds/{fund_id}/positions', 'funds/{fund_id}/positions/{id}', 'transactions', 'transactions/{id}', 'withdraw_limits/{id}', 'withdraw_limits'],
                    'post': ['atms/withdraw', 'funds/{fund_id}/orders'],
                    'delete': ['funds/{fund_id}/orders/{id}', 'funds/{fund_id}/orders/remove_all']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.02 / 100,
                    'taker': 0.2 / 100
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetFundsTickers();
            let result = [];
            for (let p = 0; p < markets['tickers'].length; p++) {
                let market = markets['tickers'][p];
                let id = market['fund_id'];
                let base = id.slice(0, 3);
                let quote = id.slice(3, 6);
                let symbol = base + '/' + quote;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetBalances();
            let balances = response['balances'];
            let result = { 'info': response };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let free = balance['trading_balance'];
                let total = balance['balance'];
                let used = total - free;
                let account = {
                    'free': free,
                    'used': used,
                    'total': total
                };
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetFundsIdOrderbook(_this3.extend({
                'id': _this3.marketId(symbol)
            }, params));
            let timestamp = _this3.parse8601(orderbook['date']);
            return _this3.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = this.parse8601(ticker['date']);
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': parseFloat(ticker['high']),
            'low': parseFloat(ticker['low']),
            'bid': parseFloat(ticker['bid']),
            'ask': parseFloat(ticker['ask']),
            'vwap': undefined,
            'open': parseFloat(ticker['open']),
            'close': parseFloat(ticker['close']),
            'first': undefined,
            'last': parseFloat(ticker['last']),
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': parseFloat(ticker['volume_traded']),
            'quoteVolume': parseFloat(ticker['volume']),
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.publicGetFundsTickers(params);
            let tickers = _this4.indexBy(response['tickers'], 'fund_id');
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = _this4.markets_by_id[id];
                let symbol = market['symbol'];
                let ticker = tickers[id];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let ticker = yield _this5.publicGetFundsIdTicker(_this5.extend({
                'id': market['id']
            }, params));
            return _this5.parseTicker(ticker, market);
        })();
    }

    parseTrade(trade, market = undefined) {
        if (!market) market = this.markets_by_id[trade['fund_id']];
        let timestamp = this.parse8601(trade['date']);
        return {
            'info': trade,
            'id': trade['id'].toString(),
            'order': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': trade['side'],
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let response = yield _this6.publicGetFundsIdTrades(_this6.extend({
                'id': market['id']
            }, params));
            return _this6.parseTrades(response['trades'], market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            if (type == 'market') throw new ExchangeError(_this7.id + ' allows limit orders only');
            let response = yield _this7.privatePostFundsFundIdOrders(_this7.extend({
                'fund_id': _this7.marketId(symbol),
                'side': side,
                'amount': amount,
                'price': price
            }, params));
            return {
                'info': response,
                'id': response['id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            return yield _this8.privateDeleteFundsFundIdOrdersId(_this8.extend({
                'id': id
            }, params));
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'private') {
            this.checkRequiredCredentials();
            let nonce = this.nonce().toString();
            let auth = nonce + url;
            headers = {
                'X-TRT-KEY': this.apiKey,
                'X-TRT-NONCE': nonce,
                'X-TRT-SIGN': this.hmac(this.encode(auth), this.encode(this.secret), 'sha512')
            };
            if (Object.keys(query).length) {
                body = this.json(query);
                headers['Content-Type'] = 'application/json';
            }
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.fetch2(path, api, method, params, headers, body);
            if ('errors' in response) throw new ExchangeError(_this9.id + ' ' + _this9.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],91:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const liqui = require('./liqui.js');

// ---------------------------------------------------------------------------

module.exports = class tidex extends liqui {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'tidex',
            'name': 'Tidex',
            'countries': 'UK',
            'rateLimit': 2000,
            'version': '3',
            // 'hasCORS': false,
            // 'hasFetchTickers': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/30781780-03149dc4-a12e-11e7-82bb-313b269d24d4.jpg',
                'api': {
                    'public': 'https://api.tidex.com/api',
                    'private': 'https://api.tidex.com/tapi'
                },
                'www': 'https://tidex.com',
                'doc': 'https://tidex.com/public-api',
                'fees': 'https://tidex.com/pairs-spec'
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'taker': 0.1 / 100,
                    'maker': 0.1 / 100
                },
                'funding': {
                    'tierBased': false,
                    'percentage': false,
                    'withdraw': {
                        'BTC': 0.0012,
                        'ETH': 0.01,
                        'LTC': 0.001,
                        'DOGE': 0.01,
                        'ICN': 2,
                        'DASH': 0.002,
                        'GNO': 2,
                        'EOS': 2,
                        'BCH': 2,
                        'USDT': 0
                    },
                    'deposit': {
                        'BTC': 0,
                        'ETH': 0,
                        'LTC': 0,
                        'DOGE': 0,
                        'ICN': 0,
                        'DASH': 0,
                        'GNO': 0,
                        'EOS': 0,
                        'BCH': 0,
                        'USDT': 0
                    }
                }
            }
        });
    }
};
},{"./liqui.js":74}],92:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const foxbit = require('./foxbit.js');

// ---------------------------------------------------------------------------

module.exports = class urdubit extends foxbit {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'urdubit',
            'name': 'UrduBit',
            'countries': 'PK',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27991453-156bf3ae-6480-11e7-82eb-7295fe1b5bb4.jpg',
                'api': {
                    'public': 'https://api.blinktrade.com/api',
                    'private': 'https://api.blinktrade.com/tapi'
                },
                'www': 'https://urdubit.com',
                'doc': 'https://blinktrade.com/docs'
            }
        });
    }
};
},{"./foxbit.js":54}],93:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');

// ---------------------------------------------------------------------------

module.exports = class vaultoro extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'vaultoro',
            'name': 'Vaultoro',
            'countries': 'CH',
            'rateLimit': 1000,
            'version': '1',
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg',
                'api': 'https://api.vaultoro.com',
                'www': 'https://www.vaultoro.com',
                'doc': 'https://api.vaultoro.com'
            },
            'api': {
                'public': {
                    'get': ['bidandask', 'buyorders', 'latest', 'latesttrades', 'markets', 'orderbook', 'sellorders', 'transactions/day', 'transactions/hour', 'transactions/month']
                },
                'private': {
                    'get': ['balance', 'mytrades', 'orders'],
                    'post': ['buy/{symbol}/{type}', 'cancel/{id}', 'sell/{symbol}/{type}', 'withdraw']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let result = [];
            let markets = yield _this.publicGetMarkets();
            let market = markets['data'];
            let base = market['BaseCurrency'];
            let quote = market['MarketCurrency'];
            let symbol = base + '/' + quote;
            let baseId = base;
            let quoteId = quote;
            let id = market['MarketName'];
            result.push({
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'info': market
            });
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privateGetBalance();
            let balances = response['data'];
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency_code'];
                let uppercase = currency.toUpperCase();
                let free = balance['cash'];
                let used = balance['reserved'];
                let total = _this2.sum(free, used);
                let account = {
                    'free': free,
                    'used': used,
                    'total': total
                };
                result[uppercase] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let response = yield _this3.publicGetOrderbook(params);
            let orderbook = {
                'bids': response['data'][0]['b'],
                'asks': response['data'][1]['s']
            };
            let result = _this3.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'Gold_Price', 'Gold_Amount');
            result['bids'] = _this3.sortBy(result['bids'], 0, true);
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let quote = yield _this4.publicGetBidandask(params);
            let bidsLength = quote['bids'].length;
            let bid = quote['bids'][bidsLength - 1];
            let ask = quote['asks'][0];
            let response = yield _this4.publicGetMarkets(params);
            let ticker = response['data'];
            let timestamp = _this4.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'high': parseFloat(ticker['24hHigh']),
                'low': parseFloat(ticker['24hLow']),
                'bid': bid[0],
                'ask': ask[0],
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['LastPrice']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['24hVolume']),
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market) {
        let timestamp = this.parse8601(trade['Time']);
        return {
            'id': undefined,
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'order': undefined,
            'type': undefined,
            'side': undefined,
            'price': trade['Gold_Price'],
            'amount': trade['Gold_Amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetTransactionsDay(params);
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            let method = 'privatePost' + _this6.capitalize(side) + 'SymbolType';
            let response = yield _this6[method](_this6.extend({
                'symbol': market['quoteId'].toLowerCase(),
                'type': type,
                'gld': amount,
                'price': price || 1
            }, params));
            return {
                'info': response,
                'id': response['data']['Order_ID']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            return yield _this7.privatePostCancelId(_this7.extend({
                'id': id
            }, params));
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/';
        if (api == 'public') {
            url += path;
        } else {
            this.checkRequiredCredentials();
            let nonce = this.nonce();
            url += this.version + '/' + this.implodeParams(path, params);
            let query = this.extend({
                'nonce': nonce,
                'apikey': this.apiKey
            }, this.omit(params, this.extractParams(path)));
            url += '?' + this.urlencode(query);
            headers = {
                'Content-Type': 'application/json',
                'X-Signature': this.hmac(this.encode(url), this.encode(this.secret))
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8}],94:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const foxbit = require('./foxbit.js');

// ---------------------------------------------------------------------------

module.exports = class vbtc extends foxbit {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'vbtc',
            'name': 'VBTC',
            'countries': 'VN',
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27991481-1f53d1d8-6481-11e7-884e-21d17e7939db.jpg',
                'api': {
                    'public': 'https://api.blinktrade.com/api',
                    'private': 'https://api.blinktrade.com/tapi'
                },
                'www': 'https://vbtc.exchange',
                'doc': 'https://blinktrade.com/docs'
            }
        });
    }
};
},{"./foxbit.js":54}],95:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class virwox extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'virwox',
            'name': 'VirWoX',
            'countries': ['AT', 'EU'],
            'rateLimit': 1000,
            'hasCORS': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766894-6da9d360-5eea-11e7-90aa-41f2711b7405.jpg',
                'api': {
                    'public': 'http://api.virwox.com/api/json.php',
                    'private': 'https://www.virwox.com/api/trading.php'
                },
                'www': 'https://www.virwox.com',
                'doc': 'https://www.virwox.com/developers.php'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': false,
                'login': true,
                'password': true
            },
            'api': {
                'public': {
                    'get': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics'],
                    'post': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics']
                },
                'private': {
                    'get': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder'],
                    'post': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetInstruments();
            let keys = Object.keys(markets['result']);
            let result = [];
            for (let p = 0; p < keys.length; p++) {
                let market = markets['result'][keys[p]];
                let id = market['instrumentID'];
                let symbol = market['symbol'];
                let base = market['longCurrency'];
                let quote = market['shortCurrency'];
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostGetBalances();
            let balances = response['result']['accountList'];
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['currency'];
                let total = balance['balance'];
                let account = {
                    'free': total,
                    'used': 0.0,
                    'total': total
                };
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchMarketPrice(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let response = yield _this3.publicPostGetBestPrices(_this3.extend({
                'symbols': [symbol]
            }, params));
            let result = response['result'];
            return {
                'bid': _this3.safeFloat(result[0], 'bestBuyPrice'),
                'ask': _this3.safeFloat(result[0], 'bestSellPrice')
            };
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.publicPostGetMarketDepth(_this4.extend({
                'symbols': [symbol],
                'buyDepth': 100,
                'sellDepth': 100
            }, params));
            let orderbook = response['result'][0];
            return _this4.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'price', 'volume');
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let end = _this5.milliseconds();
            let start = end - 86400000;
            let response = yield _this5.publicGetTradedPriceVolume(_this5.extend({
                'instrument': symbol,
                'endDate': _this5.YmdHMS(end),
                'startDate': _this5.YmdHMS(start),
                'HLOC': 1
            }, params));
            let marketPrice = yield _this5.fetchMarketPrice(symbol, params);
            let tickers = response['result']['priceVolumeList'];
            let keys = Object.keys(tickers);
            let length = keys.length;
            let lastKey = keys[length - 1];
            let ticker = tickers[lastKey];
            let timestamp = _this5.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this5.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': marketPrice['bid'],
                'ask': marketPrice['ask'],
                'vwap': undefined,
                'open': parseFloat(ticker['open']),
                'close': parseFloat(ticker['close']),
                'first': undefined,
                'last': undefined,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['longVolume']),
                'quoteVolume': parseFloat(ticker['shortVolume']),
                'info': ticker
            };
        })();
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let market = _this6.market(symbol);
            return yield _this6.publicGetRawTradeData(_this6.extend({
                'instrument': market['id'],
                'timespan': 3600
            }, params));
        })();
    }

    createOrder(market, type, side, amount, price = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let order = {
                'instrument': _this7.symbol(market),
                'orderType': side.toUpperCase(),
                'amount': amount
            };
            if (type == 'limit') order['price'] = price;
            let response = yield _this7.privatePostPlaceOrder(_this7.extend(order, params));
            return {
                'info': response,
                'id': response['orderID'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            return yield _this8.privatePostCancelOrder(_this8.extend({
                'orderID': id
            }, params));
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        let auth = {};
        if (api == 'private') {
            this.checkRequiredCredentials();
            auth['key'] = this.apiKey;
            auth['user'] = this.login;
            auth['pass'] = this.password;
        }
        let nonce = this.nonce();
        if (method == 'GET') {
            url += '?' + this.urlencode(this.extend({
                'method': path,
                'id': nonce
            }, auth, params));
        } else {
            headers = { 'Content-Type': 'application/json' };
            body = this.json({
                'method': path,
                'params': this.extend(auth, params),
                'id': nonce
            });
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.fetch2(path, api, method, params, headers, body);
            if ('error' in response) if (response['error']) throw new ExchangeError(_this9.id + ' ' + _this9.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],96:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const liqui = require('./liqui.js');
const { ExchangeError, InsufficientFunds, OrderNotFound, DDoSProtection } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class wex extends liqui {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'wex',
            'name': 'WEX',
            'countries': 'NZ', // New Zealand
            'version': '3',
            'hasFetchTickers': true,
            'hasCORS': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/30652751-d74ec8f8-9e31-11e7-98c5-71469fcef03e.jpg',
                'api': {
                    'public': 'https://wex.nz/api',
                    'private': 'https://wex.nz/tapi'
                },
                'www': 'https://wex.nz',
                'doc': ['https://wex.nz/api/3/docs', 'https://wex.nz/tapi/docs']
            },
            'api': {
                'public': {
                    'get': ['info', 'ticker/{pair}', 'depth/{pair}', 'trades/{pair}']
                },
                'private': {
                    'post': ['getInfo', 'Trade', 'ActiveOrders', 'OrderInfo', 'CancelOrder', 'TradeHistory', 'TransHistory', 'CoinDepositAddress', 'WithdrawCoin', 'CreateCoupon', 'RedeemCoupon']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.2 / 100,
                    'taker': 0.2 / 100
                }
            }
        });
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = ticker['updated'] * 1000;
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': this.safeFloat(ticker, 'high'),
            'low': this.safeFloat(ticker, 'low'),
            'bid': this.safeFloat(ticker, 'sell'),
            'ask': this.safeFloat(ticker, 'buy'),
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': this.safeFloat(ticker, 'last'),
            'change': undefined,
            'percentage': undefined,
            'average': this.safeFloat(ticker, 'avg'),
            'baseVolume': this.safeFloat(ticker, 'vol_cur'),
            'quoteVolume': this.safeFloat(ticker, 'vol'),
            'info': ticker
        };
    }

    handleErrors(code, reason, url, method, headers, body) {
        if (code == 200) {
            if (body[0] != '{') {
                // response is not JSON
                throw new ExchangeError(this.id + ' returned a non-JSON reply: ' + body);
            }
            let response = JSON.parse(body);
            if ('success' in response) {
                if (!response['success']) {
                    let error = this.safeValue(response, 'error');
                    if (!error) {
                        throw new ExchangeError(this.id + ' returned a malformed error: ' + body);
                    } else if (error == 'bad status') {
                        throw new OrderNotFound(this.id + ' ' + error);
                    } else if (error.indexOf('It is not enough') >= 0) {
                        throw new InsufficientFunds(this.id + ' ' + error);
                    } else if (error == 'Requests too often') {
                        throw new DDoSProtection(this.id + ' ' + error);
                    } else if (error == 'not available') {
                        throw new DDoSProtection(this.id + ' ' + error);
                    } else if (error == 'external service unavailable') {
                        throw new DDoSProtection(this.id + ' ' + error);
                        // that's what fetchOpenOrders return if no open orders (fix for #489)
                    } else if (error != 'no orders') {
                        throw new ExchangeError(this.id + ' ' + error);
                    }
                }
            }
        }
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        return this.fetch2(path, api, method, params, headers, body);
    }
};
},{"./base/errors":10,"./liqui.js":74}],97:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError, NotSupported, AuthenticationError } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class xbtce extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'xbtce',
            'name': 'xBTCe',
            'countries': 'RU',
            'rateLimit': 2000, // responses are cached every 2 seconds
            'version': 'v1',
            'hasPublicAPI': false,
            'hasCORS': false,
            'hasFetchTickers': true,
            'hasFetchOHLCV': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg',
                'api': 'https://cryptottlivewebapi.xbtce.net:8443/api',
                'www': 'https://www.xbtce.com',
                'doc': ['https://www.xbtce.com/tradeapi', 'https://support.xbtce.info/Knowledgebase/Article/View/52/25/xbtce-exchange-api']
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
                'uid': true
            },
            'api': {
                'public': {
                    'get': ['currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/ticks', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'ticker', 'ticker/{filter}', 'tradesession']
                },
                'private': {
                    'get': ['tradeserverinfo', 'tradesession', 'currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'account', 'asset', 'asset/{id}', 'position', 'position/{id}', 'trade', 'trade/{id}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/ask/info', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/{periodicity}/bars/bid/info', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/level2/info', 'quotehistory/{symbol}/periodicities', 'quotehistory/{symbol}/ticks', 'quotehistory/{symbol}/ticks/info', 'quotehistory/cache/{symbol}/{periodicity}/bars/ask', 'quotehistory/cache/{symbol}/{periodicity}/bars/bid', 'quotehistory/cache/{symbol}/level2', 'quotehistory/cache/{symbol}/ticks', 'quotehistory/symbols', 'quotehistory/version'],
                    'post': ['trade', 'tradehistory'],
                    'put': ['trade'],
                    'delete': ['trade']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.privateGetSymbol();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['Symbol'];
                let base = market['MarginCurrency'];
                let quote = market['ProfitCurrency'];
                if (base == 'DSH') base = 'DASH';
                let symbol = base + '/' + quote;
                symbol = market['IsTradeAllowed'] ? symbol : id;
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let balances = yield _this2.privateGetAsset();
            let result = { 'info': balances };
            for (let b = 0; b < balances.length; b++) {
                let balance = balances[b];
                let currency = balance['Currency'];
                let uppercase = currency.toUpperCase();
                // xbtce names DASH incorrectly as DSH
                if (uppercase == 'DSH') uppercase = 'DASH';
                let account = {
                    'free': balance['FreeAmount'],
                    'used': balance['LockedAmount'],
                    'total': balance['Amount']
                };
                result[uppercase] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let orderbook = yield _this3.privateGetLevel2Filter(_this3.extend({
                'filter': market['id']
            }, params));
            orderbook = orderbook[0];
            let timestamp = orderbook['Timestamp'];
            return _this3.parseOrderBook(orderbook, timestamp, 'Bids', 'Asks', 'Price', 'Volume');
        })();
    }

    parseTicker(ticker, market = undefined) {
        let timestamp = 0;
        let last = undefined;
        if ('LastBuyTimestamp' in ticker) if (timestamp < ticker['LastBuyTimestamp']) {
            timestamp = ticker['LastBuyTimestamp'];
            last = ticker['LastBuyPrice'];
        }
        if ('LastSellTimestamp' in ticker) if (timestamp < ticker['LastSellTimestamp']) {
            timestamp = ticker['LastSellTimestamp'];
            last = ticker['LastSellPrice'];
        }
        if (!timestamp) timestamp = this.milliseconds();
        let symbol = undefined;
        if (market) symbol = market['symbol'];
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': ticker['DailyBestBuyPrice'],
            'low': ticker['DailyBestSellPrice'],
            'bid': ticker['BestBid'],
            'ask': ticker['BestAsk'],
            'vwap': undefined,
            'open': undefined,
            'close': undefined,
            'first': undefined,
            'last': last,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': ticker['DailyTradedTotalVolume'],
            'quoteVolume': undefined,
            'info': ticker
        };
    }

    fetchTickers(symbols = undefined, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let tickers = yield _this4.publicGetTicker(params);
            tickers = _this4.indexBy(tickers, 'Symbol');
            let ids = Object.keys(tickers);
            let result = {};
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let market = undefined;
                let symbol = undefined;
                if (id in _this4.markets_by_id) {
                    market = _this4.markets_by_id[id];
                    symbol = market['symbol'];
                } else {
                    let base = id.slice(0, 3);
                    let quote = id.slice(3, 6);
                    if (base == 'DSH') base = 'DASH';
                    if (quote == 'DSH') quote = 'DASH';
                    symbol = base + '/' + quote;
                }
                let ticker = tickers[id];
                result[symbol] = _this4.parseTicker(ticker, market);
            }
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let tickers = yield _this5.publicGetTickerFilter(_this5.extend({
                'filter': market['id']
            }, params));
            let length = tickers.length;
            if (length < 1) throw new ExchangeError(_this5.id + ' fetchTicker returned empty response, xBTCe public API error');
            tickers = _this5.indexBy(tickers, 'Symbol');
            let ticker = tickers[market['id']];
            return _this5.parseTicker(ticker, market);
        })();
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            // no method for trades?
            return yield _this6.privateGetTrade(params);
        })();
    }

    parseOHLCV(ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {
        return [ohlcv['Timestamp'], ohlcv['Open'], ohlcv['High'], ohlcv['Low'], ohlcv['Close'], ohlcv['Volume']];
    }

    fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            throw new NotSupported(_this7.id + ' fetchOHLCV is disabled by the exchange');
            let minutes = parseInt(timeframe / 60); // 1 minute by default
            let periodicity = minutes.toString();
            yield _this7.loadMarkets();
            let market = _this7.market(symbol);
            if (!since) since = _this7.seconds() - 86400 * 7; // last day by defulat
            if (!limit) limit = 1000; // default
            let response = yield _this7.privateGetQuotehistorySymbolPeriodicityBarsBid(_this7.extend({
                'symbol': market['id'],
                'periodicity': periodicity,
                'timestamp': since,
                'count': limit
            }, params));
            return _this7.parseOHLCVs(response['Bars'], market, timeframe, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            if (type == 'market') throw new ExchangeError(_this8.id + ' allows limit orders only');
            let response = yield _this8.tapiPostTrade(_this8.extend({
                'pair': _this8.marketId(symbol),
                'type': side,
                'amount': amount,
                'rate': price
            }, params));
            return {
                'info': response,
                'id': response['Id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            return yield _this9.privateDeleteTrade(_this9.extend({
                'Type': 'Cancel',
                'Id': id
            }, params));
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        if (!this.apiKey) throw new AuthenticationError(this.id + ' requires apiKey for all requests, their public API is always busy');
        if (!this.uid) throw new AuthenticationError(this.id + ' requires uid property for authentication and trading, their public API is always busy');
        let url = this.urls['api'] + '/' + this.version;
        if (api == 'public') url += '/' + api;
        url += '/' + this.implodeParams(path, params);
        let query = this.omit(params, this.extractParams(path));
        if (api == 'public') {
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
        } else {
            this.checkRequiredCredentials();
            headers = { 'Accept-Encoding': 'gzip, deflate' };
            let nonce = this.nonce().toString();
            if (method == 'POST') {
                if (Object.keys(query).length) {
                    headers['Content-Type'] = 'application/json';
                    body = this.json(query);
                } else {
                    url += '?' + this.urlencode(query);
                }
            }
            let auth = nonce + this.uid + this.apiKey + method + url;
            if (body) auth += body;
            let signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
            let credentials = this.uid + ':' + this.apiKey + ':' + nonce + ':' + this.binaryToString(signature);
            headers['Authorization'] = 'HMAC ' + credentials;
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
};
},{"./base/Exchange":8,"./base/errors":10}],98:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const liqui = require('./liqui.js');
const { ExchangeError, InsufficientFunds, DDoSProtection } = require('./base/errors');

// ---------------------------------------------------------------------------

module.exports = class yobit extends liqui {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'yobit',
            'name': 'YoBit',
            'countries': 'RU',
            'rateLimit': 3000, // responses are cached every 2 seconds
            'version': '3',
            'hasCORS': false,
            'hasWithdraw': true,
            'hasFetchTickers': false,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg',
                'api': {
                    'public': 'https://yobit.net/api',
                    'private': 'https://yobit.net/tapi'
                },
                'www': 'https://www.yobit.net',
                'doc': 'https://www.yobit.net/en/api/'
            },
            'api': {
                'public': {
                    'get': ['depth/{pair}', 'info', 'ticker/{pair}', 'trades/{pair}']
                },
                'private': {
                    'post': ['ActiveOrders', 'CancelOrder', 'GetDepositAddress', 'getInfo', 'OrderInfo', 'Trade', 'TradeHistory', 'WithdrawCoinsToAddress']
                }
            },
            'fees': {
                'trading': {
                    'maker': 0.002,
                    'taker': 0.002
                },
                'funding': 0.0
            }
        });
    }

    commonCurrencyCode(currency) {
        let substitutions = {
            'AIR': 'AirCoin',
            'ANI': 'ANICoin',
            'ANT': 'AntsCoin',
            'ATM': 'Autumncoin',
            'BCC': 'BCH',
            'BTS': 'Bitshares2',
            'DCT': 'Discount',
            'DGD': 'DarkGoldCoin',
            'ICN': 'iCoin',
            'LIZI': 'LiZi',
            'LUN': 'LunarCoin',
            'NAV': 'NavajoCoin',
            'OMG': 'OMGame',
            'PAY': 'EPAY',
            'REP': 'Republicoin'
        };
        if (currency in substitutions) return substitutions[currency];
        return currency;
    }

    currencyId(commonCode) {
        let substitutions = {
            'AirCoin': 'AIR',
            'ANICoin': 'ANI',
            'AntsCoin': 'ANT',
            'Autumncoin': 'ATM',
            'BCH': 'BCC',
            'Bitshares2': 'BTS',
            'Discount': 'DCT',
            'DarkGoldCoin': 'DGD',
            'iCoin': 'ICN',
            'LiZi': 'LIZI',
            'LunarCoin': 'LUN',
            'NavajoCoin': 'NAV',
            'OMGame': 'OMG',
            'EPAY': 'PAY',
            'Republicoin': 'REP'
        };
        if (commonCode in substitutions) return substitutions[commonCode];
        return commonCode;
    }

    fetchBalance(params = {}) {
        var _this = this;

        return _asyncToGenerator(function* () {
            yield _this.loadMarkets();
            let response = yield _this.privatePostGetInfo();
            let balances = response['return'];
            let result = { 'info': balances };
            let sides = { 'free': 'funds', 'total': 'funds_incl_orders' };
            let keys = Object.keys(sides);
            for (let i = 0; i < keys.length; i++) {
                let key = keys[i];
                let side = sides[key];
                if (side in balances) {
                    let currencies = Object.keys(balances[side]);
                    for (let j = 0; j < currencies.length; j++) {
                        let lowercase = currencies[j];
                        let uppercase = lowercase.toUpperCase();
                        let currency = _this.commonCurrencyCode(uppercase);
                        let account = undefined;
                        if (currency in result) {
                            account = result[currency];
                        } else {
                            account = _this.account();
                        }
                        account[key] = balances[side][lowercase];
                        if (account['total'] && account['free']) account['used'] = account['total'] - account['free'];
                        result[currency] = account;
                    }
                }
            }
            return _this.parseBalance(result);
        })();
    }

    createDepositAddress(currency, params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this2.fetchDepositAddress(currency, _this2.extend({
                'need_new': 1
            }, params));
            return {
                'currency': currency,
                'address': response['address'],
                'status': 'ok',
                'info': response['info']
            };
        })();
    }

    fetchDepositAddress(currency, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            let currencyId = _this3.currencyId(currency);
            let request = {
                'coinName': currencyId,
                'need_new': 0
            };
            let response = yield _this3.privatePostGetDepositAddress(_this3.extend(request, params));
            let address = _this3.safeString(response['return'], 'address');
            return {
                'currency': currency,
                'address': address,
                'status': 'ok',
                'info': response
            };
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let response = yield _this4.privatePostWithdrawCoinsToAddress(_this4.extend({
                'coinName': currency,
                'amount': amount,
                'address': address
            }, params));
            return {
                'info': response,
                'id': undefined
            };
        })();
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this5.fetch2(path, api, method, params, headers, body);
            if ('success' in response) {
                if (!response['success']) {
                    if (response['error'].indexOf('Insufficient funds') >= 0) {
                        // not enougTh is a typo inside Liqui's own API...
                        throw new InsufficientFunds(_this5.id + ' ' + _this5.json(response));
                    } else if (response['error'] == 'Requests too often') {
                        throw new DDoSProtection(_this5.id + ' ' + _this5.json(response));
                    } else if (response['error'] == 'not available' || response['error'] == 'external service unavailable') {
                        throw new DDoSProtection(_this5.id + ' ' + _this5.json(response));
                    } else {
                        throw new ExchangeError(_this5.id + ' ' + _this5.json(response));
                    }
                }
            }
            return response;
        })();
    }

};
},{"./base/errors":10,"./liqui.js":74}],99:[function(require,module,exports){
"use strict";

// ---------------------------------------------------------------------------

const acx = require('./acx.js');

// ---------------------------------------------------------------------------

module.exports = class yunbi extends acx {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'yunbi',
            'name': 'YUNBI',
            'countries': 'CN',
            'rateLimit': 1000,
            'version': 'v2',
            'hasCORS': false,
            'hasFetchTickers': true,
            'hasFetchOHLCV': true,
            'timeframes': {
                '1m': '1',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '120',
                '4h': '240',
                '12h': '720',
                '1d': '1440',
                '3d': '4320',
                '1w': '10080'
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/28570548-4d646c40-7147-11e7-9cf6-839b93e6d622.jpg',
                'extension': '.json', // default extension appended to endpoint URLs
                'api': 'https://yunbi.com',
                'www': 'https://yunbi.com',
                'doc': ['https://yunbi.com/documents/api/guide', 'https://yunbi.com/swagger/']
            },
            'api': {
                'public': {
                    'get': ['tickers', 'tickers/{market}', 'markets', 'order_book', 'k', 'depth', 'trades', 'k_with_pending_trades', 'timestamp', 'addresses/{address}', 'partners/orders/{id}/trades']
                },
                'private': {
                    'get': ['deposits', 'members/me', 'deposit', 'deposit_address', 'order', 'orders', 'trades/my'],
                    'post': ['order/delete', 'orders', 'orders/multi', 'orders/clear']
                }
            }
        });
    }
};
},{"./acx.js":5}],100:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class zaif extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'zaif',
            'name': 'Zaif',
            'countries': 'JP',
            'rateLimit': 2000,
            'version': '1',
            'hasCORS': false,
            'hasFetchOpenOrders': true,
            'hasFetchClosedOrders': true,
            'hasWithdraw': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',
                'api': 'https://api.zaif.jp',
                'www': 'https://zaif.jp',
                'doc': ['http://techbureau-api-document.readthedocs.io/ja/latest/index.html', 'https://corp.zaif.jp/api-docs', 'https://corp.zaif.jp/api-docs/api_links', 'https://www.npmjs.com/package/zaif.jp', 'https://github.com/you21979/node-zaif']
            },
            'api': {
                'public': {
                    'get': ['depth/{pair}', 'currencies/{pair}', 'currencies/all', 'currency_pairs/{pair}', 'currency_pairs/all', 'last_price/{pair}', 'ticker/{pair}', 'trades/{pair}']
                },
                'private': {
                    'post': ['active_orders', 'cancel_order', 'deposit_history', 'get_id_info', 'get_info', 'get_info2', 'get_personal_info', 'trade', 'trade_history', 'withdraw', 'withdraw_history']
                },
                'ecapi': {
                    'post': ['createInvoice', 'getInvoice', 'getInvoiceIdsByOrderNumber', 'cancelInvoice']
                },
                'tlapi': {
                    'post': ['get_positions', 'position_history', 'active_positions', 'create_position', 'change_position', 'cancel_position']
                },
                'fapi': {
                    'get': ['groups/{group_id}', 'last_price/{group_id}/{pair}', 'ticker/{group_id}/{pair}', 'trades/{group_id}/{pair}', 'depth/{group_id}/{pair}']
                }
            }
        });
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetCurrencyPairsAll();
            let result = [];
            for (let p = 0; p < markets.length; p++) {
                let market = markets[p];
                let id = market['currency_pair'];
                let symbol = market['name'];
                let [base, quote] = symbol.split('/');
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'info': market
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostGetInfo();
            let balances = response['return'];
            let result = { 'info': balances };
            let currencies = Object.keys(balances['funds']);
            for (let c = 0; c < currencies.length; c++) {
                let currency = currencies[c];
                let balance = balances['funds'][currency];
                let uppercase = currency.toUpperCase();
                let account = {
                    'free': balance,
                    'used': 0.0,
                    'total': balance
                };
                if ('deposit' in balances) {
                    if (currency in balances['deposit']) {
                        account['total'] = balances['deposit'][currency];
                        account['used'] = account['total'] - account['free'];
                    }
                }
                result[uppercase] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let orderbook = yield _this3.publicGetDepthPair(_this3.extend({
                'pair': _this3.marketId(symbol)
            }, params));
            return _this3.parseOrderBook(orderbook);
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let ticker = yield _this4.publicGetTickerPair(_this4.extend({
                'pair': _this4.marketId(symbol)
            }, params));
            let timestamp = _this4.milliseconds();
            let vwap = ticker['vwap'];
            let baseVolume = ticker['volume'];
            let quoteVolume = baseVolume * vwap;
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'high': ticker['high'],
                'low': ticker['low'],
                'bid': ticker['bid'],
                'ask': ticker['ask'],
                'vwap': vwap,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': ticker['last'],
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': baseVolume,
                'quoteVolume': quoteVolume,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        let side = trade['trade_type'] == 'bid' ? 'buy' : 'sell';
        let timestamp = trade['date'] * 1000;
        let id = this.safeString(trade, 'id');
        id = this.safeString(trade, 'tid', id);
        if (!market) market = this.markets_by_id[trade['currency_pair']];
        return {
            'id': id.toString(),
            'info': trade,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': side,
            'price': trade['price'],
            'amount': trade['amount']
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let response = yield _this5.publicGetTradesPair(_this5.extend({
                'pair': market['id']
            }, params));
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            if (type == 'market') throw new ExchangeError(_this6.id + ' allows limit orders only');
            let response = yield _this6.privatePostTrade(_this6.extend({
                'currency_pair': _this6.marketId(symbol),
                'action': side == 'buy' ? 'bid' : 'ask',
                'amount': amount,
                'price': price
            }, params));
            return {
                'info': response,
                'id': response['return']['order_id'].toString()
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            return yield _this7.privatePostCancelOrder(_this7.extend({
                'order_id': id
            }, params));
        })();
    }

    parseOrder(order, market = undefined) {
        let side = order['action'] == 'bid' ? 'buy' : 'sell';
        let timestamp = parseInt(order['timestamp']) * 1000;
        if (!market) market = this.markets_by_id[order['currency_pair']];
        let price = order['price'];
        let amount = order['amount'];
        return {
            'id': order['id'].toString(),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'status': 'open',
            'symbol': market['symbol'],
            'type': 'limit',
            'side': side,
            'price': price,
            'cost': price * amount,
            'amount': amount,
            'filled': undefined,
            'remaining': undefined,
            'trades': undefined,
            'fee': undefined
        };
    }

    parseOrders(orders, market = undefined, since = undefined, limit = undefined) {
        let ids = Object.keys(orders);
        let result = [];
        for (let i = 0; i < ids.length; i++) {
            let id = ids[i];
            let order = orders[id];
            let extended = this.extend(order, { 'id': id });
            result.push(this.parseOrder(extended, market));
        }
        return this.filterBySinceLimit(result, since, limit);
    }

    fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let market = undefined;
            let request = {
                // 'is_token': false,
                // 'is_token_both': false,
            };
            if (symbol) {
                market = _this8.market(symbol);
                request['currency_pair'] = market['id'];
            }
            let response = yield _this8.privatePostActiveOrders(_this8.extend(request, params));
            return _this8.parseOrders(response['return'], market, since, limit);
        })();
    }

    fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            yield _this9.loadMarkets();
            let market = undefined;
            let request = {
                // 'from': 0,
                // 'count': 1000,
                // 'from_id': 0,
                // 'end_id': 1000,
                // 'order': 'DESC',
                // 'since': 1503821051,
                // 'end': 1503821051,
                // 'is_token': false,
            };
            if (symbol) {
                market = _this9.market(symbol);
                request['currency_pair'] = market['id'];
            }
            let response = yield _this9.privatePostTradeHistory(_this9.extend(request, params));
            return _this9.parseOrders(response['return'], market, since, limit);
        })();
    }

    withdraw(currency, amount, address, params = {}) {
        var _this10 = this;

        return _asyncToGenerator(function* () {
            yield _this10.loadMarkets();
            if (currency == 'JPY') throw new ExchangeError(_this10.id + ' does not allow ' + currency + ' withdrawals');
            let result = yield _this10.privatePostWithdraw(_this10.extend({
                'currency': currency,
                'amount': amount,
                'address': address
                // 'message': 'Hi!', // XEM only
                // 'opt_fee': 0.003, // BTC and MONA only
            }, params));
            return {
                'info': result,
                'id': result['return']['txid'],
                'fee': result['return']['fee']
            };
        })();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'] + '/';
        if (api == 'public') {
            url += 'api/' + this.version + '/' + this.implodeParams(path, params);
        } else if (api == 'fapi') {
            url += 'fapi/' + this.version + '/' + this.implodeParams(path, params);
        } else {
            this.checkRequiredCredentials();
            if (api == 'ecapi') {
                url += 'ecapi';
            } else if (api == 'tlapi') {
                url += 'tlapi';
            } else {
                url += 'tapi';
            }
            let nonce = this.nonce();
            body = this.urlencode(this.extend({
                'method': path,
                'nonce': nonce
            }, params));
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Key': this.apiKey,
                'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
            };
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'api', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this11 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this11.fetch2(path, api, method, params, headers, body);
            if ('error' in response) throw new ExchangeError(_this11.id + ' ' + response['error']);
            if ('success' in response) if (!response['success']) throw new ExchangeError(_this11.id + ' ' + _this11.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],101:[function(require,module,exports){
"use strict";

//  ---------------------------------------------------------------------------

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Exchange = require('./base/Exchange');
const { ExchangeError } = require('./base/errors');

//  ---------------------------------------------------------------------------

module.exports = class zb extends Exchange {

    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'zb',
            'name': 'ZB',
            'countries': 'CN',
            'rateLimit': 1000,
            'version': 'v1',
            'hasCORS': false,
            'hasFetchOrder': true,
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg',
                'api': {
                    'public': 'http://api.zb.com/data', // no https for public API
                    'private': 'https://trade.zb.com/api'
                },
                'www': 'https://trade.zb.com/api',
                'doc': 'https://www.zb.com/i/developer'
            },
            'api': {
                'public': {
                    'get': ['markets', 'ticker', 'depth', 'trades', 'kline']
                },
                'private': {
                    'post': ['order', 'cancelOrder', 'getOrder', 'getOrders', 'getOrdersNew', 'getOrdersIgnoreTradeType', 'getUnfinishedOrdersIgnoreTradeType', 'getAccountInfo', 'getUserAddress', 'getWithdrawAddress', 'getWithdrawRecord', 'getChargeRecord', 'getCnyWithdrawRecord', 'getCnyChargeRecord', 'withdraw']
                }
            }
        });
    }

    getTradingFeeFromBaseQuote(base, quote) {
        // base: quote
        let fees = {
            'BTC': { 'USDT': 0.0 },
            'BCH': { 'BTC': 0.001, 'USDT': 0.001 },
            'LTC': { 'BTC': 0.001, 'USDT': 0.0 },
            'ETH': { 'BTC': 0.001, 'USDT': 0.0 },
            'ETC': { 'BTC': 0.001, 'USDT': 0.0 },
            'BTS': { 'BTC': 0.001, 'USDT': 0.001 },
            'EOS': { 'BTC': 0.001, 'USDT': 0.001 },
            'HSR': { 'BTC': 0.001, 'USDT': 0.001 },
            'QTUM': { 'BTC': 0.001, 'USDT': 0.001 },
            'USDT': { 'BTC': 0.0 }
        };
        if (base in fees) {
            let quoteFees = fees[base];
            if (quote in quoteFees) return quoteFees[quote];
        }
        return undefined;
    }

    fetchMarkets() {
        var _this = this;

        return _asyncToGenerator(function* () {
            let markets = yield _this.publicGetMarkets();
            let keys = Object.keys(markets);
            let result = [];
            for (let i = 0; i < keys.length; i++) {
                let id = keys[i];
                let market = markets[id];
                let [baseId, quoteId] = id.split('_');
                let base = _this.commonCurrencyCode(baseId.toUpperCase());
                let quote = _this.commonCurrencyCode(quoteId.toUpperCase());
                let symbol = base + '/' + quote;
                let fee = _this.getTradingFeeFromBaseQuote(base, quote);
                let precision = {
                    'amount': market['amountScale'],
                    'price': market['priceScale']
                };
                let lot = Math.pow(10, -precision['amount']);
                result.push({
                    'id': id,
                    'symbol': symbol,
                    'baseId': baseId,
                    'quoteId': quoteId,
                    'base': base,
                    'quote': quote,
                    'info': market,
                    'maker': fee,
                    'taker': fee,
                    'lot': lot,
                    'active': true,
                    'precision': precision,
                    'limits': {
                        'amount': {
                            'min': lot,
                            'max': undefined
                        },
                        'price': {
                            'min': Math.pow(10, -precision['price']),
                            'max': undefined
                        },
                        'cost': {
                            'min': 0,
                            'max': undefined
                        }
                    }
                });
            }
            return result;
        })();
    }

    fetchBalance(params = {}) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            yield _this2.loadMarkets();
            let response = yield _this2.privatePostGetAccountInfo();
            let balances = response['result'];
            let result = { 'info': balances };
            let currencies = Object.keys(_this2.currencies);
            for (let i = 0; i < currencies.length; i++) {
                let currency = currencies[i];
                let account = _this2.account();
                if (currency in balances['balance']) account['free'] = parseFloat(balances['balance'][currency]['amount']);
                if (currency in balances['frozen']) account['used'] = parseFloat(balances['frozen'][currency]['amount']);
                account['total'] = _this2.sum(account['free'], account['used']);
                result[currency] = account;
            }
            return _this2.parseBalance(result);
        })();
    }

    getMarketFieldName() {
        return 'market';
    }

    fetchOrderBook(symbol, params = {}) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            yield _this3.loadMarkets();
            let market = _this3.market(symbol);
            let marketFieldName = _this3.getMarketFieldName();
            let request = {};
            request[marketFieldName] = market['id'];
            let orderbook = yield _this3.publicGetDepth(_this3.extend(request, params));
            let timestamp = _this3.milliseconds();
            let bids = undefined;
            let asks = undefined;
            if ('bids' in orderbook) bids = orderbook['bids'];
            if ('asks' in orderbook) asks = orderbook['asks'];
            let result = {
                'bids': bids,
                'asks': asks,
                'timestamp': timestamp,
                'datetime': _this3.iso8601(timestamp)
            };
            if (result['bids']) result['bids'] = _this3.sortBy(result['bids'], 0, true);
            if (result['asks']) result['asks'] = _this3.sortBy(result['asks'], 0);
            return result;
        })();
    }

    fetchTicker(symbol, params = {}) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            yield _this4.loadMarkets();
            let market = _this4.market(symbol);
            let marketFieldName = _this4.getMarketFieldName();
            let request = {};
            request[marketFieldName] = market['id'];
            let response = yield _this4.publicGetTicker(_this4.extend(request, params));
            let ticker = response['ticker'];
            let timestamp = _this4.milliseconds();
            return {
                'symbol': symbol,
                'timestamp': timestamp,
                'datetime': _this4.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': undefined,
                'info': ticker
            };
        })();
    }

    parseTrade(trade, market = undefined) {
        let timestamp = trade['date'] * 1000;
        let side = trade['trade_type'] == 'bid' ? 'buy' : 'sell';
        return {
            'info': trade,
            'id': trade['tid'].toString(),
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'symbol': market['symbol'],
            'type': undefined,
            'side': side,
            'price': parseFloat(trade['price']),
            'amount': parseFloat(trade['amount'])
        };
    }

    fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        var _this5 = this;

        return _asyncToGenerator(function* () {
            yield _this5.loadMarkets();
            let market = _this5.market(symbol);
            let marketFieldName = _this5.getMarketFieldName();
            let request = {};
            request[marketFieldName] = market['id'];
            let response = yield _this5.publicGetTrades(_this5.extend(request, params));
            return _this5.parseTrades(response, market, since, limit);
        })();
    }

    createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        var _this6 = this;

        return _asyncToGenerator(function* () {
            yield _this6.loadMarkets();
            let paramString = '&price=' + price.toString();
            paramString += '&amount=' + amount.toString();
            let tradeType = side == 'buy' ? '1' : '0';
            paramString += '&tradeType=' + tradeType;
            paramString += '&currency=' + _this6.marketId(symbol);
            let response = yield _this6.privatePostOrder(paramString);
            return {
                'info': response,
                'id': response['id']
            };
        })();
    }

    cancelOrder(id, symbol = undefined, params = {}) {
        var _this7 = this;

        return _asyncToGenerator(function* () {
            yield _this7.loadMarkets();
            let paramString = '&id=' + id.toString();
            if ('currency' in params) paramString += '&currency=' + params['currency'];
            return yield _this7.privatePostCancelOrder(paramString);
        })();
    }

    fetchOrder(id, symbol = undefined, params = {}) {
        var _this8 = this;

        return _asyncToGenerator(function* () {
            yield _this8.loadMarkets();
            let paramString = '&id=' + id.toString();
            if ('currency' in params) paramString += '&currency=' + params['currency'];
            return yield _this8.privatePostGetOrder(paramString);
        })();
    }

    nonce() {
        return this.milliseconds();
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api'][api];
        if (api == 'public') {
            url += '/' + this.version + '/' + path;
            if (Object.keys(params).length) url += '?' + this.urlencode(params);
        } else {
            this.checkRequiredCredentials();
            let paramsLength = params.length; // params should be a string here
            let nonce = this.nonce();
            let auth = 'method=' + path;
            auth += '&accesskey=' + this.apiKey;
            auth += paramsLength ? params : '';
            let secret = this.hash(this.encode(this.secret), 'sha1');
            let signature = this.hmac(this.encode(auth), this.encode(secret), 'md5');
            let suffix = 'sign=' + signature + '&reqTime=' + nonce.toString();
            url += '/' + path + '?' + auth + '&' + suffix;
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }

    request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        var _this9 = this;

        return _asyncToGenerator(function* () {
            let response = yield _this9.fetch2(path, api, method, params, headers, body);
            if (api == 'private') if ('code' in response) throw new ExchangeError(_this9.id + ' ' + _this9.json(response));
            return response;
        })();
    }
};
},{"./base/Exchange":8,"./base/errors":10}],102:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Lookup tables
	    var SBOX = [];
	    var INV_SBOX = [];
	    var SUB_MIX_0 = [];
	    var SUB_MIX_1 = [];
	    var SUB_MIX_2 = [];
	    var SUB_MIX_3 = [];
	    var INV_SUB_MIX_0 = [];
	    var INV_SUB_MIX_1 = [];
	    var INV_SUB_MIX_2 = [];
	    var INV_SUB_MIX_3 = [];

	    // Compute lookup tables
	    (function () {
	        // Compute double table
	        var d = [];
	        for (var i = 0; i < 256; i++) {
	            if (i < 128) {
	                d[i] = i << 1;
	            } else {
	                d[i] = (i << 1) ^ 0x11b;
	            }
	        }

	        // Walk GF(2^8)
	        var x = 0;
	        var xi = 0;
	        for (var i = 0; i < 256; i++) {
	            // Compute sbox
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	            SBOX[x] = sx;
	            INV_SBOX[sx] = x;

	            // Compute multiplication
	            var x2 = d[x];
	            var x4 = d[x2];
	            var x8 = d[x4];

	            // Compute sub bytes, mix columns tables
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
	            SUB_MIX_3[x] = t;

	            // Compute inv sub bytes, inv mix columns tables
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
	            INV_SUB_MIX_3[sx] = t;

	            // Compute next counter
	            if (!x) {
	                x = xi = 1;
	            } else {
	                x = x2 ^ d[d[d[x8 ^ x2]]];
	                xi ^= d[d[xi]];
	            }
	        }
	    }());

	    // Precomputed Rcon lookup
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    /**
	     * AES block cipher algorithm.
	     */
	    var AES = C_algo.AES = BlockCipher.extend({
	        _doReset: function () {
	            // Skip reset of nRounds has been set before and key did not change
	            if (this._nRounds && this._keyPriorReset === this._key) {
	                return;
	            }

	            // Shortcuts
	            var key = this._keyPriorReset = this._key;
	            var keyWords = key.words;
	            var keySize = key.sigBytes / 4;

	            // Compute number of rounds
	            var nRounds = this._nRounds = keySize + 6;

	            // Compute number of key schedule rows
	            var ksRows = (nRounds + 1) * 4;

	            // Compute key schedule
	            var keySchedule = this._keySchedule = [];
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
	                if (ksRow < keySize) {
	                    keySchedule[ksRow] = keyWords[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 1];

	                    if (!(ksRow % keySize)) {
	                        // Rot word
	                        t = (t << 8) | (t >>> 24);

	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

	                        // Mix Rcon
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;
	                    } else if (keySize > 6 && ksRow % keySize == 4) {
	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }

	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
	                }
	            }

	            // Compute inv key schedule
	            var invKeySchedule = this._invKeySchedule = [];
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	                var ksRow = ksRows - invKsRow;

	                if (invKsRow % 4) {
	                    var t = keySchedule[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 4];
	                }

	                if (invKsRow < 4 || ksRow <= 4) {
	                    invKeySchedule[invKsRow] = t;
	                } else {
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
	        },

	        decryptBlock: function (M, offset) {
	            // Swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;

	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

	            // Inv swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;
	        },

	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
	            // Shortcut
	            var nRounds = this._nRounds;

	            // Get input, add round key
	            var s0 = M[offset]     ^ keySchedule[0];
	            var s1 = M[offset + 1] ^ keySchedule[1];
	            var s2 = M[offset + 2] ^ keySchedule[2];
	            var s3 = M[offset + 3] ^ keySchedule[3];

	            // Key schedule row counter
	            var ksRow = 4;

	            // Rounds
	            for (var round = 1; round < nRounds; round++) {
	                // Shift rows, sub bytes, mix columns, add round key
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

	                // Update state
	                s0 = t0;
	                s1 = t1;
	                s2 = t2;
	                s3 = t3;
	            }

	            // Shift rows, sub bytes, add round key
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

	            // Set output
	            M[offset]     = t0;
	            M[offset + 1] = t1;
	            M[offset + 2] = t2;
	            M[offset + 3] = t3;
	        },

	        keySize: 256/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */
	    C.AES = BlockCipher._createHelper(AES);
	}());


	return CryptoJS.AES;

}));
},{"./cipher-core":103,"./core":104,"./enc-base64":105,"./evpkdf":107,"./md5":112}],103:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./evpkdf"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./evpkdf"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Cipher core components.
	 */
	CryptoJS.lib.Cipher || (function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var Base64 = C_enc.Base64;
	    var C_algo = C.algo;
	    var EvpKDF = C_algo.EvpKDF;

	    /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */
	        cfg: Base.extend(),

	        /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createEncryptor: function (key, cfg) {
	            return this.create(this._ENC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createDecryptor: function (key, cfg) {
	            return this.create(this._DEC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */
	        init: function (xformMode, key, cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Store transform mode and key
	            this._xformMode = xformMode;
	            this._key = key;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-cipher logic
	            this._doReset();
	        },

	        /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */
	        process: function (dataUpdate) {
	            // Append
	            this._append(dataUpdate);

	            // Process available blocks
	            return this._process();
	        },

	        /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */
	        finalize: function (dataUpdate) {
	            // Final data update
	            if (dataUpdate) {
	                this._append(dataUpdate);
	            }

	            // Perform concrete-cipher logic
	            var finalProcessedData = this._doFinalize();

	            return finalProcessedData;
	        },

	        keySize: 128/32,

	        ivSize: 128/32,

	        _ENC_XFORM_MODE: 1,

	        _DEC_XFORM_MODE: 2,

	        /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */
	        _createHelper: (function () {
	            function selectCipherStrategy(key) {
	                if (typeof key == 'string') {
	                    return PasswordBasedCipher;
	                } else {
	                    return SerializableCipher;
	                }
	            }

	            return function (cipher) {
	                return {
	                    encrypt: function (message, key, cfg) {
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
	                    },

	                    decrypt: function (ciphertext, key, cfg) {
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
	                    }
	                };
	            };
	        }())
	    });

	    /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
	        _doFinalize: function () {
	            // Process partial blocks
	            var finalProcessedBlocks = this._process(!!'flush');

	            return finalProcessedBlocks;
	        },

	        blockSize: 1
	    });

	    /**
	     * Mode namespace.
	     */
	    var C_mode = C.mode = {};

	    /**
	     * Abstract base block cipher mode template.
	     */
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
	        /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */
	        createEncryptor: function (cipher, iv) {
	            return this.Encryptor.create(cipher, iv);
	        },

	        /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */
	        createDecryptor: function (cipher, iv) {
	            return this.Decryptor.create(cipher, iv);
	        },

	        /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */
	        init: function (cipher, iv) {
	            this._cipher = cipher;
	            this._iv = iv;
	        }
	    });

	    /**
	     * Cipher Block Chaining mode.
	     */
	    var CBC = C_mode.CBC = (function () {
	        /**
	         * Abstract base CBC mode.
	         */
	        var CBC = BlockCipherMode.extend();

	        /**
	         * CBC encryptor.
	         */
	        CBC.Encryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // XOR and encrypt
	                xorBlock.call(this, words, offset, blockSize);
	                cipher.encryptBlock(words, offset);

	                // Remember this block to use with next block
	                this._prevBlock = words.slice(offset, offset + blockSize);
	            }
	        });

	        /**
	         * CBC decryptor.
	         */
	        CBC.Decryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // Remember this block to use with next block
	                var thisBlock = words.slice(offset, offset + blockSize);

	                // Decrypt and XOR
	                cipher.decryptBlock(words, offset);
	                xorBlock.call(this, words, offset, blockSize);

	                // This block becomes the previous block
	                this._prevBlock = thisBlock;
	            }
	        });

	        function xorBlock(words, offset, blockSize) {
	            // Shortcut
	            var iv = this._iv;

	            // Choose mixing block
	            if (iv) {
	                var block = iv;

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            } else {
	                var block = this._prevBlock;
	            }

	            // XOR blocks
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= block[i];
	            }
	        }

	        return CBC;
	    }());

	    /**
	     * Padding namespace.
	     */
	    var C_pad = C.pad = {};

	    /**
	     * PKCS #5/7 padding strategy.
	     */
	    var Pkcs7 = C_pad.Pkcs7 = {
	        /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */
	        pad: function (data, blockSize) {
	            // Shortcut
	            var blockSizeBytes = blockSize * 4;

	            // Count padding bytes
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	            // Create padding word
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

	            // Create padding
	            var paddingWords = [];
	            for (var i = 0; i < nPaddingBytes; i += 4) {
	                paddingWords.push(paddingWord);
	            }
	            var padding = WordArray.create(paddingWords, nPaddingBytes);

	            // Add padding
	            data.concat(padding);
	        },

	        /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */
	        unpad: function (data) {
	            // Get number of padding bytes from last byte
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	            // Remove padding
	            data.sigBytes -= nPaddingBytes;
	        }
	    };

	    /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */
	        cfg: Cipher.cfg.extend({
	            mode: CBC,
	            padding: Pkcs7
	        }),

	        reset: function () {
	            // Reset cipher
	            Cipher.reset.call(this);

	            // Shortcuts
	            var cfg = this.cfg;
	            var iv = cfg.iv;
	            var mode = cfg.mode;

	            // Reset block mode
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                var modeCreator = mode.createEncryptor;
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                var modeCreator = mode.createDecryptor;
	                // Keep at least one block in the buffer for unpadding
	                this._minBufferSize = 1;
	            }

	            if (this._mode && this._mode.__creator == modeCreator) {
	                this._mode.init(this, iv && iv.words);
	            } else {
	                this._mode = modeCreator.call(mode, this, iv && iv.words);
	                this._mode.__creator = modeCreator;
	            }
	        },

	        _doProcessBlock: function (words, offset) {
	            this._mode.processBlock(words, offset);
	        },

	        _doFinalize: function () {
	            // Shortcut
	            var padding = this.cfg.padding;

	            // Finalize
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                // Pad data
	                padding.pad(this._data, this.blockSize);

	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');

	                // Unpad data
	                padding.unpad(finalProcessedBlocks);
	            }

	            return finalProcessedBlocks;
	        },

	        blockSize: 128/32
	    });

	    /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */
	    var CipherParams = C_lib.CipherParams = Base.extend({
	        /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */
	        init: function (cipherParams) {
	            this.mixIn(cipherParams);
	        },

	        /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */
	        toString: function (formatter) {
	            return (formatter || this.formatter).stringify(this);
	        }
	    });

	    /**
	     * Format namespace.
	     */
	    var C_format = C.format = {};

	    /**
	     * OpenSSL formatting strategy.
	     */
	    var OpenSSLFormatter = C_format.OpenSSL = {
	        /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            // Shortcuts
	            var ciphertext = cipherParams.ciphertext;
	            var salt = cipherParams.salt;

	            // Format
	            if (salt) {
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
	            } else {
	                var wordArray = ciphertext;
	            }

	            return wordArray.toString(Base64);
	        },

	        /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */
	        parse: function (openSSLStr) {
	            // Parse base64
	            var ciphertext = Base64.parse(openSSLStr);

	            // Shortcut
	            var ciphertextWords = ciphertext.words;

	            // Test for salt
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
	                // Extract salt
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));

	                // Remove salt from ciphertext
	                ciphertextWords.splice(0, 4);
	                ciphertext.sigBytes -= 16;
	            }

	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
	        }
	    };

	    /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */
	        cfg: Base.extend({
	            format: OpenSSLFormatter
	        }),

	        /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Encrypt
	            var encryptor = cipher.createEncryptor(key, cfg);
	            var ciphertext = encryptor.finalize(message);

	            // Shortcut
	            var cipherCfg = encryptor.cfg;

	            // Create and return serializable cipher params
	            return CipherParams.create({
	                ciphertext: ciphertext,
	                key: key,
	                iv: cipherCfg.iv,
	                algorithm: cipher,
	                mode: cipherCfg.mode,
	                padding: cipherCfg.padding,
	                blockSize: cipher.blockSize,
	                formatter: cfg.format
	            });
	        },

	        /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Decrypt
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

	            return plaintext;
	        },

	        /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */
	        _parse: function (ciphertext, format) {
	            if (typeof ciphertext == 'string') {
	                return format.parse(ciphertext, this);
	            } else {
	                return ciphertext;
	            }
	        }
	    });

	    /**
	     * Key derivation function namespace.
	     */
	    var C_kdf = C.kdf = {};

	    /**
	     * OpenSSL key derivation function.
	     */
	    var OpenSSLKdf = C_kdf.OpenSSL = {
	        /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */
	        execute: function (password, keySize, ivSize, salt) {
	            // Generate random salt
	            if (!salt) {
	                salt = WordArray.random(64/8);
	            }

	            // Derive key and IV
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

	            // Separate key and IV
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
	            key.sigBytes = keySize * 4;

	            // Return params
	            return CipherParams.create({ key: key, iv: iv, salt: salt });
	        }
	    };

	    /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */
	        cfg: SerializableCipher.cfg.extend({
	            kdf: OpenSSLKdf
	        }),

	        /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Encrypt
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

	            // Mix in derived params
	            ciphertext.mixIn(derivedParams);

	            return ciphertext;
	        },

	        /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Decrypt
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

	            return plaintext;
	        }
	    });
	}());


}));
},{"./core":104,"./evpkdf":107}],104:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory();
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define([], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory();
	}
}(this, function () {

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {
	    /*
	     * Local polyfil of Object.create
	     */
	    var create = Object.create || (function () {
	        function F() {};

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }())

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            var r = (function (m_w) {
	                var m_w = m_w;
	                var m_z = 0x3ade68b1;
	                var mask = 0xffffffff;

	                return function () {
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
	                    var result = ((m_z << 0x10) + m_w) & mask;
	                    result /= 0x100000000;
	                    result += 0.5;
	                    return result * (Math.random() > .5 ? 1 : -1);
	                }
	            });

	            for (var i = 0, rcache; i < nBytes; i += 4) {
	                var _r = r((rcache || Math.random()) * 0x100000000);

	                rcache = _r() * 0x3ade67b7;
	                words.push((_r() * 0x100000000) | 0);
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));
},{}],105:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                    reverseMap = this._reverseMap = [];
	                    for (var j = 0; j < map.length; j++) {
	                        reverseMap[map.charCodeAt(j)] = j;
	                    }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	      var words = [];
	      var nBytes = 0;
	      for (var i = 0; i < base64StrLength; i++) {
	          if (i % 4) {
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
	              nBytes++;
	          }
	      }
	      return WordArray.create(words, nBytes);
	    }
	}());


	return CryptoJS.enc.Base64;

}));
},{"./core":104}],106:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * UTF-16 BE encoding strategy.
	     */
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
	        /**
	         * Converts a word array to a UTF-16 BE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 BE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 BE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 BE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    /**
	     * UTF-16 LE encoding strategy.
	     */
	    C_enc.Utf16LE = {
	        /**
	         * Converts a word array to a UTF-16 LE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 LE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 LE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 LE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    function swapEndian(word) {
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
	    }
	}());


	return CryptoJS.enc.Utf16;

}));
},{"./core":104}],107:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha1", "./hmac"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var MD5 = C_algo.MD5;

	    /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */
	    var EvpKDF = C_algo.EvpKDF = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: MD5,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init hasher
	            var hasher = cfg.hasher.create();

	            // Initial values
	            var derivedKey = WordArray.create();

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                if (block) {
	                    hasher.update(block);
	                }
	                var block = hasher.update(password).finalize(salt);
	                hasher.reset();

	                // Iterations
	                for (var i = 1; i < iterations; i++) {
	                    block = hasher.finalize(block);
	                    hasher.reset();
	                }

	                derivedKey.concat(block);
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.EvpKDF = function (password, salt, cfg) {
	        return EvpKDF.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.EvpKDF;

}));
},{"./core":104,"./hmac":109,"./sha1":128}],108:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var CipherParams = C_lib.CipherParams;
	    var C_enc = C.enc;
	    var Hex = C_enc.Hex;
	    var C_format = C.format;

	    var HexFormatter = C_format.Hex = {
	        /**
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The hexadecimally encoded string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            return cipherParams.ciphertext.toString(Hex);
	        },

	        /**
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	         *
	         * @param {string} input The hexadecimally encoded string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	         */
	        parse: function (input) {
	            var ciphertext = Hex.parse(input);
	            return CipherParams.create({ ciphertext: ciphertext });
	        }
	    };
	}());


	return CryptoJS.format.Hex;

}));
},{"./cipher-core":103,"./core":104}],109:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


}));
},{"./core":104}],110:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	return CryptoJS;

}));
},{"./aes":102,"./cipher-core":103,"./core":104,"./enc-base64":105,"./enc-utf16":106,"./evpkdf":107,"./format-hex":108,"./hmac":109,"./lib-typedarrays":111,"./md5":112,"./mode-cfb":113,"./mode-ctr":115,"./mode-ctr-gladman":114,"./mode-ecb":116,"./mode-ofb":117,"./pad-ansix923":118,"./pad-iso10126":119,"./pad-iso97971":120,"./pad-nopadding":121,"./pad-zeropadding":122,"./pbkdf2":123,"./rabbit":125,"./rabbit-legacy":124,"./rc4":126,"./ripemd160":127,"./sha1":128,"./sha224":129,"./sha256":130,"./sha3":131,"./sha384":132,"./sha512":133,"./tripledes":134,"./x64-core":135}],111:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Check if typed arrays are supported
	    if (typeof ArrayBuffer != 'function') {
	        return;
	    }

	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;

	    // Reference original init
	    var superInit = WordArray.init;

	    // Augment WordArray.init to handle typed arrays
	    var subInit = WordArray.init = function (typedArray) {
	        // Convert buffers to uint8
	        if (typedArray instanceof ArrayBuffer) {
	            typedArray = new Uint8Array(typedArray);
	        }

	        // Convert other array views to uint8
	        if (
	            typedArray instanceof Int8Array ||
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
	            typedArray instanceof Int16Array ||
	            typedArray instanceof Uint16Array ||
	            typedArray instanceof Int32Array ||
	            typedArray instanceof Uint32Array ||
	            typedArray instanceof Float32Array ||
	            typedArray instanceof Float64Array
	        ) {
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
	        }

	        // Handle Uint8Array
	        if (typedArray instanceof Uint8Array) {
	            // Shortcut
	            var typedArrayByteLength = typedArray.byteLength;

	            // Extract bytes
	            var words = [];
	            for (var i = 0; i < typedArrayByteLength; i++) {
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
	            }

	            // Initialize this word array
	            superInit.call(this, words, typedArrayByteLength);
	        } else {
	            // Else call normal init
	            superInit.apply(this, arguments);
	        }
	    };

	    subInit.prototype = WordArray;
	}());


	return CryptoJS.lib.WordArray;

}));
},{"./core":104}],112:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));
},{"./core":104}],113:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Cipher Feedback block mode.
	 */
	CryptoJS.mode.CFB = (function () {
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();

	    CFB.Encryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // Remember this block to use with next block
	            this._prevBlock = words.slice(offset, offset + blockSize);
	        }
	    });

	    CFB.Decryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            // Remember this block to use with next block
	            var thisBlock = words.slice(offset, offset + blockSize);

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // This block becomes the previous block
	            this._prevBlock = thisBlock;
	        }
	    });

	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
	        // Shortcut
	        var iv = this._iv;

	        // Generate keystream
	        if (iv) {
	            var keystream = iv.slice(0);

	            // Remove IV for subsequent blocks
	            this._iv = undefined;
	        } else {
	            var keystream = this._prevBlock;
	        }
	        cipher.encryptBlock(keystream, 0);

	        // Encrypt
	        for (var i = 0; i < blockSize; i++) {
	            words[offset + i] ^= keystream[i];
	        }
	    }

	    return CFB;
	}());


	return CryptoJS.mode.CFB;

}));
},{"./cipher-core":103,"./core":104}],114:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */
	CryptoJS.mode.CTRGladman = (function () {
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

		function incWord(word)
		{
			if (((word >> 24) & 0xff) === 0xff) { //overflow
			var b1 = (word >> 16)&0xff;
			var b2 = (word >> 8)&0xff;
			var b3 = word & 0xff;

			if (b1 === 0xff) // overflow b1
			{
			b1 = 0;
			if (b2 === 0xff)
			{
				b2 = 0;
				if (b3 === 0xff)
				{
					b3 = 0;
				}
				else
				{
					++b3;
				}
			}
			else
			{
				++b2;
			}
			}
			else
			{
			++b1;
			}

			word = 0;
			word += (b1 << 16);
			word += (b2 << 8);
			word += b3;
			}
			else
			{
			word += (0x01 << 24);
			}
			return word;
		}

		function incCounter(counter)
		{
			if ((counter[0] = incWord(counter[0])) === 0)
			{
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
				counter[1] = incWord(counter[1]);
			}
			return counter;
		}

	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }

				incCounter(counter);

				var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTRGladman.Decryptor = Encryptor;

	    return CTRGladman;
	}());




	return CryptoJS.mode.CTRGladman;

}));
},{"./cipher-core":103,"./core":104}],115:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Counter block mode.
	 */
	CryptoJS.mode.CTR = (function () {
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = CTR.Encryptor = CTR.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Increment counter
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTR.Decryptor = Encryptor;

	    return CTR;
	}());


	return CryptoJS.mode.CTR;

}));
},{"./cipher-core":103,"./core":104}],116:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Electronic Codebook block mode.
	 */
	CryptoJS.mode.ECB = (function () {
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();

	    ECB.Encryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.encryptBlock(words, offset);
	        }
	    });

	    ECB.Decryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.decryptBlock(words, offset);
	        }
	    });

	    return ECB;
	}());


	return CryptoJS.mode.ECB;

}));
},{"./cipher-core":103,"./core":104}],117:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Output Feedback block mode.
	 */
	CryptoJS.mode.OFB = (function () {
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = OFB.Encryptor = OFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var keystream = this._keystream;

	            // Generate keystream
	            if (iv) {
	                keystream = this._keystream = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    OFB.Decryptor = Encryptor;

	    return OFB;
	}());


	return CryptoJS.mode.OFB;

}));
},{"./cipher-core":103,"./core":104}],118:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * ANSI X.923 padding strategy.
	 */
	CryptoJS.pad.AnsiX923 = {
	    pad: function (data, blockSize) {
	        // Shortcuts
	        var dataSigBytes = data.sigBytes;
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

	        // Compute last byte position
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

	        // Pad
	        data.clamp();
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
	        data.sigBytes += nPaddingBytes;
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Ansix923;

}));
},{"./cipher-core":103,"./core":104}],119:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * ISO 10126 padding strategy.
	 */
	CryptoJS.pad.Iso10126 = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	        // Pad
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Iso10126;

}));
},{"./cipher-core":103,"./core":104}],120:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * ISO/IEC 9797-1 Padding Method 2.
	 */
	CryptoJS.pad.Iso97971 = {
	    pad: function (data, blockSize) {
	        // Add 0x80 byte
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

	        // Zero pad the rest
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
	    },

	    unpad: function (data) {
	        // Remove zero padding
	        CryptoJS.pad.ZeroPadding.unpad(data);

	        // Remove one more byte -- the 0x80 byte
	        data.sigBytes--;
	    }
	};


	return CryptoJS.pad.Iso97971;

}));
},{"./cipher-core":103,"./core":104}],121:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * A noop padding strategy.
	 */
	CryptoJS.pad.NoPadding = {
	    pad: function () {
	    },

	    unpad: function () {
	    }
	};


	return CryptoJS.pad.NoPadding;

}));
},{"./cipher-core":103,"./core":104}],122:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Zero padding strategy.
	 */
	CryptoJS.pad.ZeroPadding = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Pad
	        data.clamp();
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
	    },

	    unpad: function (data) {
	        // Shortcut
	        var dataWords = data.words;

	        // Unpad
	        var i = data.sigBytes - 1;
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
	            i--;
	        }
	        data.sigBytes = i + 1;
	    }
	};


	return CryptoJS.pad.ZeroPadding;

}));
},{"./cipher-core":103,"./core":104}],123:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha1", "./hmac"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA1 = C_algo.SHA1;
	    var HMAC = C_algo.HMAC;

	    /**
	     * Password-Based Key Derivation Function 2 algorithm.
	     */
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hasher to use. Default: SHA1
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: SHA1,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.PBKDF2.create();
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Computes the Password-Based Key Derivation Function 2.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init HMAC
	            var hmac = HMAC.create(cfg.hasher, password);

	            // Initial values
	            var derivedKey = WordArray.create();
	            var blockIndex = WordArray.create([0x00000001]);

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var blockIndexWords = blockIndex.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                var block = hmac.update(salt).finalize(blockIndex);
	                hmac.reset();

	                // Shortcuts
	                var blockWords = block.words;
	                var blockWordsLength = blockWords.length;

	                // Iterations
	                var intermediate = block;
	                for (var i = 1; i < iterations; i++) {
	                    intermediate = hmac.finalize(intermediate);
	                    hmac.reset();

	                    // Shortcut
	                    var intermediateWords = intermediate.words;

	                    // XOR intermediate with block
	                    for (var j = 0; j < blockWordsLength; j++) {
	                        blockWords[j] ^= intermediateWords[j];
	                    }
	                }

	                derivedKey.concat(block);
	                blockIndexWords[0]++;
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Computes the Password-Based Key Derivation Function 2.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.PBKDF2(password, salt);
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.PBKDF2 = function (password, salt, cfg) {
	        return PBKDF2.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.PBKDF2;

}));
},{"./core":104,"./hmac":109,"./sha1":128}],124:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm.
	     *
	     * This is a legacy version that neglected to convert the key to little-endian.
	     * This error doesn't affect the cipher's security,
	     * but it does affect its compatibility with other implementations.
	     */
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	     */
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
	}());


	return CryptoJS.RabbitLegacy;

}));
},{"./cipher-core":103,"./core":104,"./enc-base64":105,"./evpkdf":107,"./md5":112}],125:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm
	     */
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
	            }

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	     */
	    C.Rabbit = StreamCipher._createHelper(Rabbit);
	}());


	return CryptoJS.Rabbit;

}));
},{"./cipher-core":103,"./core":104,"./enc-base64":105,"./evpkdf":107,"./md5":112}],126:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    /**
	     * RC4 stream cipher algorithm.
	     */
	    var RC4 = C_algo.RC4 = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;
	            var keySigBytes = key.sigBytes;

	            // Init sbox
	            var S = this._S = [];
	            for (var i = 0; i < 256; i++) {
	                S[i] = i;
	            }

	            // Key setup
	            for (var i = 0, j = 0; i < 256; i++) {
	                var keyByteIndex = i % keySigBytes;
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

	                j = (j + S[i] + keyByte) % 256;

	                // Swap
	                var t = S[i];
	                S[i] = S[j];
	                S[j] = t;
	            }

	            // Counters
	            this._i = this._j = 0;
	        },

	        _doProcessBlock: function (M, offset) {
	            M[offset] ^= generateKeystreamWord.call(this);
	        },

	        keySize: 256/32,

	        ivSize: 0
	    });

	    function generateKeystreamWord() {
	        // Shortcuts
	        var S = this._S;
	        var i = this._i;
	        var j = this._j;

	        // Generate keystream word
	        var keystreamWord = 0;
	        for (var n = 0; n < 4; n++) {
	            i = (i + 1) % 256;
	            j = (j + S[i]) % 256;

	            // Swap
	            var t = S[i];
	            S[i] = S[j];
	            S[j] = t;

	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
	        }

	        // Update counters
	        this._i = i;
	        this._j = j;

	        return keystreamWord;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4 = StreamCipher._createHelper(RC4);

	    /**
	     * Modified RC4 stream cipher algorithm.
	     */
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} drop The number of keystream words to drop. Default 192
	         */
	        cfg: RC4.cfg.extend({
	            drop: 192
	        }),

	        _doReset: function () {
	            RC4._doReset.call(this);

	            // Drop
	            for (var i = this.cfg.drop; i > 0; i--) {
	                generateKeystreamWord.call(this);
	            }
	        }
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
	}());


	return CryptoJS.RC4;

}));
},{"./cipher-core":103,"./core":104,"./enc-base64":105,"./evpkdf":107,"./md5":112}],127:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var _zl = WordArray.create([
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
	    var _zr = WordArray.create([
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
	    var _sl = WordArray.create([
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
	    var _sr = WordArray.create([
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

	    /**
	     * RIPEMD160 hash algorithm.
	     */
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
	        _doReset: function () {
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
	        },

	        _doProcessBlock: function (M, offset) {

	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                // Swap
	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }
	            // Shortcut
	            var H  = this._hash.words;
	            var hl = _hl.words;
	            var hr = _hr.words;
	            var zl = _zl.words;
	            var zr = _zr.words;
	            var sl = _sl.words;
	            var sr = _sr.words;

	            // Working variables
	            var al, bl, cl, dl, el;
	            var ar, br, cr, dr, er;

	            ar = al = H[0];
	            br = bl = H[1];
	            cr = cl = H[2];
	            dr = dl = H[3];
	            er = el = H[4];
	            // Computation
	            var t;
	            for (var i = 0; i < 80; i += 1) {
	                t = (al +  M[offset+zl[i]])|0;
	                if (i<16){
		            t +=  f1(bl,cl,dl) + hl[0];
	                } else if (i<32) {
		            t +=  f2(bl,cl,dl) + hl[1];
	                } else if (i<48) {
		            t +=  f3(bl,cl,dl) + hl[2];
	                } else if (i<64) {
		            t +=  f4(bl,cl,dl) + hl[3];
	                } else {// if (i<80) {
		            t +=  f5(bl,cl,dl) + hl[4];
	                }
	                t = t|0;
	                t =  rotl(t,sl[i]);
	                t = (t+el)|0;
	                al = el;
	                el = dl;
	                dl = rotl(cl, 10);
	                cl = bl;
	                bl = t;

	                t = (ar + M[offset+zr[i]])|0;
	                if (i<16){
		            t +=  f5(br,cr,dr) + hr[0];
	                } else if (i<32) {
		            t +=  f4(br,cr,dr) + hr[1];
	                } else if (i<48) {
		            t +=  f3(br,cr,dr) + hr[2];
	                } else if (i<64) {
		            t +=  f2(br,cr,dr) + hr[3];
	                } else {// if (i<80) {
		            t +=  f1(br,cr,dr) + hr[4];
	                }
	                t = t|0;
	                t =  rotl(t,sr[i]) ;
	                t = (t+er)|0;
	                ar = er;
	                er = dr;
	                dr = rotl(cr, 10);
	                cr = br;
	                br = t;
	            }
	            // Intermediate hash value
	            t    = (H[1] + cl + dr)|0;
	            H[1] = (H[2] + dl + er)|0;
	            H[2] = (H[3] + el + ar)|0;
	            H[3] = (H[4] + al + br)|0;
	            H[4] = (H[0] + bl + cr)|0;
	            H[0] =  t;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	            );
	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 5; i++) {
	                // Shortcut
	                var H_i = H[i];

	                // Swap
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });


	    function f1(x, y, z) {
	        return ((x) ^ (y) ^ (z));

	    }

	    function f2(x, y, z) {
	        return (((x)&(y)) | ((~x)&(z)));
	    }

	    function f3(x, y, z) {
	        return (((x) | (~(y))) ^ (z));
	    }

	    function f4(x, y, z) {
	        return (((x) & (z)) | ((y)&(~(z))));
	    }

	    function f5(x, y, z) {
	        return ((x) ^ ((y) |(~(z))));

	    }

	    function rotl(x,n) {
	        return (x<<n) | (x>>>(32-n));
	    }


	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.RIPEMD160('message');
	     *     var hash = CryptoJS.RIPEMD160(wordArray);
	     */
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	     */
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
	}(Math));


	return CryptoJS.RIPEMD160;

}));
},{"./core":104}],128:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];

	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }

	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }

	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());


	return CryptoJS.SHA1;

}));
},{"./core":104}],129:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha256"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha256"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA256 = C_algo.SHA256;

	    /**
	     * SHA-224 hash algorithm.
	     */
	    var SHA224 = C_algo.SHA224 = SHA256.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA256._doFinalize.call(this);

	            hash.sigBytes -= 4;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA224('message');
	     *     var hash = CryptoJS.SHA224(wordArray);
	     */
	    C.SHA224 = SHA256._createHelper(SHA224);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA224(message, key);
	     */
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
	}());


	return CryptoJS.SHA224;

}));
},{"./core":104,"./sha256":130}],130:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Initialization and round constants tables
	    var H = [];
	    var K = [];

	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }

	            return true;
	        }

	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }

	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

	                nPrime++;
	            }

	            n++;
	        }
	    }());

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];

	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);

	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);

	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }

	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);

	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;

	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));


	return CryptoJS.SHA256;

}));
},{"./core":104}],131:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var C_algo = C.algo;

	    // Constants tables
	    var RHO_OFFSETS = [];
	    var PI_INDEXES  = [];
	    var ROUND_CONSTANTS = [];

	    // Compute Constants
	    (function () {
	        // Compute rho offset constants
	        var x = 1, y = 0;
	        for (var t = 0; t < 24; t++) {
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

	            var newX = y % 5;
	            var newY = (2 * x + 3 * y) % 5;
	            x = newX;
	            y = newY;
	        }

	        // Compute pi index constants
	        for (var x = 0; x < 5; x++) {
	            for (var y = 0; y < 5; y++) {
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
	            }
	        }

	        // Compute round constants
	        var LFSR = 0x01;
	        for (var i = 0; i < 24; i++) {
	            var roundConstantMsw = 0;
	            var roundConstantLsw = 0;

	            for (var j = 0; j < 7; j++) {
	                if (LFSR & 0x01) {
	                    var bitPosition = (1 << j) - 1;
	                    if (bitPosition < 32) {
	                        roundConstantLsw ^= 1 << bitPosition;
	                    } else /* if (bitPosition >= 32) */ {
	                        roundConstantMsw ^= 1 << (bitPosition - 32);
	                    }
	                }

	                // Compute next LFSR
	                if (LFSR & 0x80) {
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
	                    LFSR = (LFSR << 1) ^ 0x71;
	                } else {
	                    LFSR <<= 1;
	                }
	            }

	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
	        }
	    }());

	    // Reusable objects for temporary values
	    var T = [];
	    (function () {
	        for (var i = 0; i < 25; i++) {
	            T[i] = X64Word.create();
	        }
	    }());

	    /**
	     * SHA-3 hash algorithm.
	     */
	    var SHA3 = C_algo.SHA3 = Hasher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} outputLength
	         *   The desired number of bits in the output hash.
	         *   Only values permitted are: 224, 256, 384, 512.
	         *   Default: 512
	         */
	        cfg: Hasher.cfg.extend({
	            outputLength: 512
	        }),

	        _doReset: function () {
	            var state = this._state = []
	            for (var i = 0; i < 25; i++) {
	                state[i] = new X64Word.init();
	            }

	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var state = this._state;
	            var nBlockSizeLanes = this.blockSize / 2;

	            // Absorb
	            for (var i = 0; i < nBlockSizeLanes; i++) {
	                // Shortcuts
	                var M2i  = M[offset + 2 * i];
	                var M2i1 = M[offset + 2 * i + 1];

	                // Swap endian
	                M2i = (
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
	                );
	                M2i1 = (
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
	                );

	                // Absorb message into state
	                var lane = state[i];
	                lane.high ^= M2i1;
	                lane.low  ^= M2i;
	            }

	            // Rounds
	            for (var round = 0; round < 24; round++) {
	                // Theta
	                for (var x = 0; x < 5; x++) {
	                    // Mix column lanes
	                    var tMsw = 0, tLsw = 0;
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        tMsw ^= lane.high;
	                        tLsw ^= lane.low;
	                    }

	                    // Temporary values
	                    var Tx = T[x];
	                    Tx.high = tMsw;
	                    Tx.low  = tLsw;
	                }
	                for (var x = 0; x < 5; x++) {
	                    // Shortcuts
	                    var Tx4 = T[(x + 4) % 5];
	                    var Tx1 = T[(x + 1) % 5];
	                    var Tx1Msw = Tx1.high;
	                    var Tx1Lsw = Tx1.low;

	                    // Mix surrounding columns
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        lane.high ^= tMsw;
	                        lane.low  ^= tLsw;
	                    }
	                }

	                // Rho Pi
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
	                    // Shortcuts
	                    var lane = state[laneIndex];
	                    var laneMsw = lane.high;
	                    var laneLsw = lane.low;
	                    var rhoOffset = RHO_OFFSETS[laneIndex];

	                    // Rotate lanes
	                    if (rhoOffset < 32) {
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
	                    } else /* if (rhoOffset >= 32) */ {
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
	                    }

	                    // Transpose lanes
	                    var TPiLane = T[PI_INDEXES[laneIndex]];
	                    TPiLane.high = tMsw;
	                    TPiLane.low  = tLsw;
	                }

	                // Rho pi at x = y = 0
	                var T0 = T[0];
	                var state0 = state[0];
	                T0.high = state0.high;
	                T0.low  = state0.low;

	                // Chi
	                for (var x = 0; x < 5; x++) {
	                    for (var y = 0; y < 5; y++) {
	                        // Shortcuts
	                        var laneIndex = x + 5 * y;
	                        var lane = state[laneIndex];
	                        var TLane = T[laneIndex];
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

	                        // Mix rows
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
	                    }
	                }

	                // Iota
	                var lane = state[0];
	                var roundConstant = ROUND_CONSTANTS[round];
	                lane.high ^= roundConstant.high;
	                lane.low  ^= roundConstant.low;;
	            }
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;
	            var blockSizeBits = this.blockSize * 32;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var state = this._state;
	            var outputLengthBytes = this.cfg.outputLength / 8;
	            var outputLengthLanes = outputLengthBytes / 8;

	            // Squeeze
	            var hashWords = [];
	            for (var i = 0; i < outputLengthLanes; i++) {
	                // Shortcuts
	                var lane = state[i];
	                var laneMsw = lane.high;
	                var laneLsw = lane.low;

	                // Swap endian
	                laneMsw = (
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
	                );
	                laneLsw = (
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
	                );

	                // Squeeze state to retrieve hash
	                hashWords.push(laneLsw);
	                hashWords.push(laneMsw);
	            }

	            // Return final computed hash
	            return new WordArray.init(hashWords, outputLengthBytes);
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);

	            var state = clone._state = this._state.slice(0);
	            for (var i = 0; i < 25; i++) {
	                state[i] = state[i].clone();
	            }

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA3('message');
	     *     var hash = CryptoJS.SHA3(wordArray);
	     */
	    C.SHA3 = Hasher._createHelper(SHA3);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA3(message, key);
	     */
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
	}(Math));


	return CryptoJS.SHA3;

}));
},{"./core":104,"./x64-core":135}],132:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core", "./sha512"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;
	    var SHA512 = C_algo.SHA512;

	    /**
	     * SHA-384 hash algorithm.
	     */
	    var SHA384 = C_algo.SHA384 = SHA512.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA512._doFinalize.call(this);

	            hash.sigBytes -= 16;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA384('message');
	     *     var hash = CryptoJS.SHA384(wordArray);
	     */
	    C.SHA384 = SHA512._createHelper(SHA384);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA384(message, key);
	     */
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
	}());


	return CryptoJS.SHA384;

}));
},{"./core":104,"./sha512":133,"./x64-core":135}],133:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;

	    function X64Word_create() {
	        return X64Word.create.apply(X64Word, arguments);
	    }

	    // Constants
	    var K = [
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
	    ];

	    // Reusable objects
	    var W = [];
	    (function () {
	        for (var i = 0; i < 80; i++) {
	            W[i] = X64Word_create();
	        }
	    }());

	    /**
	     * SHA-512 hash algorithm.
	     */
	    var SHA512 = C_algo.SHA512 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var H = this._hash.words;

	            var H0 = H[0];
	            var H1 = H[1];
	            var H2 = H[2];
	            var H3 = H[3];
	            var H4 = H[4];
	            var H5 = H[5];
	            var H6 = H[6];
	            var H7 = H[7];

	            var H0h = H0.high;
	            var H0l = H0.low;
	            var H1h = H1.high;
	            var H1l = H1.low;
	            var H2h = H2.high;
	            var H2l = H2.low;
	            var H3h = H3.high;
	            var H3l = H3.low;
	            var H4h = H4.high;
	            var H4l = H4.low;
	            var H5h = H5.high;
	            var H5l = H5.low;
	            var H6h = H6.high;
	            var H6l = H6.low;
	            var H7h = H7.high;
	            var H7l = H7.low;

	            // Working variables
	            var ah = H0h;
	            var al = H0l;
	            var bh = H1h;
	            var bl = H1l;
	            var ch = H2h;
	            var cl = H2l;
	            var dh = H3h;
	            var dl = H3l;
	            var eh = H4h;
	            var el = H4l;
	            var fh = H5h;
	            var fl = H5l;
	            var gh = H6h;
	            var gl = H6l;
	            var hh = H7h;
	            var hl = H7l;

	            // Rounds
	            for (var i = 0; i < 80; i++) {
	                // Shortcut
	                var Wi = W[i];

	                // Extend message
	                if (i < 16) {
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
	                } else {
	                    // Gamma0
	                    var gamma0x  = W[i - 15];
	                    var gamma0xh = gamma0x.high;
	                    var gamma0xl = gamma0x.low;
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

	                    // Gamma1
	                    var gamma1x  = W[i - 2];
	                    var gamma1xh = gamma1x.high;
	                    var gamma1xl = gamma1x.low;
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	                    var Wi7  = W[i - 7];
	                    var Wi7h = Wi7.high;
	                    var Wi7l = Wi7.low;

	                    var Wi16  = W[i - 16];
	                    var Wi16h = Wi16.high;
	                    var Wi16l = Wi16.low;

	                    var Wil = gamma0l + Wi7l;
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
	                    var Wil = Wil + gamma1l;
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
	                    var Wil = Wil + Wi16l;
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

	                    Wi.high = Wih;
	                    Wi.low  = Wil;
	                }

	                var chh  = (eh & fh) ^ (~eh & gh);
	                var chl  = (el & fl) ^ (~el & gl);
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

	                // t1 = h + sigma1 + ch + K[i] + W[i]
	                var Ki  = K[i];
	                var Kih = Ki.high;
	                var Kil = Ki.low;

	                var t1l = hl + sigma1l;
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
	                var t1l = t1l + chl;
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
	                var t1l = t1l + Kil;
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
	                var t1l = t1l + Wil;
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

	                // t2 = sigma0 + maj
	                var t2l = sigma0l + majl;
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

	                // Update working variables
	                hh = gh;
	                hl = gl;
	                gh = fh;
	                gl = fl;
	                fh = eh;
	                fl = el;
	                el = (dl + t1l) | 0;
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
	                dh = ch;
	                dl = cl;
	                ch = bh;
	                cl = bl;
	                bh = ah;
	                bl = al;
	                al = (t1l + t2l) | 0;
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
	            }

	            // Intermediate hash value
	            H0l = H0.low  = (H0l + al);
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
	            H1l = H1.low  = (H1l + bl);
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
	            H2l = H2.low  = (H2l + cl);
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
	            H3l = H3.low  = (H3l + dl);
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
	            H4l = H4.low  = (H4l + el);
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
	            H5l = H5.low  = (H5l + fl);
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
	            H6l = H6.low  = (H6l + gl);
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
	            H7l = H7.low  = (H7l + hl);
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Convert hash to 32-bit word array before returning
	            var hash = this._hash.toX32();

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        },

	        blockSize: 1024/32
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA512('message');
	     *     var hash = CryptoJS.SHA512(wordArray);
	     */
	    C.SHA512 = Hasher._createHelper(SHA512);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA512(message, key);
	     */
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
	}());


	return CryptoJS.SHA512;

}));
},{"./core":104,"./x64-core":135}],134:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Permuted Choice 1 constants
	    var PC1 = [
	        57, 49, 41, 33, 25, 17, 9,  1,
	        58, 50, 42, 34, 26, 18, 10, 2,
	        59, 51, 43, 35, 27, 19, 11, 3,
	        60, 52, 44, 36, 63, 55, 47, 39,
	        31, 23, 15, 7,  62, 54, 46, 38,
	        30, 22, 14, 6,  61, 53, 45, 37,
	        29, 21, 13, 5,  28, 20, 12, 4
	    ];

	    // Permuted Choice 2 constants
	    var PC2 = [
	        14, 17, 11, 24, 1,  5,
	        3,  28, 15, 6,  21, 10,
	        23, 19, 12, 4,  26, 8,
	        16, 7,  27, 20, 13, 2,
	        41, 52, 31, 37, 47, 55,
	        30, 40, 51, 45, 33, 48,
	        44, 49, 39, 56, 34, 53,
	        46, 42, 50, 36, 29, 32
	    ];

	    // Cumulative bit shift constants
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

	    // SBOXes and round permutation constants
	    var SBOX_P = [
	        {
	            0x0: 0x808200,
	            0x10000000: 0x8000,
	            0x20000000: 0x808002,
	            0x30000000: 0x2,
	            0x40000000: 0x200,
	            0x50000000: 0x808202,
	            0x60000000: 0x800202,
	            0x70000000: 0x800000,
	            0x80000000: 0x202,
	            0x90000000: 0x800200,
	            0xa0000000: 0x8200,
	            0xb0000000: 0x808000,
	            0xc0000000: 0x8002,
	            0xd0000000: 0x800002,
	            0xe0000000: 0x0,
	            0xf0000000: 0x8202,
	            0x8000000: 0x0,
	            0x18000000: 0x808202,
	            0x28000000: 0x8202,
	            0x38000000: 0x8000,
	            0x48000000: 0x808200,
	            0x58000000: 0x200,
	            0x68000000: 0x808002,
	            0x78000000: 0x2,
	            0x88000000: 0x800200,
	            0x98000000: 0x8200,
	            0xa8000000: 0x808000,
	            0xb8000000: 0x800202,
	            0xc8000000: 0x800002,
	            0xd8000000: 0x8002,
	            0xe8000000: 0x202,
	            0xf8000000: 0x800000,
	            0x1: 0x8000,
	            0x10000001: 0x2,
	            0x20000001: 0x808200,
	            0x30000001: 0x800000,
	            0x40000001: 0x808002,
	            0x50000001: 0x8200,
	            0x60000001: 0x200,
	            0x70000001: 0x800202,
	            0x80000001: 0x808202,
	            0x90000001: 0x808000,
	            0xa0000001: 0x800002,
	            0xb0000001: 0x8202,
	            0xc0000001: 0x202,
	            0xd0000001: 0x800200,
	            0xe0000001: 0x8002,
	            0xf0000001: 0x0,
	            0x8000001: 0x808202,
	            0x18000001: 0x808000,
	            0x28000001: 0x800000,
	            0x38000001: 0x200,
	            0x48000001: 0x8000,
	            0x58000001: 0x800002,
	            0x68000001: 0x2,
	            0x78000001: 0x8202,
	            0x88000001: 0x8002,
	            0x98000001: 0x800202,
	            0xa8000001: 0x202,
	            0xb8000001: 0x808200,
	            0xc8000001: 0x800200,
	            0xd8000001: 0x0,
	            0xe8000001: 0x8200,
	            0xf8000001: 0x808002
	        },
	        {
	            0x0: 0x40084010,
	            0x1000000: 0x4000,
	            0x2000000: 0x80000,
	            0x3000000: 0x40080010,
	            0x4000000: 0x40000010,
	            0x5000000: 0x40084000,
	            0x6000000: 0x40004000,
	            0x7000000: 0x10,
	            0x8000000: 0x84000,
	            0x9000000: 0x40004010,
	            0xa000000: 0x40000000,
	            0xb000000: 0x84010,
	            0xc000000: 0x80010,
	            0xd000000: 0x0,
	            0xe000000: 0x4010,
	            0xf000000: 0x40080000,
	            0x800000: 0x40004000,
	            0x1800000: 0x84010,
	            0x2800000: 0x10,
	            0x3800000: 0x40004010,
	            0x4800000: 0x40084010,
	            0x5800000: 0x40000000,
	            0x6800000: 0x80000,
	            0x7800000: 0x40080010,
	            0x8800000: 0x80010,
	            0x9800000: 0x0,
	            0xa800000: 0x4000,
	            0xb800000: 0x40080000,
	            0xc800000: 0x40000010,
	            0xd800000: 0x84000,
	            0xe800000: 0x40084000,
	            0xf800000: 0x4010,
	            0x10000000: 0x0,
	            0x11000000: 0x40080010,
	            0x12000000: 0x40004010,
	            0x13000000: 0x40084000,
	            0x14000000: 0x40080000,
	            0x15000000: 0x10,
	            0x16000000: 0x84010,
	            0x17000000: 0x4000,
	            0x18000000: 0x4010,
	            0x19000000: 0x80000,
	            0x1a000000: 0x80010,
	            0x1b000000: 0x40000010,
	            0x1c000000: 0x84000,
	            0x1d000000: 0x40004000,
	            0x1e000000: 0x40000000,
	            0x1f000000: 0x40084010,
	            0x10800000: 0x84010,
	            0x11800000: 0x80000,
	            0x12800000: 0x40080000,
	            0x13800000: 0x4000,
	            0x14800000: 0x40004000,
	            0x15800000: 0x40084010,
	            0x16800000: 0x10,
	            0x17800000: 0x40000000,
	            0x18800000: 0x40084000,
	            0x19800000: 0x40000010,
	            0x1a800000: 0x40004010,
	            0x1b800000: 0x80010,
	            0x1c800000: 0x0,
	            0x1d800000: 0x4010,
	            0x1e800000: 0x40080010,
	            0x1f800000: 0x84000
	        },
	        {
	            0x0: 0x104,
	            0x100000: 0x0,
	            0x200000: 0x4000100,
	            0x300000: 0x10104,
	            0x400000: 0x10004,
	            0x500000: 0x4000004,
	            0x600000: 0x4010104,
	            0x700000: 0x4010000,
	            0x800000: 0x4000000,
	            0x900000: 0x4010100,
	            0xa00000: 0x10100,
	            0xb00000: 0x4010004,
	            0xc00000: 0x4000104,
	            0xd00000: 0x10000,
	            0xe00000: 0x4,
	            0xf00000: 0x100,
	            0x80000: 0x4010100,
	            0x180000: 0x4010004,
	            0x280000: 0x0,
	            0x380000: 0x4000100,
	            0x480000: 0x4000004,
	            0x580000: 0x10000,
	            0x680000: 0x10004,
	            0x780000: 0x104,
	            0x880000: 0x4,
	            0x980000: 0x100,
	            0xa80000: 0x4010000,
	            0xb80000: 0x10104,
	            0xc80000: 0x10100,
	            0xd80000: 0x4000104,
	            0xe80000: 0x4010104,
	            0xf80000: 0x4000000,
	            0x1000000: 0x4010100,
	            0x1100000: 0x10004,
	            0x1200000: 0x10000,
	            0x1300000: 0x4000100,
	            0x1400000: 0x100,
	            0x1500000: 0x4010104,
	            0x1600000: 0x4000004,
	            0x1700000: 0x0,
	            0x1800000: 0x4000104,
	            0x1900000: 0x4000000,
	            0x1a00000: 0x4,
	            0x1b00000: 0x10100,
	            0x1c00000: 0x4010000,
	            0x1d00000: 0x104,
	            0x1e00000: 0x10104,
	            0x1f00000: 0x4010004,
	            0x1080000: 0x4000000,
	            0x1180000: 0x104,
	            0x1280000: 0x4010100,
	            0x1380000: 0x0,
	            0x1480000: 0x10004,
	            0x1580000: 0x4000100,
	            0x1680000: 0x100,
	            0x1780000: 0x4010004,
	            0x1880000: 0x10000,
	            0x1980000: 0x4010104,
	            0x1a80000: 0x10104,
	            0x1b80000: 0x4000004,
	            0x1c80000: 0x4000104,
	            0x1d80000: 0x4010000,
	            0x1e80000: 0x4,
	            0x1f80000: 0x10100
	        },
	        {
	            0x0: 0x80401000,
	            0x10000: 0x80001040,
	            0x20000: 0x401040,
	            0x30000: 0x80400000,
	            0x40000: 0x0,
	            0x50000: 0x401000,
	            0x60000: 0x80000040,
	            0x70000: 0x400040,
	            0x80000: 0x80000000,
	            0x90000: 0x400000,
	            0xa0000: 0x40,
	            0xb0000: 0x80001000,
	            0xc0000: 0x80400040,
	            0xd0000: 0x1040,
	            0xe0000: 0x1000,
	            0xf0000: 0x80401040,
	            0x8000: 0x80001040,
	            0x18000: 0x40,
	            0x28000: 0x80400040,
	            0x38000: 0x80001000,
	            0x48000: 0x401000,
	            0x58000: 0x80401040,
	            0x68000: 0x0,
	            0x78000: 0x80400000,
	            0x88000: 0x1000,
	            0x98000: 0x80401000,
	            0xa8000: 0x400000,
	            0xb8000: 0x1040,
	            0xc8000: 0x80000000,
	            0xd8000: 0x400040,
	            0xe8000: 0x401040,
	            0xf8000: 0x80000040,
	            0x100000: 0x400040,
	            0x110000: 0x401000,
	            0x120000: 0x80000040,
	            0x130000: 0x0,
	            0x140000: 0x1040,
	            0x150000: 0x80400040,
	            0x160000: 0x80401000,
	            0x170000: 0x80001040,
	            0x180000: 0x80401040,
	            0x190000: 0x80000000,
	            0x1a0000: 0x80400000,
	            0x1b0000: 0x401040,
	            0x1c0000: 0x80001000,
	            0x1d0000: 0x400000,
	            0x1e0000: 0x40,
	            0x1f0000: 0x1000,
	            0x108000: 0x80400000,
	            0x118000: 0x80401040,
	            0x128000: 0x0,
	            0x138000: 0x401000,
	            0x148000: 0x400040,
	            0x158000: 0x80000000,
	            0x168000: 0x80001040,
	            0x178000: 0x40,
	            0x188000: 0x80000040,
	            0x198000: 0x1000,
	            0x1a8000: 0x80001000,
	            0x1b8000: 0x80400040,
	            0x1c8000: 0x1040,
	            0x1d8000: 0x80401000,
	            0x1e8000: 0x400000,
	            0x1f8000: 0x401040
	        },
	        {
	            0x0: 0x80,
	            0x1000: 0x1040000,
	            0x2000: 0x40000,
	            0x3000: 0x20000000,
	            0x4000: 0x20040080,
	            0x5000: 0x1000080,
	            0x6000: 0x21000080,
	            0x7000: 0x40080,
	            0x8000: 0x1000000,
	            0x9000: 0x20040000,
	            0xa000: 0x20000080,
	            0xb000: 0x21040080,
	            0xc000: 0x21040000,
	            0xd000: 0x0,
	            0xe000: 0x1040080,
	            0xf000: 0x21000000,
	            0x800: 0x1040080,
	            0x1800: 0x21000080,
	            0x2800: 0x80,
	            0x3800: 0x1040000,
	            0x4800: 0x40000,
	            0x5800: 0x20040080,
	            0x6800: 0x21040000,
	            0x7800: 0x20000000,
	            0x8800: 0x20040000,
	            0x9800: 0x0,
	            0xa800: 0x21040080,
	            0xb800: 0x1000080,
	            0xc800: 0x20000080,
	            0xd800: 0x21000000,
	            0xe800: 0x1000000,
	            0xf800: 0x40080,
	            0x10000: 0x40000,
	            0x11000: 0x80,
	            0x12000: 0x20000000,
	            0x13000: 0x21000080,
	            0x14000: 0x1000080,
	            0x15000: 0x21040000,
	            0x16000: 0x20040080,
	            0x17000: 0x1000000,
	            0x18000: 0x21040080,
	            0x19000: 0x21000000,
	            0x1a000: 0x1040000,
	            0x1b000: 0x20040000,
	            0x1c000: 0x40080,
	            0x1d000: 0x20000080,
	            0x1e000: 0x0,
	            0x1f000: 0x1040080,
	            0x10800: 0x21000080,
	            0x11800: 0x1000000,
	            0x12800: 0x1040000,
	            0x13800: 0x20040080,
	            0x14800: 0x20000000,
	            0x15800: 0x1040080,
	            0x16800: 0x80,
	            0x17800: 0x21040000,
	            0x18800: 0x40080,
	            0x19800: 0x21040080,
	            0x1a800: 0x0,
	            0x1b800: 0x21000000,
	            0x1c800: 0x1000080,
	            0x1d800: 0x40000,
	            0x1e800: 0x20040000,
	            0x1f800: 0x20000080
	        },
	        {
	            0x0: 0x10000008,
	            0x100: 0x2000,
	            0x200: 0x10200000,
	            0x300: 0x10202008,
	            0x400: 0x10002000,
	            0x500: 0x200000,
	            0x600: 0x200008,
	            0x700: 0x10000000,
	            0x800: 0x0,
	            0x900: 0x10002008,
	            0xa00: 0x202000,
	            0xb00: 0x8,
	            0xc00: 0x10200008,
	            0xd00: 0x202008,
	            0xe00: 0x2008,
	            0xf00: 0x10202000,
	            0x80: 0x10200000,
	            0x180: 0x10202008,
	            0x280: 0x8,
	            0x380: 0x200000,
	            0x480: 0x202008,
	            0x580: 0x10000008,
	            0x680: 0x10002000,
	            0x780: 0x2008,
	            0x880: 0x200008,
	            0x980: 0x2000,
	            0xa80: 0x10002008,
	            0xb80: 0x10200008,
	            0xc80: 0x0,
	            0xd80: 0x10202000,
	            0xe80: 0x202000,
	            0xf80: 0x10000000,
	            0x1000: 0x10002000,
	            0x1100: 0x10200008,
	            0x1200: 0x10202008,
	            0x1300: 0x2008,
	            0x1400: 0x200000,
	            0x1500: 0x10000000,
	            0x1600: 0x10000008,
	            0x1700: 0x202000,
	            0x1800: 0x202008,
	            0x1900: 0x0,
	            0x1a00: 0x8,
	            0x1b00: 0x10200000,
	            0x1c00: 0x2000,
	            0x1d00: 0x10002008,
	            0x1e00: 0x10202000,
	            0x1f00: 0x200008,
	            0x1080: 0x8,
	            0x1180: 0x202000,
	            0x1280: 0x200000,
	            0x1380: 0x10000008,
	            0x1480: 0x10002000,
	            0x1580: 0x2008,
	            0x1680: 0x10202008,
	            0x1780: 0x10200000,
	            0x1880: 0x10202000,
	            0x1980: 0x10200008,
	            0x1a80: 0x2000,
	            0x1b80: 0x202008,
	            0x1c80: 0x200008,
	            0x1d80: 0x0,
	            0x1e80: 0x10000000,
	            0x1f80: 0x10002008
	        },
	        {
	            0x0: 0x100000,
	            0x10: 0x2000401,
	            0x20: 0x400,
	            0x30: 0x100401,
	            0x40: 0x2100401,
	            0x50: 0x0,
	            0x60: 0x1,
	            0x70: 0x2100001,
	            0x80: 0x2000400,
	            0x90: 0x100001,
	            0xa0: 0x2000001,
	            0xb0: 0x2100400,
	            0xc0: 0x2100000,
	            0xd0: 0x401,
	            0xe0: 0x100400,
	            0xf0: 0x2000000,
	            0x8: 0x2100001,
	            0x18: 0x0,
	            0x28: 0x2000401,
	            0x38: 0x2100400,
	            0x48: 0x100000,
	            0x58: 0x2000001,
	            0x68: 0x2000000,
	            0x78: 0x401,
	            0x88: 0x100401,
	            0x98: 0x2000400,
	            0xa8: 0x2100000,
	            0xb8: 0x100001,
	            0xc8: 0x400,
	            0xd8: 0x2100401,
	            0xe8: 0x1,
	            0xf8: 0x100400,
	            0x100: 0x2000000,
	            0x110: 0x100000,
	            0x120: 0x2000401,
	            0x130: 0x2100001,
	            0x140: 0x100001,
	            0x150: 0x2000400,
	            0x160: 0x2100400,
	            0x170: 0x100401,
	            0x180: 0x401,
	            0x190: 0x2100401,
	            0x1a0: 0x100400,
	            0x1b0: 0x1,
	            0x1c0: 0x0,
	            0x1d0: 0x2100000,
	            0x1e0: 0x2000001,
	            0x1f0: 0x400,
	            0x108: 0x100400,
	            0x118: 0x2000401,
	            0x128: 0x2100001,
	            0x138: 0x1,
	            0x148: 0x2000000,
	            0x158: 0x100000,
	            0x168: 0x401,
	            0x178: 0x2100400,
	            0x188: 0x2000001,
	            0x198: 0x2100000,
	            0x1a8: 0x0,
	            0x1b8: 0x2100401,
	            0x1c8: 0x100401,
	            0x1d8: 0x400,
	            0x1e8: 0x2000400,
	            0x1f8: 0x100001
	        },
	        {
	            0x0: 0x8000820,
	            0x1: 0x20000,
	            0x2: 0x8000000,
	            0x3: 0x20,
	            0x4: 0x20020,
	            0x5: 0x8020820,
	            0x6: 0x8020800,
	            0x7: 0x800,
	            0x8: 0x8020000,
	            0x9: 0x8000800,
	            0xa: 0x20800,
	            0xb: 0x8020020,
	            0xc: 0x820,
	            0xd: 0x0,
	            0xe: 0x8000020,
	            0xf: 0x20820,
	            0x80000000: 0x800,
	            0x80000001: 0x8020820,
	            0x80000002: 0x8000820,
	            0x80000003: 0x8000000,
	            0x80000004: 0x8020000,
	            0x80000005: 0x20800,
	            0x80000006: 0x20820,
	            0x80000007: 0x20,
	            0x80000008: 0x8000020,
	            0x80000009: 0x820,
	            0x8000000a: 0x20020,
	            0x8000000b: 0x8020800,
	            0x8000000c: 0x0,
	            0x8000000d: 0x8020020,
	            0x8000000e: 0x8000800,
	            0x8000000f: 0x20000,
	            0x10: 0x20820,
	            0x11: 0x8020800,
	            0x12: 0x20,
	            0x13: 0x800,
	            0x14: 0x8000800,
	            0x15: 0x8000020,
	            0x16: 0x8020020,
	            0x17: 0x20000,
	            0x18: 0x0,
	            0x19: 0x20020,
	            0x1a: 0x8020000,
	            0x1b: 0x8000820,
	            0x1c: 0x8020820,
	            0x1d: 0x20800,
	            0x1e: 0x820,
	            0x1f: 0x8000000,
	            0x80000010: 0x20000,
	            0x80000011: 0x800,
	            0x80000012: 0x8020020,
	            0x80000013: 0x20820,
	            0x80000014: 0x20,
	            0x80000015: 0x8020000,
	            0x80000016: 0x8000000,
	            0x80000017: 0x8000820,
	            0x80000018: 0x8020820,
	            0x80000019: 0x8000020,
	            0x8000001a: 0x8000800,
	            0x8000001b: 0x0,
	            0x8000001c: 0x20800,
	            0x8000001d: 0x820,
	            0x8000001e: 0x20020,
	            0x8000001f: 0x8020800
	        }
	    ];

	    // Masks that select the SBOX input
	    var SBOX_MASK = [
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
	    ];

	    /**
	     * DES block cipher algorithm.
	     */
	    var DES = C_algo.DES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Select 56 bits according to PC1
	            var keyBits = [];
	            for (var i = 0; i < 56; i++) {
	                var keyBitPos = PC1[i] - 1;
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
	            }

	            // Assemble 16 subkeys
	            var subKeys = this._subKeys = [];
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
	                // Create subkey
	                var subKey = subKeys[nSubKey] = [];

	                // Shortcut
	                var bitShift = BIT_SHIFTS[nSubKey];

	                // Select 48 bits according to PC2
	                for (var i = 0; i < 24; i++) {
	                    // Select from the left 28 key bits
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

	                    // Select from the right 28 key bits
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }

	                // Since each subkey is applied to an expanded 32-bit input,
	                // the subkey can be broken into 8 values scaled to 32-bits,
	                // which allows the key to be used without expansion
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
	                for (var i = 1; i < 7; i++) {
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
	                }
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
	            }

	            // Compute inverse subkeys
	            var invSubKeys = this._invSubKeys = [];
	            for (var i = 0; i < 16; i++) {
	                invSubKeys[i] = subKeys[15 - i];
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._subKeys);
	        },

	        decryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._invSubKeys);
	        },

	        _doCryptBlock: function (M, offset, subKeys) {
	            // Get input
	            this._lBlock = M[offset];
	            this._rBlock = M[offset + 1];

	            // Initial permutation
	            exchangeLR.call(this, 4,  0x0f0f0f0f);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeLR.call(this, 1,  0x55555555);

	            // Rounds
	            for (var round = 0; round < 16; round++) {
	                // Shortcuts
	                var subKey = subKeys[round];
	                var lBlock = this._lBlock;
	                var rBlock = this._rBlock;

	                // Feistel function
	                var f = 0;
	                for (var i = 0; i < 8; i++) {
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
	                }
	                this._lBlock = rBlock;
	                this._rBlock = lBlock ^ f;
	            }

	            // Undo swap from last round
	            var t = this._lBlock;
	            this._lBlock = this._rBlock;
	            this._rBlock = t;

	            // Final permutation
	            exchangeLR.call(this, 1,  0x55555555);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeLR.call(this, 4,  0x0f0f0f0f);

	            // Set output
	            M[offset] = this._lBlock;
	            M[offset + 1] = this._rBlock;
	        },

	        keySize: 64/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    // Swap bits across the left and right words
	    function exchangeLR(offset, mask) {
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
	        this._rBlock ^= t;
	        this._lBlock ^= t << offset;
	    }

	    function exchangeRL(offset, mask) {
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
	        this._lBlock ^= t;
	        this._rBlock ^= t << offset;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	     */
	    C.DES = BlockCipher._createHelper(DES);

	    /**
	     * Triple-DES block cipher algorithm.
	     */
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Create DES instances
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
	        },

	        encryptBlock: function (M, offset) {
	            this._des1.encryptBlock(M, offset);
	            this._des2.decryptBlock(M, offset);
	            this._des3.encryptBlock(M, offset);
	        },

	        decryptBlock: function (M, offset) {
	            this._des3.decryptBlock(M, offset);
	            this._des2.encryptBlock(M, offset);
	            this._des1.decryptBlock(M, offset);
	        },

	        keySize: 192/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	     */
	    C.TripleDES = BlockCipher._createHelper(TripleDES);
	}());


	return CryptoJS.TripleDES;

}));
},{"./cipher-core":103,"./core":104,"./enc-base64":105,"./evpkdf":107,"./md5":112}],135:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var X32WordArray = C_lib.WordArray;

	    /**
	     * x64 namespace.
	     */
	    var C_x64 = C.x64 = {};

	    /**
	     * A 64-bit word.
	     */
	    var X64Word = C_x64.Word = Base.extend({
	        /**
	         * Initializes a newly created 64-bit word.
	         *
	         * @param {number} high The high 32 bits.
	         * @param {number} low The low 32 bits.
	         *
	         * @example
	         *
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	         */
	        init: function (high, low) {
	            this.high = high;
	            this.low = low;
	        }

	        /**
	         * Bitwise NOTs this word.
	         *
	         * @return {X64Word} A new x64-Word object after negating.
	         *
	         * @example
	         *
	         *     var negated = x64Word.not();
	         */
	        // not: function () {
	            // var high = ~this.high;
	            // var low = ~this.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ANDs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to AND with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ANDing.
	         *
	         * @example
	         *
	         *     var anded = x64Word.and(anotherX64Word);
	         */
	        // and: function (word) {
	            // var high = this.high & word.high;
	            // var low = this.low & word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to OR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ORing.
	         *
	         * @example
	         *
	         *     var ored = x64Word.or(anotherX64Word);
	         */
	        // or: function (word) {
	            // var high = this.high | word.high;
	            // var low = this.low | word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise XORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to XOR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after XORing.
	         *
	         * @example
	         *
	         *     var xored = x64Word.xor(anotherX64Word);
	         */
	        // xor: function (word) {
	            // var high = this.high ^ word.high;
	            // var low = this.low ^ word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the left.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftL(25);
	         */
	        // shiftL: function (n) {
	            // if (n < 32) {
	                // var high = (this.high << n) | (this.low >>> (32 - n));
	                // var low = this.low << n;
	            // } else {
	                // var high = this.low << (n - 32);
	                // var low = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the right.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftR(7);
	         */
	        // shiftR: function (n) {
	            // if (n < 32) {
	                // var low = (this.low >>> n) | (this.high << (32 - n));
	                // var high = this.high >>> n;
	            // } else {
	                // var low = this.high >>> (n - 32);
	                // var high = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Rotates this word n bits to the left.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotL(25);
	         */
	        // rotL: function (n) {
	            // return this.shiftL(n).or(this.shiftR(64 - n));
	        // },

	        /**
	         * Rotates this word n bits to the right.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotR(7);
	         */
	        // rotR: function (n) {
	            // return this.shiftR(n).or(this.shiftL(64 - n));
	        // },

	        /**
	         * Adds this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to add with this word.
	         *
	         * @return {X64Word} A new x64-Word object after adding.
	         *
	         * @example
	         *
	         *     var added = x64Word.add(anotherX64Word);
	         */
	        // add: function (word) {
	            // var low = (this.low + word.low) | 0;
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
	            // var high = (this.high + word.high + carry) | 0;

	            // return X64Word.create(high, low);
	        // }
	    });

	    /**
	     * An array of 64-bit words.
	     *
	     * @property {Array} words The array of CryptoJS.x64.Word objects.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var X64WordArray = C_x64.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create();
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ]);
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ], 10);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 8;
	            }
	        },

	        /**
	         * Converts this 64-bit word array to a 32-bit word array.
	         *
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	         *
	         * @example
	         *
	         *     var x32WordArray = x64WordArray.toX32();
	         */
	        toX32: function () {
	            // Shortcuts
	            var x64Words = this.words;
	            var x64WordsLength = x64Words.length;

	            // Convert
	            var x32Words = [];
	            for (var i = 0; i < x64WordsLength; i++) {
	                var x64Word = x64Words[i];
	                x32Words.push(x64Word.high);
	                x32Words.push(x64Word.low);
	            }

	            return X32WordArray.create(x32Words, this.sigBytes);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {X64WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = x64WordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);

	            // Clone "words" array
	            var words = clone.words = this.words.slice(0);

	            // Clone each X64Word object
	            var wordsLength = words.length;
	            for (var i = 0; i < wordsLength; i++) {
	                words[i] = words[i].clone();
	            }

	            return clone;
	        }
	    });
	}());


	return CryptoJS;

}));
},{"./core":104}],136:[function(require,module,exports){
(function (self) {
  'use strict';

  function fetchPonyfill(options) {
    var Promise = options && options.Promise || self.Promise;
    var XMLHttpRequest = options && options.XMLHttpRequest || self.XMLHttpRequest;
    var global = self;

    return (function () {
      var self = Object.create(global, {
        fetch: {
          value: undefined,
          writable: true
        }
      });

      (function(self) {
        'use strict';

        if (self.fetch) {
          return
        }

        var support = {
          searchParams: 'URLSearchParams' in self,
          iterable: 'Symbol' in self && 'iterator' in Symbol,
          blob: 'FileReader' in self && 'Blob' in self && (function() {
            try {
              new Blob()
              return true
            } catch(e) {
              return false
            }
          })(),
          formData: 'FormData' in self,
          arrayBuffer: 'ArrayBuffer' in self
        }

        if (support.arrayBuffer) {
          var viewClasses = [
            '[object Int8Array]',
            '[object Uint8Array]',
            '[object Uint8ClampedArray]',
            '[object Int16Array]',
            '[object Uint16Array]',
            '[object Int32Array]',
            '[object Uint32Array]',
            '[object Float32Array]',
            '[object Float64Array]'
          ]

          var isDataView = function(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj)
          }

          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
          }
        }

        function normalizeName(name) {
          if (typeof name !== 'string') {
            name = String(name)
          }
          if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
            throw new TypeError('Invalid character in header field name')
          }
          return name.toLowerCase()
        }

        function normalizeValue(value) {
          if (typeof value !== 'string') {
            value = String(value)
          }
          return value
        }

        // Build a destructive iterator for the value list
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift()
              return {done: value === undefined, value: value}
            }
          }

          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator
            }
          }

          return iterator
        }

        function Headers(headers) {
          this.map = {}

          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value)
            }, this)
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1])
            }, this)
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name])
            }, this)
          }
        }

        Headers.prototype.append = function(name, value) {
          name = normalizeName(name)
          value = normalizeValue(value)
          var oldValue = this.map[name]
          this.map[name] = oldValue ? oldValue+','+value : value
        }

        Headers.prototype['delete'] = function(name) {
          delete this.map[normalizeName(name)]
        }

        Headers.prototype.get = function(name) {
          name = normalizeName(name)
          return this.has(name) ? this.map[name] : null
        }

        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name))
        }

        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value)
        }

        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this)
            }
          }
        }

        Headers.prototype.keys = function() {
          var items = []
          this.forEach(function(value, name) { items.push(name) })
          return iteratorFor(items)
        }

        Headers.prototype.values = function() {
          var items = []
          this.forEach(function(value) { items.push(value) })
          return iteratorFor(items)
        }

        Headers.prototype.entries = function() {
          var items = []
          this.forEach(function(value, name) { items.push([name, value]) })
          return iteratorFor(items)
        }

        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries
        }

        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'))
          }
          body.bodyUsed = true
        }

        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result)
            }
            reader.onerror = function() {
              reject(reader.error)
            }
          })
        }

        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader()
          var promise = fileReaderReady(reader)
          reader.readAsArrayBuffer(blob)
          return promise
        }

        function readBlobAsText(blob) {
          var reader = new FileReader()
          var promise = fileReaderReady(reader)
          reader.readAsText(blob)
          return promise
        }

        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf)
          var chars = new Array(view.length)

          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i])
          }
          return chars.join('')
        }

        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0)
          } else {
            var view = new Uint8Array(buf.byteLength)
            view.set(new Uint8Array(buf))
            return view.buffer
          }
        }

        function Body() {
          this.bodyUsed = false

          this._initBody = function(body) {
            this._bodyInit = body
            if (!body) {
              this._bodyText = ''
            } else if (typeof body === 'string') {
              this._bodyText = body
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString()
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer)
              // IE 10-11 can't handle a DataView body.
              this._bodyInit = new Blob([this._bodyArrayBuffer])
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body)
            } else {
              throw new Error('unsupported BodyInit type')
            }

            if (!this.headers.get('content-type')) {
              if (typeof body === 'string') {
                this.headers.set('content-type', 'text/plain;charset=UTF-8')
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set('content-type', this._bodyBlob.type)
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
              }
            }
          }

          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this)
              if (rejected) {
                return rejected
              }

              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob)
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]))
              } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as blob')
              } else {
                return Promise.resolve(new Blob([this._bodyText]))
              }
            }

            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
              } else {
                return this.blob().then(readBlobAsArrayBuffer)
              }
            }
          }

          this.text = function() {
            var rejected = consumed(this)
            if (rejected) {
              return rejected
            }

            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob)
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as text')
            } else {
              return Promise.resolve(this._bodyText)
            }
          }

          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode)
            }
          }

          this.json = function() {
            return this.text().then(JSON.parse)
          }

          return this
        }

        // HTTP methods whose capitalization should be normalized
        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

        function normalizeMethod(method) {
          var upcased = method.toUpperCase()
          return (methods.indexOf(upcased) > -1) ? upcased : method
        }

        function Request(input, options) {
          options = options || {}
          var body = options.body

          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError('Already read')
            }
            this.url = input.url
            this.credentials = input.credentials
            if (!options.headers) {
              this.headers = new Headers(input.headers)
            }
            this.method = input.method
            this.mode = input.mode
            if (!body && input._bodyInit != null) {
              body = input._bodyInit
              input.bodyUsed = true
            }
          } else {
            this.url = String(input)
          }

          this.credentials = options.credentials || this.credentials || 'omit'
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers)
          }
          this.method = normalizeMethod(options.method || this.method || 'GET')
          this.mode = options.mode || this.mode || null
          this.referrer = null

          if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests')
          }
          this._initBody(body)
        }

        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit })
        }

        function decode(body) {
          var form = new FormData()
          body.trim().split('&').forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split('=')
              var name = split.shift().replace(/\+/g, ' ')
              var value = split.join('=').replace(/\+/g, ' ')
              form.append(decodeURIComponent(name), decodeURIComponent(value))
            }
          })
          return form
        }

        function parseHeaders(rawHeaders) {
          var headers = new Headers()
          rawHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(':')
            var key = parts.shift().trim()
            if (key) {
              var value = parts.join(':').trim()
              headers.append(key, value)
            }
          })
          return headers
        }

        Body.call(Request.prototype)

        function Response(bodyInit, options) {
          if (!options) {
            options = {}
          }

          this.type = 'default'
          this.status = 'status' in options ? options.status : 200
          this.ok = this.status >= 200 && this.status < 300
          this.statusText = 'statusText' in options ? options.statusText : 'OK'
          this.headers = new Headers(options.headers)
          this.url = options.url || ''
          this._initBody(bodyInit)
        }

        Body.call(Response.prototype)

        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          })
        }

        Response.error = function() {
          var response = new Response(null, {status: 0, statusText: ''})
          response.type = 'error'
          return response
        }

        var redirectStatuses = [301, 302, 303, 307, 308]

        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code')
          }

          return new Response(null, {status: status, headers: {location: url}})
        }

        self.Headers = Headers
        self.Request = Request
        self.Response = Response

        self.fetch = function(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init)
            var xhr = new XMLHttpRequest()

            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || '')
              }
              options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
              var body = 'response' in xhr ? xhr.response : xhr.responseText
              resolve(new Response(body, options))
            }

            xhr.onerror = function() {
              reject(new TypeError('Network request failed'))
            }

            xhr.ontimeout = function() {
              reject(new TypeError('Network request failed'))
            }

            xhr.open(request.method, request.url, true)

            if (request.credentials === 'include') {
              xhr.withCredentials = true
            }

            if ('responseType' in xhr && support.blob) {
              xhr.responseType = 'blob'
            }

            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value)
            })

            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
          })
        }
        self.fetch.polyfill = true
      })(typeof self !== 'undefined' ? self : this);


      return {
        fetch: self.fetch,
        Headers: self.Headers,
        Request: self.Request,
        Response: self.Response
      };
    }());
  }

  if (typeof define === 'function' && define.amd) {
    define(function () {
      return fetchPonyfill;
    });
  } else if (typeof exports === 'object') {
    module.exports = fetchPonyfill;
  } else {
    self.fetchPonyfill = fetchPonyfill;
  }
}(typeof self === 'undefined' ? this : self));


},{}],137:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],138:[function(require,module,exports){
'use strict';

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

module.exports = {
    'default': 'RFC3986',
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return value;
        }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

},{}],139:[function(require,module,exports){
'use strict';

var stringify = require('./stringify');
var parse = require('./parse');
var formats = require('./formats');

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

},{"./formats":138,"./parse":140,"./stringify":141}],140:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var has = Object.prototype.hasOwnProperty;

var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    parameterLimit: 1000,
    plainObjects: false,
    strictNullHandling: false
};

var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);

    for (var i = 0; i < parts.length; ++i) {
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder);
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder);
            val = options.decoder(part.slice(pos + 1), defaults.decoder);
        }
        if (has.call(obj, key)) {
            obj[key] = [].concat(obj[key]).concat(val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function (chain, val, options) {
    var leaf = val;

    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];

        if (root === '[]') {
            obj = [];
            obj = obj.concat(leaf);
        } else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (
                !isNaN(index)
                && root !== cleanRoot
                && String(index) === cleanRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)
            ) {
                obj = [];
                obj[index] = leaf;
            } else {
                obj[cleanRoot] = leaf;
            }
        }

        leaf = obj;
    }

    return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys
        // that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options);
};

module.exports = function (str, opts) {
    var options = opts ? utils.assign({}, opts) : {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    }

    return utils.compact(obj);
};

},{"./utils":142}],141:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var formats = require('./formats');

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) { // eslint-disable-line func-name-matching
        return prefix + '[]';
    },
    indices: function indices(prefix, key) { // eslint-disable-line func-name-matching
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) { // eslint-disable-line func-name-matching
        return prefix;
    }
};

var toISO = Date.prototype.toISOString;

var defaults = {
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var stringify = function stringify( // eslint-disable-line func-name-matching
    object,
    prefix,
    generateArrayPrefix,
    strictNullHandling,
    skipNulls,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    formatter,
    encodeValuesOnly
) {
    var obj = object;
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;
        }

        obj = '';
    }

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (Array.isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        if (Array.isArray(obj)) {
            values = values.concat(stringify(
                obj[key],
                generateArrayPrefix(prefix, key),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly
            ));
        } else {
            values = values.concat(stringify(
                obj[key],
                prefix + (allowDots ? '.' + key : '[' + key + ']'),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly
            ));
        }
    }

    return values;
};

module.exports = function (object, opts) {
    var obj = object;
    var options = opts ? utils.assign({}, opts) : {};

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;
    if (typeof options.format === 'undefined') {
        options.format = formats['default'];
    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {
        throw new TypeError('Unknown format option provided.');
    }
    var formatter = formats.formatters[options.format];
    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        keys = keys.concat(stringify(
            obj[key],
            key,
            generateArrayPrefix,
            strictNullHandling,
            skipNulls,
            encode ? encoder : null,
            filter,
            sort,
            allowDots,
            serializeDate,
            formatter,
            encodeValuesOnly
        ));
    }

    var joined = keys.join(delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    return joined.length > 0 ? prefix + joined : '';
};

},{"./formats":138,"./utils":142}],142:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

var compactQueue = function compactQueue(queue) {
    var obj;

    while (queue.length) {
        var item = queue.pop();
        obj = item.obj[item.prop];

        if (Array.isArray(obj)) {
            var compacted = [];

            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }

            item.obj[item.prop] = compacted;
        }
    }

    return obj;
};

exports.arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

exports.merge = function merge(target, source, options) {
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        } else if (typeof target === 'object') {
            if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (Array.isArray(target) && !Array.isArray(source)) {
        mergeTarget = exports.arrayToObject(target, options);
    }

    if (Array.isArray(target) && Array.isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                if (target[i] && typeof target[i] === 'object') {
                    target[i] = exports.merge(target[i], item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = exports.merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

exports.assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

exports.decode = function (str) {
    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};

exports.encode = function encode(str) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = typeof str === 'string' ? str : String(str);

    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (
            c === 0x2D // -
            || c === 0x2E // .
            || c === 0x5F // _
            || c === 0x7E // ~
            || (c >= 0x30 && c <= 0x39) // 0-9
            || (c >= 0x41 && c <= 0x5A) // a-z
            || (c >= 0x61 && c <= 0x7A) // A-Z
        ) {
            out += string.charAt(i);
            continue;
        }

        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        out += hexTable[0xF0 | (c >> 18)]
            + hexTable[0x80 | ((c >> 12) & 0x3F)]
            + hexTable[0x80 | ((c >> 6) & 0x3F)]
            + hexTable[0x80 | (c & 0x3F)];
    }

    return out;
};

exports.compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];

        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }

    return compactQueue(queue);
};

exports.isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

exports.isBuffer = function isBuffer(obj) {
    if (obj === null || typeof obj === 'undefined') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
